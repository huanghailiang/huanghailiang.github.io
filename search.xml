<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>python debug 调试工具：pdb</title>
      <link href="/2019/09/30/python-debug-pdb/"/>
      <url>/2019/09/30/python-debug-pdb/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python-debug-调试工具：pdb"><a href="#python-debug-调试工具：pdb" class="headerlink" title="python debug 调试工具：pdb"></a>python debug 调试工具：pdb</h1><p>在使用命令行调试程序的时候，我们知道在C语言里面有一个工具叫gdb，可以帮助我们实现单步调试等操作，那么在python里面其实也有一个类似的工具pdb，这个工具可以帮助我们对python程序在命令行中进行单步调试等操作。</p><a id="more"></a><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pdb ***.py</span><br></pre></td></tr></table></figure><h2 id="pdb的常用命令说明："><a href="#pdb的常用命令说明：" class="headerlink" title="pdb的常用命令说明："></a>pdb的常用命令说明：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l #查看运行到哪行代码 </span><br><span class="line">n #单步运行，跳过函数 </span><br><span class="line">s #单步运行，可进入函数 </span><br><span class="line">p 变量 #查看变量值 </span><br><span class="line">b 行号 #断点设置到第几行 </span><br><span class="line">b #显示所有断点列表 </span><br><span class="line">cl 断点号 #删除某个断点 </span><br><span class="line">cl #删除所有断点 </span><br><span class="line">c #跳到下一个断点 </span><br><span class="line">r #return当前函数 </span><br><span class="line">exit #退出</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu 设置固定IP</title>
      <link href="/2019/09/15/ubuntu-%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9Aip/"/>
      <url>/2019/09/15/ubuntu-%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9Aip/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-设置固定IP"><a href="#Ubuntu-设置固定IP" class="headerlink" title="Ubuntu  设置固定IP"></a>Ubuntu  设置固定IP</h1><p>因为各种原因机房断电了，重启后服务器找不到了，后来确定是之前忘记设置固定IP了。</p><a id="more"></a><h1 id="设置固定IP的方法"><a href="#设置固定IP的方法" class="headerlink" title="设置固定IP的方法"></a>设置固定IP的方法</h1><h2 id="方法一-（该方法针对18-04可行，以前的版本好像不太行，没有试过，不过下面两个方法针对所有版本）"><a href="#方法一-（该方法针对18-04可行，以前的版本好像不太行，没有试过，不过下面两个方法针对所有版本）" class="headerlink" title="方法一 （该方法针对18.04可行，以前的版本好像不太行，没有试过，不过下面两个方法针对所有版本）"></a>方法一 （该方法针对18.04可行，以前的版本好像不太行，没有试过，不过下面两个方法针对所有版本）</h2><p>进入/etc/netplan/目录，会发现有一个yaml结尾的文件，我这里是50-cloud-init.yaml，可能每个人的不一样，但是没有关系，使用vim打开然后编辑，我的编辑结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file is generated from information provided by</span></span><br><span class="line"><span class="comment"># the datasource.  Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="comment"># To disable cloud-init's network configuration capabilities, write a file</span></span><br><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        enp0s31f6:</span><br><span class="line">            dhcp4: <span class="literal">true</span></span><br><span class="line">        enp4s0:</span><br><span class="line">                <span class="comment">#dhcp4: true</span></span><br><span class="line">            dhcp4: no</span><br><span class="line">            addresses: [172.16.8.227/24]</span><br><span class="line">            gateway4:  172.16.8.1</span><br><span class="line">            nameservers:</span><br><span class="line">                 addresses: [172.16.8.1, 114.114.114.114]</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p>最后执行以下命令更新IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在路由器上设置IP与MAC绑定。</p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>参考以前的博客<a href="https://huanghailiang.github.io/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_3/">设置服务器网络———by邵碧尧</a></p>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>py文件转换成exe格式</title>
      <link href="/2019/09/09/py2exe/"/>
      <url>/2019/09/09/py2exe/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="py文件转换成exe格式"><a href="#py文件转换成exe格式" class="headerlink" title="py文件转换成exe格式"></a>py文件转换成exe格式</h1><p>本人写好的py再给别人使用的时候，往往都需要再在别人的电脑上配置一遍环境，感觉超级麻烦，所以找到了pyinstaller这个工具，可以帮助我直接生成exe文件，当然也帮我做好了库环境的包含工作，简单方便，在此记录。<br><a id="more"></a></p><h2 id="安装pyinstaller"><a href="#安装pyinstaller" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h2 id="打包程序"><a href="#打包程序" class="headerlink" title="打包程序"></a>打包程序</h2><p>在命令行中进入所需打包的目录；</p><p>打包指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F demo.py</span><br></pre></td></tr></table></figure><p>参数含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-F指定打包后只生成一个exe格式的文件</span><br><span class="line">-D–onedir 创建一个目录，包含exe文件，但会依赖很多文件（默认选项）</span><br><span class="line">-c–console, –nowindowed 使用控制台，无界面(默认)</span><br><span class="line">-w–windowed, –noconsole 使用窗口，无控制台</span><br><span class="line">-p添加搜索路径，让其找到对应的库。</span><br><span class="line">-i改变生成程序的icon图标</span><br></pre></td></tr></table></figure></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>只能在windows上使用</li><li>只能使用英文路径</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh实现端口映射</title>
      <link href="/2019/09/05/ssh%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
      <url>/2019/09/05/ssh%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ssh实现端口映射"><a href="#ssh实现端口映射" class="headerlink" title="ssh实现端口映射"></a>ssh实现端口映射</h1><a id="more"></a><p>当一台服务器拥有公网IP，或者域名解析的时候（这个可以使用ddns进行配置），我们其他的服务器上面的服务也想映射出来，那么我们可以选择重新获取一个公网IP或者域名解析，但是这种方法会增加我们的消费，下面我们使用ssh来实现端口映射，从而实现其他服务器上的服务也能实现外网访问的操作。</p><h1 id="ssh的端口转发命令："><a href="#ssh的端口转发命令：" class="headerlink" title="ssh的端口转发命令："></a>ssh的端口转发命令：</h1><p>转发到远端：ssh -C -f -N -g -L 本地端口:目标IP:目标端口 用户名@目标IP</p><p>转发到本地：ssh -C -f -N -g –R 本地端口:目标IP:目标端口 用户名@目标IP</p><p>其中一些参数如下，想了解更多请查看帮助<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-C，是进行数据压缩。</span><br><span class="line"></span><br><span class="line">-f，是后台认证用户/密码，通常和-N连用，不用登录到远程主机。只有当提示用户名密码的时候才转向前台。</span><br><span class="line"></span><br><span class="line">-N，是不执行远端命令，在只是端口转发时这条命令很有用处。</span><br><span class="line"></span><br><span class="line">-g ，在-L/-R/-D参数中，是允许远端主机连接本地转发端口，如果不加这个参数，只允许本地主机建立连接。</span><br><span class="line"></span><br><span class="line">-L，则是将本地端口映射到远端主机端口。本地端口:目标IP:目标端口</span><br><span class="line"></span><br><span class="line">-R，表明是将远端主机端口映射到本地端口。本地端口:目标IP:目标端口</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>win10远程链接共享文件夹存在问题</title>
      <link href="/2019/09/04/win10%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/04/win10%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="win10远程链接共享文件夹存在问题"><a href="#win10远程链接共享文件夹存在问题" class="headerlink" title="win10远程链接共享文件夹存在问题"></a>win10远程链接共享文件夹存在问题</h1><p>我们在服务器上打开了一个共享文件夹，但是在远程链接的时候会发现链接不上，这可能是自己本地电脑的配置没有打开。<br><a id="more"></a></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ul><li>按win+r键盘组合键打开“运行”</li><li>在运行框中输入 “gpedit.msc ”，点击确定或者直接按键盘上的回车键。</li><li>组策略编辑器就打开了</li><li>依次选择 计算机配置 —&gt; 管理模板 —&gt; 网络 —&gt; Lanman工作站</li><li>然后右边 启用不安全的来宾登录</li><li>进去后选择  已启用  —&gt; 应用  即可</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改运行中的docker容器端口映射</title>
      <link href="/2019/08/22/docker-p/"/>
      <url>/2019/08/22/docker-p/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="修改运行中的docker容器端口映射"><a href="#修改运行中的docker容器端口映射" class="headerlink" title="修改运行中的docker容器端口映射"></a>修改运行中的docker容器端口映射</h1><a id="more"></a><p>在docker run的时候我们可能会忘记设置端口映射，或者我们已经设置过端口映射，但是因为某种原因，我们需要更改端口号，这个时候我们就需要进行更改端口映射的操作。</p><p>但是一般情况下是不可以改变容器的端口映射的，只能通过run命令指定端口号。</p><p>网上有很多方法：</p><p>1、删除原容器，重新新建容器，这时候使用-p指令添加端口映射；</p><p>2、修改容器配置文件，然后重启docker服务；</p><p>修改配置文件 /var/lib/docker/containers/[hash_of_the_container_ID]/hostconfig.json</p><p>重启docker服务操作 <code>systemctl restart docker</code></p><p>3、<strong>利用docker commit新构镜像【建议使用的方法】</strong></p><ul><li><p>停止docker容器</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop container_name</span><br></pre></td></tr></table></figure></li><li><p>commit新构docker image</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit container_name new_image:tag</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用上一步生成的image重新生成一个新的镜像（此时记得加上端口映射）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name new_container_name -p 80:80 new_image:tag</span><br></pre></td></tr></table></figure></li></ul><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><ul><li><p>对于第1个方法虽然很快捷，但是我们可能会需要重新配置镜像文件，比较麻烦；</p></li><li><p>对于第2个方法，我这边尝试好像是有问题的，我虽然改过了配置文件，但是重启docker以后端口的配置文件又自动变回去了，这一点我很郁闷，我也不知道为啥会这样，这里没有深究，先这样吧。</p></li><li><p>对于第3个方法，我觉得需要注意的是就是<code>docker images</code>界面多了一个镜像文件，可能管理啥的比较乱，但是省去了配置新镜像的繁琐步骤，<strong>不过我们需要知道原镜像的启动方式，以及本地文件的挂载等</strong>，我这边有些服务是通过自动文件脚本安装的，这个时候有时候找不到启动方式，或者对docker不太熟悉不知道本地文件怎么挂载上去，或者不知道本地文件的位置在哪里等等各种原因，这种方法虽然可以运行，但是可能还是不会达到想要的效果，所以我们还是需要知道原docker的启动方式以及本地文件地址等，再进行操作。</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>本地部署ShowDoc</title>
      <link href="/2019/08/19/ShowDoc/"/>
      <url>/2019/08/19/ShowDoc/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="本地部署ShowDoc"><a href="#本地部署ShowDoc" class="headerlink" title="本地部署ShowDoc"></a>本地部署ShowDoc</h1><h2 id="ShowDoc介绍"><a href="#ShowDoc介绍" class="headerlink" title="ShowDoc介绍"></a>ShowDoc介绍</h2><p>ShowDoc就是一个非常适合IT团队的在线文档分享工具，它可以加快团队之间沟通的效率。</p><a id="more"></a><p>使用markdown编辑的，语法简单好用，使用后感觉非常好使，所以在此留下链接地址，留做记录防止以后还会需要。当然本地没有服务器，我们也可以使用在线的<a href="http://www.showdoc.cc" target="_blank" rel="noopener">ShowDoc</a>。</p><h2 id="ShowDoc安装"><a href="#ShowDoc安装" class="headerlink" title="ShowDoc安装"></a>ShowDoc安装</h2><p><a href="https://github.com/star7th/showdoc" target="_blank" rel="noopener">开源GitHub地址</a></p><p><a href="https://www.showdoc.cc/help?page_id=1385767280275683" target="_blank" rel="noopener">中文教程</a></p><p>感觉作者的中文教程写的很清楚了，安装十分方便，可以使用自动脚本安装，也可以使用手动安装。</p>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用grep在文件夹查找文本内容</title>
      <link href="/2019/08/19/use-grep-to-find-something/"/>
      <url>/2019/08/19/use-grep-to-find-something/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用grep在文件夹查找文本内容"><a href="#使用grep在文件夹查找文本内容" class="headerlink" title="使用grep在文件夹查找文本内容"></a>使用grep在文件夹查找文本内容</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r <span class="string">"要查找的内容"</span> 目录名</span><br></pre></td></tr></table></figure><a id="more"></a><p>参数：</p><ul><li><code>-r</code> ( 或者 <code>--recursive</code> ) 选项用于遍历 <code>/path</code>的所有子目录，而</li><li><code>-l</code> ( 或者 <code>--files-with-matches</code> ) 选项用于只打印匹配文件的文件名，而不是匹配的行( 这也可以提高速度，因为 <code>grep</code> 停止了在第一个 MATCH 中读取该选项的文件)。</li><li><code>-H</code> 导致打印文件名( 在搜索多个文件时隐含)</li><li><code>-r</code> 执行递归搜索</li><li><code>-n</code> 导致打印行号</li><li><code>-I</code> 忽略二进制文件( 补码： <code>-a</code> 将所有文件视为文本</li><li><code>-F</code> 将 <code>search term</code> 视为文本，而不是正则表达式</li><li><code>-I</code> 执行不区分大小写的搜索</li><li><code>--color=always</code> 在管道经过 <code>less</code> 时强制颜色。 要使 <code>less</code> 支持颜色，你需要使用 <code>-r</code> 选项</li></ul><p>其他操作可以查看帮助 <code>grep --help</code></p>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Docker部署ShareLaTex并简单配置中文环境</title>
      <link href="/2019/07/25/Docker-deployment-ShareLaTex/"/>
      <url>/2019/07/25/Docker-deployment-ShareLaTex/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用Docker部署ShareLaTex并简单配置中文环境"><a href="#使用Docker部署ShareLaTex并简单配置中文环境" class="headerlink" title="使用Docker部署ShareLaTex并简单配置中文环境"></a>使用Docker部署ShareLaTex并简单配置中文环境</h1><p>转载：<a href="https://yxnchen.github.io/technique/Docker%E9%83%A8%E7%BD%B2ShareLaTeX%E5%B9%B6%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C" target="_blank" rel="noopener">使用Docker部署ShareLaTex并简单配置中文环境</a>来自 <a href="https://yxnchen.github.io/" target="_blank" rel="noopener">YXN’s Blog</a><br><a id="more"></a></p><blockquote><p>因为工作需要，在服务器上配置了ShareLaTex环境，因为资料真的超级少，然后看到了转载博主的博客较为详细，故转载在此，但是博主博客中有一点点地方没有说到后面会进行补充。</p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>系统与Docker环境安装同上篇<a href="https://yxnchen.github.io/technique/Docker%E9%83%A8%E7%BD%B2GitLab%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">Docker部署GitLab并实现基本配置</a>，然后继续按照教程安装==docker-compose==组件。</p><h1 id="安装并配置ShareLaTeX"><a href="#安装并配置ShareLaTeX" class="headerlink" title="安装并配置ShareLaTeX"></a>安装并配置ShareLaTeX</h1><blockquote><p>由于ShareLaTeX的安装依赖于MongoDB和Redis，因此本文将使用官方向导建议使用==docker-compose==快速部署ShareLaTeX</p></blockquote><ul><li>拉取最新的ShareLaTeX镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sharelatex/sharelatex</span><br></pre></td></tr></table></figure><ul><li>下载==docker-compose.yml==文件，并进行配置，见<a href="https://github.com/overleaf/overleaf/wiki/Quick-Start-Guide#using-a-compose-file" target="_blank" rel="noopener">Quick Start Guide</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/sharelatex          # 在用户目录下创建一个sharelatex文件夹</span><br><span class="line">cd ~/sharelatex                # 进入sharelatex文件夹</span><br><span class="line">curl -O https://raw.githubusercontent.com/sharelatex/sharelatex/master/docker-compose.yml                      # 下载官方的docker-compose.yml配置文件</span><br><span class="line">sudo vi docker-compose.yml     # 使用vi修改配置文件</span><br></pre></td></tr></table></figure><ul><li>需要配置的项</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 避免端口重复</span><br><span class="line">ports:</span><br><span class="line">- 5000:80</span><br><span class="line"></span><br><span class="line"># 修改本地挂载目录</span><br><span class="line">volumes:</span><br><span class="line">- /home/docker/sharelatex:/var/lib/sharelatex</span><br><span class="line"></span><br><span class="line"># 添加升级texlive需要的环境变量，主要是添加2018目录到2017前面，目的是为了防止后面安装完整版texlive时出现错误</span><br><span class="line"># 【这里原博主有写，但是我添加以后好像并没有什么效果，不添加也是可以的】</span><br><span class="line">environment:</span><br><span class="line">- PATH: /usr/localsbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/texlive/2018/bin/x86_64-linux:/usr/local/texlive/2017/bin/x86_64-linux</span><br><span class="line"></span><br><span class="line"># 下面选项设置ShareLaTeX的显示样式</span><br><span class="line">SHARELATEX_APP_NAME: Our ShareLaTeX</span><br><span class="line">SHARELATEX_NAV_TITLE: Our ShareLaTeX Instance</span><br><span class="line">SHARELATEX_HEADER_IMAGE_URL: http://somewhere.com/mylogo.png</span><br><span class="line">SHARELATEX_LEFT_FOOTER: &apos;[&#123;&quot;text&quot;: &quot;Powered by &lt;a href=\&quot;https://www.sharelatex.com\&quot;&gt;ShareLaTeX&lt;/a&gt; 2016&quot;&#125;,&#123;&quot;text&quot;: &quot;Another page I want to link to can be found &lt;a href=\&quot;here\&quot;&gt;here&lt;/a&gt;&quot;&#125; ]&apos;</span><br><span class="line">SHARELATEX_RIGHT_FOOTER: &apos;[&#123;&quot;text&quot;: &quot;Hello I am on the Right&quot;&#125; ]&apos;</span><br><span class="line"></span><br><span class="line"># 修改mongo和redis的本地挂载目录</span><br><span class="line"># mongo</span><br><span class="line">volumes:</span><br><span class="line">- /home/docker/mongo_data:/data/db</span><br><span class="line"># redis</span><br><span class="line">volumes:</span><br><span class="line">- /home/docker/redis_data:/data</span><br></pre></td></tr></table></figure><ul><li>创建并运行ShareLaTeX容器，启动后不要着急进入网站</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在sharelatex目录下</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><blockquote><p>==这里有一点需要<strong>注意</strong>==：就是我们配置好ShareLaTex后，如何也配置好了后面的中文环境，如果这个时候我们再去更改配置文件==docker-compose.yml==的话，我们再重新==docker-compose up -d==更新docker环境参数的话，下面的所有的操作都将要重新执行，包括升级并安装texlive操作，以及中文环境的配置。</p></blockquote><ul><li>升级并安装完整版texlive，<a href="https://www.tug.org/texlive/upgrade.html" target="_blank" rel="noopener">官方教程</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 进入容器的命令行（sharelatex容器本质上是一个Ubuntu）</span><br><span class="line">docker exec -it sharelatex bash</span><br><span class="line"></span><br><span class="line"># 进入texlive默认安装目录</span><br><span class="line">cd /usr/local/texlive</span><br><span class="line"></span><br><span class="line"># 复制2017文件夹为2018</span><br><span class="line">cp -a 2017 2018</span><br><span class="line"></span><br><span class="line"># 下载并运行升级脚本</span><br><span class="line">wget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh</span><br><span class="line">sh update-tlmgr-latest.sh -- --upgrade</span><br><span class="line"></span><br><span class="line"># 更换texlive的下载源，例如国内的清华源</span><br><span class="line">tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/</span><br><span class="line"></span><br><span class="line"># 升级tlmgr</span><br><span class="line">tlmgr update --self --all</span><br><span class="line"></span><br><span class="line"># 更新字体缓存（好像没成功，但是不影响下面操作）</span><br><span class="line">luaotfload-tool -fu</span><br><span class="line"></span><br><span class="line"># 安装完整版texlive（漫长的等待，不要让shell断开）</span><br><span class="line">tlmgr install scheme-full</span><br><span class="line"></span><br><span class="line"># 推出sharelatex的命令行界面，并重启sharelatex容器</span><br><span class="line">exit</span><br><span class="line">docker restart sharelatex</span><br></pre></td></tr></table></figure><ul><li>使用ShareLaTeX</li></ul><p>进入浏览器访问==<a href="http://192.168.8.21:5000/launchpad==，根据提示创建Admin用户。" target="_blank" rel="noopener">http://192.168.8.21:5000/launchpad==，根据提示创建Admin用户。</a></p><h1 id="配置中文写作环境"><a href="#配置中文写作环境" class="headerlink" title="配置中文写作环境"></a>配置中文写作环境</h1><blockquote><p>下载的sharelatex镜像里面默认是没有安装xfont和中文字体的，因此无法渲染中文文档，必须安装所需的中文字体，这里以Windows下常用字体和Adobe Song Std为例。原教程见<a href="https://blog.csdn.net/hello_percy/article/details/72147414" target="_blank" rel="noopener">ArchLinux 部署ShareLaTex并且配置中文支持</a>。</p></blockquote><ul><li><p>将Windows字体库（即目录==C:\windows\fonts==）上传到host机，如果Windows安装了Git可以使用==scp==命令直接上传</p></li><li><p>在host机下把==fonts==目录打包并传到sharelatex容器中</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 进入fonts目录</span><br><span class="line">cd fonts/</span><br><span class="line"></span><br><span class="line"># 删除其中的.fon字体文件（该种格式文件在后面建立字体目录时会报错），只保留TrueType和OpenType字体，即.ttf和.otf</span><br><span class="line"># 一般地，如果只需要其中特定的中文字体，只需要上传需要的字体即可</span><br><span class="line">rm -r *.fon</span><br><span class="line"></span><br><span class="line"># 返回上层目录并打包</span><br><span class="line">cd ..</span><br><span class="line">tar -zcvf winfonts.tar.gz fonts/</span><br><span class="line"></span><br><span class="line"># 把压缩文件传到sharelatex容器的root目录下</span><br><span class="line">docker cp winfonts.tar.gz sharelatex:/root</span><br></pre></td></tr></table></figure><ul><li>在容器中安装Windows字体</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 进入容器的命令行界面</span><br><span class="line">$ docker exec -it sharelatex bash</span><br><span class="line"></span><br><span class="line"># 通过安装wqy字体同时安装xfont工具</span><br><span class="line">$ apt-get install xfonts-wqy</span><br><span class="line"></span><br><span class="line"># 进入root目录，解压winfonts.tar.gz，并剪切到系统字体目录下</span><br><span class="line">cd ~</span><br><span class="line">tar -zxvf winfonts.tar.gz</span><br><span class="line">mv winfonts /usr/share/fonts/</span><br><span class="line"></span><br><span class="line"># 进入字体目录安装字体</span><br><span class="line">cd /usr/share/fonts/winfonts</span><br><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br><span class="line">fc-cache -fv</span><br><span class="line"></span><br><span class="line"># 检查确认中文字体安装成功</span><br><span class="line">fc-list :lang=zh-cn</span><br></pre></td></tr></table></figure><ul><li><p>回到ShareLaTeX网站，创建一个新项目，使用CTEX宏集和XeLaTeX编译器，即可生成中文pdf。（详见CTEX<a href="http://mirrors.ibiblio.org/CTAN/language/chinese/ctex/ctex.pdf" target="_blank" rel="noopener">宏集手册</a>）</p></li><li><p>因为学校论文的需要，有时需要其他中文字体，例如Adobe宋体，其安装流程与上述基本一致。（PS：在GitHub上可以找到公开的Adobe Song Std字体，涉及版权这里不放链接）</p></li></ul><blockquote><p>==<strong>注意</strong>==：到此出配置完成了，但是我们会发现我们直接写中文是有问题的，解决方案如下<br> （1）包含头      \documentclass[utf8]{ctexart}<br> （2）点开左上角的Menu，进去将Compiler改成XeLaTex即可<br> 这个时候我们就可以愉快的时使用ShareLatex的中文了</p></blockquote><h1 id="Latex教程和模板"><a href="#Latex教程和模板" class="headerlink" title="Latex教程和模板"></a><a href="https://huanghailiang.github.io/2019/07/14/latex/">Latex教程和模板</a></h1><p>这一块暂时懒得写，就简单的收集整理了一下别人写好的，收集的链接再<a href="https://huanghailiang.github.io/2019/07/14/latex/">这里</a>。</p>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>思维导图 XMind 8 Update 7的激活教程</title>
      <link href="/2019/07/25/XMind-8-Update-7/"/>
      <url>/2019/07/25/XMind-8-Update-7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="思维导图-XMind-8-Update-7的激活教程"><a href="#思维导图-XMind-8-Update-7的激活教程" class="headerlink" title="思维导图 XMind 8 Update 7的激活教程"></a>思维导图 XMind 8 Update 7的激活教程</h1><p>转自：<a href="https://blog.csdn.net/Zjhao666/article/details/80851530" target="_blank" rel="noopener">xmind8 破解激活教程</a><br><a id="more"></a><br>因为需要工作需要，需要经常用到思维导图来捋顺思路，然后发现了XMind这个软件比较不错，但是这个软件的pro版本有很多功能，但是需要序列号才可以使用pro，但是总会找到破解方法，破解后做一个备份，一遍后续有需要的时候使用。</p><h2 id="安装XMind"><a href="#安装XMind" class="headerlink" title="安装XMind"></a>安装XMind</h2><p>去<a href="https://www.xmind.cn/download/xmind8/" target="_blank" rel="noopener">XMind官网</a>下载XMind进行安装，或者直接搜索下载即可。</p><h2 id="下载破解补丁"><a href="#下载破解补丁" class="headerlink" title="下载破解补丁"></a>下载破解补丁</h2><p>这里直接使用转载博主的链接（感谢原博主）：</p><ul><li>下载地址：</li><li>链接：<a href="https://pan.baidu.com/s/1rgupjT51K0UeWgWTe3vGiQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1rgupjT51K0UeWgWTe3vGiQ</a> </li><li>提取码：u11r </li></ul><h2 id="激活XMind"><a href="#激活XMind" class="headerlink" title="激活XMind"></a>激活XMind</h2><ul><li>找到 XMind 安装目录, 如: D:\Program Files\XMind，将下载的破解补丁复制到这个目录中。</li><li>以文本格式打开安装目录中 XMind.ini</li><li>在 XMind.ini 最后追加一个字段-javaagent，然后加上XMindCrack.jar的绝对路径(PS 路径中不要有中文，否则会报错)。<br>例如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:D:\Program Files\XMind\XMindCrack.jar</span><br></pre></td></tr></table></figure><ul><li>打开 XMind, 点击帮助——序列号，然后输入以下序列号 ，邮箱随便填，可以填自己的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XAka34A2rVRYJ4XBIU35UZMUEEF64CMMIYZCK2FZZUQNODEKUHGJLFMSLIQMQUCUBXRENLK6NZL37JXP4PZXQFILMQ2RG5R7G4QNDO3PSOEUBOCDRYSSXZGRARV6MGA33TN2AMUBHEL4FXMWYTTJDEINJXUAV4BAYKBDCZQWVF3LWYXSDCXY546U3NBGOI3ZPAP2SO3CSQFNB7VVIY123456789012345</span><br></pre></td></tr></table></figure><p>完成以上操作即可激活成功，可以使用pro功能了。</p>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Latex 模板和教程</title>
      <link href="/2019/07/14/latex/"/>
      <url>/2019/07/14/latex/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Latex-模板和教程"><a href="#Latex-模板和教程" class="headerlink" title="Latex 模板和教程"></a>Latex 模板和教程</h1><p><a href="https://www.overleaf.com/latex/templates" target="_blank" rel="noopener">overleaf templates</a><br><a id="more"></a><br>The best source of free quality <a href="http://www.latextemplates.com/" title="latextemplates" target="_blank" rel="noopener">LaTeX templates</a>！</p><p><a href="https://yq.aliyun.com/articles/627562" target="_blank" rel="noopener">在简书中使用Latex书写数学公式</a></p><p><a href="https://blog.csdn.net/cocoonyang/article/details/78036326" target="_blank" rel="noopener">LaTex 入门</a></p><p><a href="https://www.jianshu.com/p/3e842d67ada2" target="_blank" rel="noopener">LaTeX零基础入门教程</a></p><p><a href="https://liam.page/2013/05/18/LaTeX-templates/" target="_blank" rel="noopener">【LaTeX Tips】LaTeX 模板收集</a></p><p><a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">在线Latex公式编辑器</a></p><p><a href="https://blog.csdn.net/meiqi0538/article/details/82887300" target="_blank" rel="noopener">LaTeX常用操作：添加标题、作者、时间、摘要、标题、段落、目录、字体、引用、脚注、图片\表格插入、数学符号、公式、交叉引用等</a></p><h1 id="在线进行表格转Latex工具"><a href="#在线进行表格转Latex工具" class="headerlink" title="在线进行表格转Latex工具"></a>在线进行表格转Latex工具</h1><p><a href="http://www.tablesgenerator.com/" target="_blank" rel="noopener">Tables Generator</a></p><h1 id="在线LateX公式编辑器"><a href="#在线LateX公式编辑器" class="headerlink" title="在线LateX公式编辑器"></a>在线LateX公式编辑器</h1><p><a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">在线latex公式编辑器</a></p>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文献管理</title>
      <link href="/2019/03/15/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/03/15/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、文献管理软件"><a href="#一、文献管理软件" class="headerlink" title="一、文献管理软件"></a>一、文献管理软件</h1><p>Zotero和Mendeley都是文献管理工具。网上对他们有一个对比<a href="http://blog.yesmryang.net/zotero-mendeley-papers/" title="Zotero, Mendeley, Papers比较" target="_blank" rel="noopener">Zotero, Mendeley, Papers比较</a></p><a id="more"></a><h2 id="1、Zotero-使用教程"><a href="#1、Zotero-使用教程" class="headerlink" title="1、Zotero 使用教程"></a>1、Zotero 使用教程</h2><p><a href="https://www.zotero.org/" title="Zotero官网地址" target="_blank" rel="noopener">Zotero官网地址</a><br>zotero是开源的文献管理工具，可以方便的收集，组织，引用，和共享文献的工具。</p><h3 id="1-1、安装及配置（安装了ZotFile和Zotero-Scholar-Citations插件）"><a href="#1-1、安装及配置（安装了ZotFile和Zotero-Scholar-Citations插件）" class="headerlink" title="1.1、安装及配置（安装了ZotFile和Zotero Scholar Citations插件）"></a>1.1、<a href="https://www.cnblogs.com/wushaogui/p/9015233.html" title="安装及配置" target="_blank" rel="noopener">安装及配置</a>（安装了ZotFile和Zotero Scholar Citations插件）</h3><blockquote><p>ZotFile：可以自动获取导入文件的元数据，自动命名附件</p><p>Zotero Scholar Citations：引用次数更新插件，不过这个插件需要翻出去才能使用。</p></blockquote><h3 id="1-2、数据备份"><a href="#1-2、数据备份" class="headerlink" title="1.2、数据备份"></a>1.2、<a href="https://www.cnblogs.com/wushaogui/p/9803153.html" title="数据备份" target="_blank" rel="noopener">数据备份</a></h3><p>这里使用了坚果云，其实就是一个跨平台的同步工具。</p><p><strong>当然除了坚果云，我们还有很多的同步软件，比如Dropbox、OneDrive、Google Drive，不过在国内我们应该大部分都只能用oneDrive，所以这里介绍一下oneDrive同步【参考地址：<a href="https://blog.csdn.net/uniooo/article/details/89931274" target="_blank" rel="noopener">Zotero使用第三方云服务同步（Dropbox、OneDrive、Google Drive）</a>】:</strong></p><blockquote><p><strong>Step 1:</strong><br>任务栏—编辑—首选项—高级—数据存储位置—打开数据文件夹。</p><p>可以打开Zotero的数据文件夹。默认是用户文件夹下的Zotero文件夹。在其中可以看到有一个名为storage的文件夹，即为文件（pdf之类的）的存储位置。</p><p><strong>Step 2:</strong><br>将storage文件夹剪切到，onedrive（或者其他）的同步位置。然后执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /d &quot;C:\xxx\Zotero\storage&quot; &quot;D:\OneDrive\ZoteroData\storage&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p>其中xxx为Zotero的地址。</p><blockquote><p><strong>Step 3:</strong><br>注册或者登陆Zotero用户。取消首选项中的文件同步。然后开始同步即可。</p></blockquote><p><strong>注：</strong></p><p><strong>1、安装好以后word中会有一个Zotero工具栏</strong></p><p><strong>2、浏览器插件Chrome好像需要翻墙，所以可以使用Firefox浏览器，只需要去<a href="https://www.zotero.org/download/" title="Zotero官网" target="_blank" rel="noopener">Zotero官网</a>下载插件,然后在Firefox浏览器中选择插件从文件安装附加组件，选中下载的插件安装重启浏览器既可。重启后右上角会有Save to Zotero图标。</strong></p><h2 id="2、Mendeley"><a href="#2、Mendeley" class="headerlink" title="2、Mendeley"></a>2、Mendeley</h2><h3 id="2-1、文献管理软件Mendeley优缺点分析"><a href="#2-1、文献管理软件Mendeley优缺点分析" class="headerlink" title="2.1、文献管理软件Mendeley优缺点分析"></a>2.1、<a href="https://blog.csdn.net/write_down/article/details/52819034" title="文献管理软件Mendeley优缺点分析" target="_blank" rel="noopener">文献管理软件Mendeley优缺点分析</a></h3><h3 id="2-2、用Mendeley在Word插入参考文献"><a href="#2-2、用Mendeley在Word插入参考文献" class="headerlink" title="2.2、用Mendeley在Word插入参考文献"></a>2.2、<a href="https://blog.csdn.net/golden1314521/article/details/50216289" title="用Mendeley在Word插入参考文献" target="_blank" rel="noopener">用Mendeley在Word插入参考文献</a></h3><h1 id="二、文件可视化分析软件"><a href="#二、文件可视化分析软件" class="headerlink" title="二、文件可视化分析软件"></a>二、文件可视化分析软件</h1><p>CiteSpace和vosviewer工具都是用来对文献进行可视化分析的软件，首先都是去先去web of science上下载数据，然后导入到软件中进行一系列的可视化分析。</p><h2 id="1、CiteSpace使用教程"><a href="#1、CiteSpace使用教程" class="headerlink" title="1、CiteSpace使用教程"></a>1、CiteSpace使用教程</h2><p>CiteSpace是一款可视化文献分析软件。</p><h3 id="1-1、CiteSpace图文教程"><a href="#1-1、CiteSpace图文教程" class="headerlink" title="1.1、CiteSpace图文教程"></a>1.1、<a href="https://wenku.baidu.com/view/1f44495f804d2b160b4ec068.html" title="CiteSpace图文教程" target="_blank" rel="noopener">CiteSpace图文教程</a></h3><h3 id="1-2、信息计量学-CiteSpace使用教程"><a href="#1-2、信息计量学-CiteSpace使用教程" class="headerlink" title="1.2、信息计量学|CiteSpace使用教程"></a>1.2、<a href="https://www.jianshu.com/p/49d41d0ccd7f" title="信息计量学|CiteSpace使用教程" target="_blank" rel="noopener">信息计量学|CiteSpace使用教程</a></h3><h3 id="1-3、citespace介绍及使用"><a href="#1-3、citespace介绍及使用" class="headerlink" title="1.3、citespace介绍及使用"></a>1.3、<a href="https://wenku.baidu.com/view/1e08768f312b3169a551a4aa.html" title="citespace介绍及使用" target="_blank" rel="noopener">citespace介绍及使用</a></h3><h2 id="2、Vosviewer使用教程"><a href="#2、Vosviewer使用教程" class="headerlink" title="2、Vosviewer使用教程"></a>2、Vosviewer使用教程</h2><p>Vosviewer一款文献可视化工具，是一款应用于科学文献中识别并显示科学发展新趋势和新动态的软件。</p><p>利用Citespace寻找某一学科领域的研究进展和当前的研究前沿，及其对应的知识基础。</p><h3 id="2-1、VOSviewer中文视频教程"><a href="#2-1、VOSviewer中文视频教程" class="headerlink" title="2.1、VOSviewer中文视频教程"></a>2.1、<a href="http://www.sohu.com/a/140557636_750788" title="VOSviewer中文视频教程" target="_blank" rel="noopener">VOSviewer中文视频教程</a></h3><h3 id="2-2、如何快速梳理领域文献"><a href="#2-2、如何快速梳理领域文献" class="headerlink" title="2.2、如何快速梳理领域文献"></a>2.2、<a href="https://www.jianshu.com/p/e20f3f1d17d8" title="如何快速梳理领域文献" target="_blank" rel="noopener">如何快速梳理领域文献</a></h3><h3 id="2-3、如何用VOSviewer分析CNKI数据"><a href="#2-3、如何用VOSviewer分析CNKI数据" class="headerlink" title="2.3、如何用VOSviewer分析CNKI数据"></a>2.3、<a href="https://www.jianshu.com/p/bdf69db5bfcb" title="如何用VOSviewer分析CNKI数据" target="_blank" rel="noopener">如何用VOSviewer分析CNKI数据</a></h3>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Nibabel库进行nii图像的读写操作</title>
      <link href="/2019/01/24/Nibabel/"/>
      <url>/2019/01/24/Nibabel/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为后期主要的研究方向是医学图像处理，而现有手头的大部分数据都是nii格式或者是hdr，img格式的数据，所以首先第一步我们需要解决图像的读写问题。<br><a id="more"></a></p><p>其实使用OpenCV也可以方便的进行图像读取，但是这里暂时只学习Nibabel这个库，后面有时间的话再研究OpenCV在python中的使用。</p><h1 id="Nibabel的安装"><a href="#Nibabel的安装" class="headerlink" title="Nibabel的安装"></a>Nibabel的安装</h1><p>可以通过pip进行安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nibabel</span><br></pre></td></tr></table></figure></p><h1 id="简单的图像读取和存储操作"><a href="#简单的图像读取和存储操作" class="headerlink" title="简单的图像读取和存储操作"></a>简单的图像读取和存储操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> nibabel <span class="keyword">as</span> nib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">path=<span class="string">'C:\Users\Darren\Desktop\example.nii.gz'</span></span><br><span class="line">img=nib.load(path)</span><br><span class="line"><span class="comment"># 查看图像的长宽高</span></span><br><span class="line">img.shap</span><br><span class="line"><span class="comment"># 图像进行仿射变换</span></span><br><span class="line">img.affine.shap</span><br><span class="line"><span class="comment"># 保存图像</span></span><br><span class="line">path_save=<span class="string">'C:\Users\Darren\Desktop\example_save.nii.gz'</span></span><br><span class="line"></span><br><span class="line">img.to_filename(path_save)</span><br><span class="line">或者</span><br><span class="line">nib.save(img,path_save)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tensorflow和pytorch环境搭建</title>
      <link href="/2019/01/23/tensorflow-and-pytorch-environment/"/>
      <url>/2019/01/23/tensorflow-and-pytorch-environment/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="tensorflow和pytorch环境搭建"><a href="#tensorflow和pytorch环境搭建" class="headerlink" title="tensorflow和pytorch环境搭建"></a>tensorflow和pytorch环境搭建</h1><p>初入深度学习的坑，先从环境配置开始。</p><a id="more"></a><p>本文将记录在Ubuntu 18.04环境中的搭建，对于Windows环境的搭建，这里暂时不做叙述。</p><p>本文首先搭建一些基本环境，比如CUDA，CUDNN，opencv以及anaconda用于管理环境。</p><p>在安装的tf以及pytorch的时候我们可以使用国内的镜像安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一次性的</span><br><span class="line">-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>也可以参考下面链接的方法进行设置：</p><blockquote><p><a href="https://www.cnblogs.com/microman/p/6107879.html" target="_blank" rel="noopener">https://www.cnblogs.com/microman/p/6107879.html</a><br><a href="https://blog.csdn.net/qq_29007291/article/details/81103603" target="_blank" rel="noopener">https://blog.csdn.net/qq_29007291/article/details/81103603</a></p></blockquote><h2 id="CUDA的安装"><a href="#CUDA的安装" class="headerlink" title="CUDA的安装"></a>CUDA的安装</h2><p>因为之前已经写过教程，这里不在赘述，详见<a href="https://huanghailiang.github.io/2017/07/22/ubuntu16-04-Server-install-CUDA/" title="CUDA安装">CUDA安装</a>。</p><p>不过CUDA有时候安装不了，很有可能是gcc和g++版本的问题，所以安装不顺的时候，可以检查一下gcc和g++的版本是否过高或者过低。</p><h2 id="CUDNN的安装"><a href="#CUDNN的安装" class="headerlink" title="CUDNN的安装"></a>CUDNN的安装</h2><p>去官网下载CUDNN的包，例如我这里下载的是cudnn-10.0-linux-x64-v7.4.2.24.tgz </p><p>执行一下操作进行解压安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf cudnn-10.0-linux-x64-v7.4.2.24.tgz </span><br><span class="line">sudo cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/include/</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64/</span><br><span class="line">sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/include/cudnn.h </span><br><span class="line">sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure></p><p>可以通过一下指令查看CUDNN的版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure></p><h2 id="OpenCV的安装"><a href="#OpenCV的安装" class="headerlink" title="OpenCV的安装"></a>OpenCV的安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 下载opencv</span><br><span class="line">git clone https://github.com/opencv/opencv</span><br><span class="line"># 安装依赖项</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff5-dev libdc1394-22-dev         # 处理图像所需的包</span><br><span class="line">sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev liblapacke-dev</span><br><span class="line">sudo apt-get install libxvidcore-dev libx264-dev         # 处理视频所需的包</span><br><span class="line">sudo apt-get install libatlas-base-dev gfortran          # 优化opencv功能</span><br><span class="line">sudo apt-get install ffmpeg</span><br><span class="line"># 编译安装opencv</span><br><span class="line">cd opencv</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line">make </span><br><span class="line">sudo make install</span><br><span class="line">#配置环境</span><br><span class="line">sudo /bin/bash -c &apos;echo &quot;/usr/local/lib&quot; &gt; /etc/ld.so.conf.d/opencv.conf&apos;</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h2 id="安装python-opencv"><a href="#安装python-opencv" class="headerlink" title="安装python-opencv"></a>安装python-opencv</h2><p>可直接使用apt安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-opencv</span><br><span class="line">sudo apt-get install python-numpy</span><br></pre></td></tr></table></figure></p><p>可以直接使用pip进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure></p><h2 id="Anaconda的安装"><a href="#Anaconda的安装" class="headerlink" title="Anaconda的安装"></a>Anaconda的安装</h2><p>去官网下载相应的Anaconda安装包，例如我这里下载的是Anaconda3-2018.12-Linux-x86_64.sh</p><p>执行以下命令安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-2018.12-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></p><p>根据提示一路yes即可，最后那个VS code也可以不安装，根据需要自行选择。</p><p>如果之前没有配置环境变量导致conda不可用，可以按照以下方式解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将anaconda的bin目录加入PATH，根据版本不同，也可能是~/anaconda3/bin</span><br><span class="line">echo &apos;export PATH=&quot;~/anaconda2/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class="line"># 更新bashrc以立即生效</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>安装完成后可以通过以下方式查看版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure></p><ul><li>注：对于服务器上多人使用，我们可以将anaconda安装在/opt目录下，激活使用的时候我们使用 source /etc/profile 指令</li></ul><h2 id="tensorflow和Pytorch环境的配置"><a href="#tensorflow和Pytorch环境的配置" class="headerlink" title="tensorflow和Pytorch环境的配置"></a>tensorflow和Pytorch环境的配置</h2><p>为了方便环境的版本的管理，我们使用anaconda来创建环境，然后来配置深度学习的环境，这样不至于让自己的环境很乱，只是每次进入环境的时候需要手动激活以下环境即可。</p><h3 id="tensorflow的环境配置"><a href="#tensorflow的环境配置" class="headerlink" title="tensorflow的环境配置"></a>tensorflow的环境配置</h3><p>首先我们需要创建环境,这里我们创建一个名为tensorflow36的环境，其中python版本为3.6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensorflow36 python=3.6</span><br></pre></td></tr></table></figure></p><p>其次我们激活环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate tensorflow36</span><br></pre></td></tr></table></figure></p><p>安装tensorflow<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># CPU版本</span><br><span class="line">pip install tensorflow</span><br><span class="line"># GPU版本</span><br><span class="line">pip install tensorflow-gpu</span><br><span class="line"># 卸载用</span><br><span class="line">pip uninstall tensorflow</span><br></pre></td></tr></table></figure></p><p>到此tensorflow的环境就安装好了，此处如果CUDA的版本过高的话GPU版本装上了也是用不了的，故需要注意版本问题。</p><p>退出当前环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate tensorflow36</span><br></pre></td></tr></table></figure></p><h3 id="pytorch的环境配置"><a href="#pytorch的环境配置" class="headerlink" title="pytorch的环境配置"></a>pytorch的环境配置</h3><p>首先我们创建一个名为pytorch的环境，其中python版本为3.7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pytorch python=3.7</span><br></pre></td></tr></table></figure></p><p>其次我们激活环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate pytorch</span><br></pre></td></tr></table></figure></p><p>pytorch的安装可以参考<a href="https://pytorch.org/" title="Pytorch官网" target="_blank" rel="noopener">Pytorch官网</a>进行安装。官网提供了多种安装方式，需要注意自己环境中的python版本以及CUDA的版本。<br>到此pytorch的环境配置以及完成</p><p>退出当前环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate pytorch</span><br></pre></td></tr></table></figure></p><h2 id="anaconda的简单使用"><a href="#anaconda的简单使用" class="headerlink" title="anaconda的简单使用"></a>anaconda的简单使用</h2><p>创建环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name &lt;env_name&gt; &lt;package_names&gt;</span><br></pre></td></tr></table></figure></p><p>激活环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate &lt;env_name&gt;</span><br></pre></td></tr></table></figure></p><p>退出当前环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate</span><br></pre></td></tr></table></figure></p><p>显示已经创建的环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br><span class="line">或</span><br><span class="line">conda info --envs</span><br><span class="line">或</span><br><span class="line">conda info -e</span><br></pre></td></tr></table></figure></p><p>复制环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name &lt;new_env_name&gt; --clone &lt;copied_env_name&gt;</span><br></pre></td></tr></table></figure></p><p>删除环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name &lt;env_name&gt; --all</span><br></pre></td></tr></table></figure></p><p>获取当前环境中已安装的包信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure></p><p>查找可供安装的包版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 精确查找</span><br><span class="line">conda search --full-name &lt;package_full_name&gt;</span><br><span class="line"># 模糊查找</span><br><span class="line">conda search &lt;text&gt;</span><br></pre></td></tr></table></figure></p><p>安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在指定环境中安装包</span><br><span class="line">conda install --name &lt;env_name&gt; &lt;package_name&gt;</span><br><span class="line"># 在当前环境中安装包</span><br><span class="line">conda install &lt;package_name&gt;</span><br><span class="line"># 使用pip安装包</span><br><span class="line">pip install &lt;package_name&gt;</span><br></pre></td></tr></table></figure></p><p>卸载包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 卸载指定环境中的包</span><br><span class="line">conda remove --name &lt;env_name&gt; &lt;package_name&gt;</span><br><span class="line"># 卸载当前环境中的包</span><br><span class="line">conda remove &lt;package_name&gt;</span><br></pre></td></tr></table></figure></p><p>更新包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 更新所有包</span><br><span class="line">conda update --all</span><br><span class="line">或</span><br><span class="line">conda upgrade --all</span><br><span class="line"># 更新指定包</span><br><span class="line">conda update &lt;package_name&gt;</span><br><span class="line">或</span><br><span class="line">conda upgrade &lt;package_name&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3 - NEURAL NETWORKS【神经网络】</title>
      <link href="/2018/10/28/pytorch-3/"/>
      <url>/2018/10/28/pytorch-3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文地址：<br><a href="https://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html" target="_blank" rel="noopener">https://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html</a></p><a id="more"></a><h1 id="NEURAL-NETWORKS-【神经网络】"><a href="#NEURAL-NETWORKS-【神经网络】" class="headerlink" title="NEURAL NETWORKS 【神经网络】"></a>NEURAL NETWORKS 【神经网络】</h1><p>可以使用torch.nn包来构建神经网络。</p><p>现在您已经了解了autograd, nn依赖autograd来定义模型并区分它们。一个nn.Module包含层，和一种方法forward(input)，它返回output。</p><p>例如，对数字图像的分类网络：</p><img src="/images/pytorch-3-1.png"><p><strong>卷积神经网络</strong></p><p>它是一个简单的前馈网络。它获取输入，一个接一个地通过几个层，最后给出输出结果。</p><p>神经网络的典型训练过程如下：</p><ul><li>定义具有一些可学习参数（或权重）的神经网络</li><li>迭代输入数据</li><li>通过网络处理输入</li><li>计算损失（输出与正确结果的距离）</li><li>将梯度传播回网络参数中</li><li>更新网络中的权重，使用简单的典型的更新规则：weight = weight - learning_rate * gradient</li></ul><h1 id="定义网络"><a href="#定义网络" class="headerlink" title="定义网络"></a>定义网络</h1><p>让我们定义这个网络：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#nn.Module子类的函数必须再构造函数种执行父类的构造函数</span></span><br><span class="line">        <span class="comment">#下式等价于nn.Module.__init__(self)</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        <span class="comment"># 1 input image channel, 6 output channels, 5x5 square convolution</span></span><br><span class="line">        <span class="comment"># kernel</span></span><br><span class="line">        <span class="comment">#卷积层'1'表示输入图片为单通道，‘6’表示输出通道数</span></span><br><span class="line">        <span class="comment">#‘5’表示卷积核为5*5</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># an affine operation: y = Wx + b</span></span><br><span class="line">        <span class="comment">#仿射层/全连接层，y=Wx+b</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment">#卷积 --&gt; 激活 --&gt; 池化</span></span><br><span class="line">        <span class="comment"># Max pooling over a (2, 2) window</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># If the size is a square you can only specify a single number</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        <span class="comment">#reshape, '-1'表示自适应</span></span><br><span class="line">        x = x.view(<span class="number">-1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num_flat_features</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        size = x.size()[<span class="number">1</span>:]  <span class="comment"># all dimensions except the batch dimension</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">print(net)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Net(</span><br><span class="line">  (conv1): Conv2d(<span class="number">1</span>, <span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">  (conv2): Conv2d(<span class="number">6</span>, <span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">  (fc1): Linear(in_features=<span class="number">400</span>, out_features=<span class="number">120</span>, bias=<span class="keyword">True</span>)</span><br><span class="line">  (fc2): Linear(in_features=<span class="number">120</span>, out_features=<span class="number">84</span>, bias=<span class="keyword">True</span>)</span><br><span class="line">  (fc3): Linear(in_features=<span class="number">84</span>, out_features=<span class="number">10</span>, bias=<span class="keyword">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>你仅仅只需要定义forward函数，并且使用autograd会自动帮你定义backward函数（计算梯度的地方）。你可以在forward函数中使用任何Tensor操作。</p><p>模型的可学习参数由net.parameters()返回 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">params = list(net.parameters())</span><br><span class="line">print(len(params))</span><br><span class="line">print(params[<span class="number">0</span>].size())  <span class="comment"># conv1's .weight</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">torch.Size([6, 1, 5, 5])</span><br></pre></td></tr></table></figure><p>让我们尝试一个随机的32x32输入注意:这个网络(LeNet)的预期输入大小是32x32。要在MNIST数据集中使用这个网络，请将数据集中的图像调整到32x32。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">out = net(input)</span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[ 0.0435, -0.1141, -0.0298, -0.0904,  0.1214,  0.1464, -0.0767,  0.0372,</span><br><span class="line">          0.0243, -0.1016]], grad_fn=&lt;ThAddmmBackward&gt;)</span><br></pre></td></tr></table></figure><p>使用随机梯度将所有参数和反向传播的梯度缓冲区归零：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.zero_grad()</span><br><span class="line">out.backward(torch.randn(<span class="number">1</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><blockquote><p>torch.nn只支持小批量。整个torch.nn包只支持小批量的样本输入，而不是一个单一的样本。</p><p>例如：nn.Conv2d将使用4D的tensor   nSamples x nChannels x Height x Width.</p><p>如果你只有一个单一样本，只需要使用input.unsqueeze(0)去添加一个假的批处理维度。</p></blockquote><p>在继续之前，让我们回顾一下到目前为止您所看到的所有类。</p><h1 id="概要："><a href="#概要：" class="headerlink" title="概要："></a>概要：</h1><ul><li><strong>torch.tensor</strong> 支持例如backward()的autograd操作的多维数组。也保留了tensor的梯度。</li><li><strong>nn.Module</strong> 神经网络模型。使用帮助成像将它们移动到GPU,输出，加载等，方便的封装参数。</li><li><strong>nn.Parameter</strong> Tensor的一种，当分配一个属性给Module的时候，会自动注册一个参数。</li><li><strong>autograd.Function</strong> 实现autograd操作的前向和后向定义。每一个Tensor操作，至少创建一个Function节点，该节点连接到一个创建的Tensor并且对它的历史编码。</li></ul><p><strong>在这点上，我们覆盖包含了：</strong></p><ul><li>定义了神经网络</li><li>处理输入并且向后调用</li></ul><p><strong>还剩下：</strong></p><ul><li>计算损失</li><li>更新神经网络的权重</li></ul><h1 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h1><p>损失函数使用一对输入（输出，目标），并且计算一个值来估计输出到目标的距离。</p><p>在nn包下有几种不同的损失函数。一个简单的损失是：<strong>nn.MSELoss</strong>它计算输入和目标之间的均方误差。</p><p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">output = net(input)</span><br><span class="line">target = torch.randn(<span class="number">10</span>)  <span class="comment"># a dummy target, for example</span></span><br><span class="line">target = target.view(<span class="number">1</span>, <span class="number">-1</span>)  <span class="comment"># make it the same shape as output</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">print(loss)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor(<span class="number">1.1380</span>, grad_fn=&lt;MseLossBackward&gt;)</span><br></pre></td></tr></table></figure></p><p>现在，如果您按照loss向后方向，使用其 .grad_fn属性，您将看到如下所示的计算图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; conv2d -&gt; relu -&gt; maxpool2d</span><br><span class="line">      -&gt; view -&gt; linear -&gt; relu -&gt; linear -&gt; relu -&gt; linear</span><br><span class="line">      -&gt; MSELoss</span><br><span class="line">      -&gt; loss</span><br></pre></td></tr></table></figure><p>因此，当我们调用时loss.backward()，整个图形会随着损失而区分，并且图形中的所有张量都requires_grad=True 将.grad使用渐变累积其Tensor。</p><p>为了说明，让我们向后退几步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(loss.grad_fn)  <span class="comment"># MSELoss</span></span><br><span class="line">print(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># Linear</span></span><br><span class="line">print(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># ReLU</span></span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MseLossBackward object at 0x00000225B8275CF8&gt;</span><br><span class="line">&lt;ThAddmmBackward object at 0x00000225B8275DA0&gt;</span><br><span class="line">&lt;ExpandBackward object at 0x00000225B8275CF8&gt;</span><br></pre></td></tr></table></figure></p><h1 id="BACKPROP-【反向传播】"><a href="#BACKPROP-【反向传播】" class="headerlink" title="BACKPROP 【反向传播】"></a>BACKPROP 【反向传播】</h1><p>要反向传播错误，我们所要做的就是loss.backward()。您需要清除现有渐变，否则渐变将累积到现有渐变。</p><p>现在我们就调用loss.backward()，看一下conv1在向后之前和之后的偏差梯度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">net.zero_grad()     <span class="comment"># zeroes the gradient buffers of all parameters</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'conv1.bias.grad before backward'</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'conv1.bias.grad after backward'</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conv1.bias.grad before backward</span><br><span class="line">tensor([0., 0., 0., 0., 0., 0.])</span><br><span class="line">conv1.bias.grad after backward</span><br><span class="line">tensor([ 0.0056,  0.0107, -0.0053, -0.0074,  0.0051, -0.0064])</span><br></pre></td></tr></table></figure><p>现在，我们已经看到了如何使用损失函数。</p><p>唯一要学习的是：</p><ul><li>更新网络权重</li></ul><h1 id="更新权重"><a href="#更新权重" class="headerlink" title="更新权重"></a>更新权重</h1><p>实践中使用的最简单的更新规则是随机梯度下降（SGD）：</p><p>weight = weight - learning_rate * gradient</p><p>我们可以使用简单的python代码实现它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> net.parameters():</span><br><span class="line">    f.data.sub_(f.grad.data * learning_rate)</span><br></pre></td></tr></table></figure><p>但是，当您使用神经网络时，您希望使用各种不同的更新规则，例如SGD，Nesterov-SGD，Adam，RMSProp等。为了实现这一点，我们构建了一个小包：torch.optim它实现了所有这些方法。使用它非常简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># create your optimizer</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># in your training loop:</span></span><br><span class="line">optimizer.zero_grad()   <span class="comment"># zero the gradient buffers</span></span><br><span class="line">output = net(input)</span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">loss.backward()</span><br><span class="line">optimizer.step()    <span class="comment"># Does the update</span></span><br></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>观察如何使用optimizer.zero_grad()手动将梯度缓冲区设置为零。这是因为梯度是按照Backprop部分解释的那样积累的。</p>]]></content>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言解析txt中的参数</title>
      <link href="/2018/10/25/Parse-Param/"/>
      <url>/2018/10/25/Parse-Param/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C语言解析txt中的参数"><a href="#C语言解析txt中的参数" class="headerlink" title="C语言解析txt中的参数"></a>C语言解析txt中的参数</h1><p>// ParseParam.h — See ParseParam.c for example of use<br>//<a href="http://www.gdargaud.net/Hack/SourceCode.html" target="_blank" rel="noopener">http://www.gdargaud.net/Hack/SourceCode.html</a></p><a id="more"></a><h3 id="H文件"><a href="#H文件" class="headerlink" title="H文件"></a>H文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ParseParam.h -- See ParseParam.c for example of use</span></span><br><span class="line"><span class="comment">//http://www.gdargaud.net/Hack/SourceCode.html</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _PARSE_PARAM</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PARSE_PARAM</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctype.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">char</span>* <span class="title">ReadParseParam</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* FileName, <span class="keyword">char</span> *VariableName)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> *TempPP;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeperateIntegerFromArray</span><span class="params">(<span class="keyword">char</span> *Array, <span class="keyword">int</span> *List)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeperateFloatFromArray</span><span class="params">(<span class="keyword">char</span> *Array, <span class="keyword">float</span> *List)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeperateStringFromArray</span><span class="params">(<span class="keyword">char</span> *Array, <span class="keyword">char</span> **List)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ParseParamString(FileName, Str) \</span></span><br><span class="line"><span class="keyword">if</span> ((TempPP=ReadParseParam((ParamFileName), #Str))!=<span class="literal">NULL</span>) \</span><br><span class="line"><span class="built_in">strcpy</span>(Str, TempPP); <span class="keyword">else</span> Str[<span class="number">0</span>]=<span class="string">'\0'</span></span><br><span class="line"></span><br><span class="line">#define ParseParamInt(FileName, Int) \</span><br><span class="line"><span class="keyword">if</span> ((TempPP=ReadParseParam((ParamFileName), #Int))!=<span class="literal">NULL</span>) \</span><br><span class="line">Int=atoi(TempPP); <span class="keyword">else</span> Int=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">#define ParseParamHex(FileName, Int) \</span><br><span class="line"><span class="keyword">if</span> ((TempPP=ReadParseParam((ParamFileName), #Int))!=<span class="literal">NULL</span>) \</span><br><span class="line">Int=strtol(TempPP, <span class="literal">NULL</span>, <span class="number">16</span>); <span class="keyword">else</span> Int=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">#define ParseParamFloat(FileName, Flt) \</span><br><span class="line"><span class="keyword">if</span> ((TempPP=ReadParseParam((ParamFileName), #Flt))!=<span class="literal">NULL</span>) \</span><br><span class="line">Flt=atof(TempPP); <span class="keyword">else</span> Flt=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">#define ParseParamBool(FileName, B) \</span><br><span class="line"><span class="keyword">if</span> ((TempPP=ReadParseParam((ParamFileName), #B))!=<span class="literal">NULL</span>) \</span><br><span class="line">B=(<span class="built_in">toupper</span>(TempPP[<span class="number">0</span>])==<span class="string">'Y'</span> || <span class="built_in">toupper</span>(TempPP[<span class="number">0</span>])==<span class="string">'T'</span>|| TempPP[<span class="number">0</span>]==<span class="string">'1'</span>); <span class="keyword">else</span> B=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="CPP文件"><a href="#CPP文件" class="headerlink" title="CPP文件"></a>CPP文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">MODULE: ParseParam</span></span><br><span class="line"><span class="comment">PURPOSE:  Parses a parameter file into variables</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">EXAMPLE:</span></span><br><span class="line"><span class="comment">ParseParamString("Param.txt", DirSfcBin);</span></span><br><span class="line"><span class="comment">ParseParamInt("Param.txt", MaxLat);</span></span><br><span class="line"><span class="comment">ParseParamFloat("Param.txt", MaxScale);</span></span><br><span class="line"><span class="comment">ParseParamBool("Param.txt", DoLegend);</span></span><br><span class="line"><span class="comment">ParseParamHex("Param.txt", ColorZero);</span></span><br><span class="line"><span class="comment">ParseParamHex("Param.txt", ColorNan);</span></span><br><span class="line"><span class="comment">ParseParamHex("Param.txt", ColorCurve);</span></span><br><span class="line"><span class="comment">will parse the following file:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-------- Start of file "Param.txt"</span></span><br><span class="line"><span class="comment">; This is the parameter file for RainMerge.exe and MergeMonth.exe</span></span><br><span class="line"><span class="comment">; Comments are preceded by ; # or !</span></span><br><span class="line"><span class="comment">; You can use blank lines too</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">DirSfcBin="/raid/data/SfcRain/"; Use double quotes around strings</span></span><br><span class="line"><span class="comment">NAN=-9999.; float, ignored value</span></span><br><span class="line"><span class="comment">MaxLat = 40; integer</span></span><br><span class="line"><span class="comment">ColorZero=0xC0C0C0; hex value</span></span><br><span class="line"><span class="comment">ColorNan =FFFFFF; optional 0x</span></span><br><span class="line"><span class="comment">ColorCuve=0x101040; Syntax error</span></span><br><span class="line"><span class="comment">MaxScale=10.; leading/trailing spaces are ignored</span></span><br><span class="line"><span class="comment">DoLegend=Y; Bool can be T, F, Y, N, True, False, Yes, No, 0, 1...</span></span><br><span class="line"><span class="comment">------- End of file "Param.txt"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">******************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ParseParam.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINE_DIM 8192</span></span><br><span class="line"><span class="keyword">char</span> *TempPP=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">FUNCTION: ReadParam</span></span><br><span class="line"><span class="comment">PURPOSE:  Read one parameter by parsing a parameter file</span></span><br><span class="line"><span class="comment">RETURNS: a pointer to a string containing the value or NULL if not found</span></span><br><span class="line"><span class="comment">Use the macros to convert to typed values</span></span><br><span class="line"><span class="comment">******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">ReadParseParam</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* FileName, <span class="keyword">char</span> *VariableName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> Str[LINE_DIM];</span><br><span class="line"><span class="keyword">char</span> *VarName, *Comment=<span class="literal">NULL</span>, *Equal=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *FirstQuote, *LastQuote, *P1, *P2;</span><br><span class="line"><span class="keyword">int</span> Line=<span class="number">0</span>, Len=<span class="number">0</span>, Pos=<span class="number">0</span>;</span><br><span class="line">FILE *file=fopen(FileName, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file==<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nError: Could not find file %s"</span>, FileName);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fgets(Str, LINE_DIM<span class="number">-1</span>, file) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">Line++;</span><br><span class="line">Len=<span class="built_in">strlen</span>(Str);</span><br><span class="line"><span class="keyword">if</span> (Len==<span class="number">0</span>) <span class="keyword">goto</span> Next;</span><br><span class="line"><span class="keyword">if</span> (Str[Len<span class="number">-1</span>]==<span class="string">'\n'</span> || Str[Len<span class="number">-1</span>]==<span class="string">'\r'</span>) Str[--Len]=<span class="string">'\0'</span>;</span><br><span class="line">Equal = <span class="built_in">strchr</span> (Str, <span class="string">'='</span>);<span class="comment">// search for equal sign</span></span><br><span class="line">Pos = <span class="built_in">strcspn</span> (Str, <span class="string">";#!"</span>);<span class="comment">// search for comment</span></span><br><span class="line">Comment = (Pos==Len) ? <span class="literal">NULL</span> : Str+Pos;</span><br><span class="line"><span class="keyword">if</span> (Equal==<span class="literal">NULL</span> || ( Comment!=<span class="literal">NULL</span> &amp;&amp; Comment&lt;=Equal)) <span class="keyword">goto</span> Next;<span class="comment">// Only comment</span></span><br><span class="line">*Equal++ = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">if</span> (Comment!=<span class="literal">NULL</span>) *Comment=<span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line">FirstQuote=<span class="built_in">strchr</span> (Equal, <span class="string">'"'</span>);<span class="comment">// search for double quote char</span></span><br><span class="line">LastQuote=<span class="built_in">strrchr</span> (Equal, <span class="string">'"'</span>);</span><br><span class="line"><span class="keyword">if</span> (FirstQuote!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (LastQuote==<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nError reading parameter file %s line %d - Missing end quote."</span>, FileName, Line);</span><br><span class="line"><span class="keyword">goto</span> Next;</span><br><span class="line">&#125;</span><br><span class="line">*FirstQuote=*LastQuote=<span class="string">'\0'</span>;</span><br><span class="line">Equal=FirstQuote+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// removes leading/trailing spaces</span></span><br><span class="line">Pos=<span class="built_in">strspn</span> (Str, <span class="string">" \t"</span>);</span><br><span class="line"><span class="keyword">if</span> (Pos==<span class="built_in">strlen</span>(Str)) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nError reading parameter file %s line %d - Missing variable name."</span>, FileName, Line);</span><br><span class="line"><span class="keyword">goto</span> Next;<span class="comment">// No function name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((P1=<span class="built_in">strrchr</span>(Str, <span class="string">' '</span>))!=<span class="literal">NULL</span> || (P2=<span class="built_in">strrchr</span>(Str, <span class="string">'\t'</span>))!=<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">if</span> (P1!=<span class="literal">NULL</span>) *P1=<span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (P2!=<span class="literal">NULL</span>) *P2=<span class="string">'\0'</span>;</span><br><span class="line">VarName=Str+Pos;</span><br><span class="line"><span class="comment">//while (strspn(VarName, " \t")==strlen(VarName)) VarName++;</span></span><br><span class="line"></span><br><span class="line">Pos=<span class="built_in">strspn</span> (Equal, <span class="string">" \t"</span>);</span><br><span class="line"><span class="keyword">if</span> (Pos==<span class="built_in">strlen</span>(Equal)) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nError reading parameter file %s line %d - Missing value."</span>, FileName, Line);</span><br><span class="line"><span class="keyword">goto</span> Next;<span class="comment">// No function name</span></span><br><span class="line">&#125;</span><br><span class="line">Equal+=Pos;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%s=%s\n", VarName, Equal);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(VarName, VariableName)==<span class="number">0</span>) &#123;<span class="comment">// Found it</span></span><br><span class="line">fclose(file);</span><br><span class="line"><span class="keyword">return</span> Equal;</span><br><span class="line">&#125;</span><br><span class="line">Next:;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not found</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error reading parameter file %s - Variable %s not found."</span>, </span><br><span class="line">FileName, VariableName);</span><br><span class="line">fclose(file);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeperateIntegerFromArray</span><span class="params">(<span class="keyword">char</span> *Array, <span class="keyword">int</span> *List)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//input: the array of integer with ',' as the seperater</span></span><br><span class="line"><span class="comment">//output: the number of segments and the array of parsed integers</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">char</span> *pch, *pre_start;</span><br><span class="line"><span class="keyword">char</span> item[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">pch = <span class="built_in">strchr</span>(Array, <span class="string">','</span>);</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">pre_start = Array;</span><br><span class="line"><span class="keyword">while</span> (pch!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> length = pch-pre_start;</span><br><span class="line"><span class="built_in">strncpy</span>(item, pre_start, length);</span><br><span class="line">item[length] = <span class="string">'\0'</span>;</span><br><span class="line">pre_start = pre_start + length + <span class="number">1</span>;</span><br><span class="line">List[count] = atoi(item);</span><br><span class="line">count++;</span><br><span class="line">pch = <span class="built_in">strchr</span>(pre_start, <span class="string">','</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sprintf</span>(item, <span class="string">"%s"</span>, pre_start);</span><br><span class="line">List[count] = atoi(item);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeperateFloatFromArray</span><span class="params">(<span class="keyword">char</span> *Array, <span class="keyword">float</span> *List)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//input: the array of integer with ',' as the seperater</span></span><br><span class="line"><span class="comment">//output: the number of segments and the array of parsed integers</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">char</span> *pch, *pre_start;</span><br><span class="line"><span class="keyword">char</span> item[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">pch = <span class="built_in">strchr</span>(Array, <span class="string">','</span>);</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">pre_start = Array;</span><br><span class="line"><span class="keyword">while</span> (pch!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> length = pch-pre_start;</span><br><span class="line"><span class="built_in">strncpy</span>(item, pre_start, length);</span><br><span class="line">item[length] = <span class="string">'\0'</span>;</span><br><span class="line">pre_start = pre_start + length + <span class="number">1</span>;</span><br><span class="line">List[count] = atof(item);</span><br><span class="line">count++;</span><br><span class="line">pch = <span class="built_in">strchr</span>(pre_start, <span class="string">','</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sprintf</span>(item, <span class="string">"%s"</span>, pre_start);</span><br><span class="line">List[count] = atof(item);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeperateStringFromArray</span><span class="params">(<span class="keyword">char</span> *Array, <span class="keyword">char</span> **List)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//input: the array of integer with ',' as the seperater</span></span><br><span class="line"><span class="comment">//output: the number of segments and the array of parsed integers</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">char</span> *pch, *pre_start;</span><br><span class="line"></span><br><span class="line">pch = <span class="built_in">strchr</span>(Array, <span class="string">','</span>);</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">pre_start = Array;</span><br><span class="line"><span class="keyword">while</span> (pch!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> length = pch-pre_start;</span><br><span class="line"><span class="built_in">strncpy</span>(List[count], pre_start, length);</span><br><span class="line">List[count][length] = <span class="string">'\0'</span>;</span><br><span class="line">pre_start = pre_start + length + <span class="number">1</span>;</span><br><span class="line">count++;</span><br><span class="line">pch = <span class="built_in">strchr</span>(pre_start, <span class="string">','</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sprintf</span>(List[count], <span class="string">"%s"</span>, pre_start);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法（例子）"><a href="#使用方法（例子）" class="headerlink" title="使用方法（例子）"></a>使用方法（例子）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">char</span> ParamFileName[<span class="number">300</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(ParamFileName, <span class="string">"%s"</span>, argv[<span class="number">1</span>]);  <span class="comment">//ParamFileName=argv[1]="parfile.txt"</span></span><br><span class="line">ParseParamInt(ParamFileName, Image_X_Size);</span><br><span class="line">ParseParamInt(ParamFileName, Image_Y_Size);</span><br><span class="line">ParseParamInt(ParamFileName, Image_Z_Size);</span><br><span class="line">ParseParamString(ParamFileName, AtlasFiles);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 常用的C语言小程序代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2 - Autograd：自动微分</title>
      <link href="/2018/09/29/pytorch-2/"/>
      <url>/2018/09/29/pytorch-2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文地址：<br><a href="https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html" target="_blank" rel="noopener">https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html</a></p><a id="more"></a><h1 id="Autograd-automatic-differentiation-【Autograd：自动微分】"><a href="#Autograd-automatic-differentiation-【Autograd：自动微分】" class="headerlink" title="Autograd: automatic differentiation 【Autograd：自动微分】"></a>Autograd: automatic differentiation 【Autograd：自动微分】</h1><p>在PyTorch的所有神经网络的核心是autograd包。让我们首先简要地访问它，然后我们去训练我们地第一个神经网络。</p><p>autograd包未Tensor上地所有操作提供了自动微分。它是一个自由定义地框架，这意味着你的 BP算法是由你代码地运行方式定义地，并且每次迭代都是不同的。</p><p>让我们用更简单的术语来看看这些例子。</p><h1 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h1><p>torch.Tensor 是这个包的核心类。如果你设置它的属性 .requires_grad为True，则它会开始跟踪上面的所有操作。当你完成你的计算你可以调用 .backward()并且自动计算出所有梯度。tensor的梯度将会累积到 .grad属性中。</p><p>要停止tensor的跟踪历史，你可以调用 .detach()将其域计算历史记录分离，并且防止未来的计算被跟踪。</p><p>未来防止跟踪历史记录（和使用内存），你可以使用torch.no_grad():将代码块包装起来，在评估模型时这可能会非常有用，因为模型可能具有 reguires_grad=True的训练参数，但是我们不需要梯度。</p><p>还有一个类对于autograd实现非常重要- a Function.</p><p>Tensor和Function是互相连通的，并且构建了一个非循环图，它编码了一个完整的计算历史。每个tensor都有一个 .grad_fn属性，该属性引用function已创建的Tensor(除了用户所创建的Tensor-他们的grad_fn属性是None)。</p><p>如果你想计算导数，你可以在Tensor中调用 .backward()。如果Tensor是一个标量（也就是说它包含一个元素数据），则不需要指定任何参数 backward(),但是如果它有更多的元素，你需要指定一个和tensor匹配形状的梯度参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br></pre></td></tr></table></figure><p>创建一个tensor并且设置requires_grad=true跟踪它的计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(2, 2, requires_grad=True)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1., 1.],</span><br><span class="line">        [1., 1.]], requires_grad=True)</span><br></pre></td></tr></table></figure></p><p>做一个tensor操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = x + 2</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[3., 3.],</span><br><span class="line">        [3., 3.]], grad_fn=&lt;AddBackward&gt;)</span><br></pre></td></tr></table></figure></p><p>y是作为一个操作的结果创建的，所以它有一个grad_fn。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(y.grad_fn)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;AddBackward object at 0x00000251A7EC7F60&gt;</span><br></pre></td></tr></table></figure></p><p>在y上做更多的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z = y * y * 3</span><br><span class="line">out = z.mean()</span><br><span class="line"></span><br><span class="line">print(z, out)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[27., 27.],</span><br><span class="line">        [27., 27.]], grad_fn=&lt;MulBackward&gt;) tensor(27., grad_fn=&lt;MeanBackward1&gt;)</span><br></pre></td></tr></table></figure></p><p>.requires_grad_(…)<br>改变一个现有Tensor的requiresgrad标志。<br>如果没有给出输入标志，则默认为False。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = torch.randn(2, 2)</span><br><span class="line">a = ((a * 3) / (a - 1))</span><br><span class="line">print(a.requires_grad)</span><br><span class="line">a.requires_grad_(True)</span><br><span class="line">print(a.requires_grad)</span><br><span class="line">b = (a * a).sum()</span><br><span class="line">print(b.grad_fn)</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br><span class="line">&lt;SumBackward0 object at 0x00000251A7ED09B0&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Gradients-【梯度】"><a href="#Gradients-【梯度】" class="headerlink" title="Gradients 【梯度】"></a>Gradients 【梯度】</h1><p>现在让我们后退一步，因为out包含一个标量，out.backward（）等价于out.backward（torch.tensor(1)）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.backward()</span><br></pre></td></tr></table></figure><p>输出梯度d（out）/ dx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(x.grad)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[4.5000, 4.5000],</span><br><span class="line">        [4.5000, 4.5000]])</span><br></pre></td></tr></table></figure></p><p>你应该有一个矩阵4.5. 我们称 <code>out</code>Tensor “o”.</p><script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML" async></script><p>我们有 $o = \frac{1}{4}\sum_i z_i$,<br>$z_i = 3(x_i+2)^2$ and $z_i\bigr\rvert_{x_i=1} = 27$.<br>因此,<br>$\frac{\partial o}{\partial x_i} = \frac{3}{2}(x_i+2)$, 因此<br>$\frac{\partial o}{\partial x_i}\bigr\rvert_{x_i=1} = \frac{9}{2} = 4.5$.</p><p>你可以用autograd做很多疯狂的事情！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(3, requires_grad=True)</span><br><span class="line"></span><br><span class="line">y = x * 2</span><br><span class="line">while y.data.norm() &lt; 1000:</span><br><span class="line">    y = y * 2</span><br><span class="line"></span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([-816.7130, 1152.6641,  765.0383], grad_fn=&lt;MulBackward&gt;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gradients = torch.tensor([0.1, 1.0, 0.0001], dtype=torch.float)</span><br><span class="line">y.backward(gradients)</span><br><span class="line"></span><br><span class="line">print(x.grad)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([ 102.4000, 1024.0000,    0.1024])</span><br></pre></td></tr></table></figure><p>我们可以阻止autograd跟踪历史在Tensor上使用 .requires_grad=True 使用torch.no_grad()将代码块封装起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(x.requires_grad)</span><br><span class="line">print((x ** 2).requires_grad)</span><br><span class="line"></span><br><span class="line">with torch.no_grad():</span><br><span class="line">print((x ** 2).requires_grad)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure></p><p>Read Later:</p><p>Documentation of autograd and Function is at <a href="http://pytorch.org/docs/autograd" target="_blank" rel="noopener">http://pytorch.org/docs/autograd</a></p>]]></content>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pytorch study</title>
      <link href="/2018/09/25/Pytorch-study/"/>
      <url>/2018/09/25/Pytorch-study/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本人根据官网教程翻译整理，供自己学习、查阅，后续翻译也将是以下网址;</p><p><a href="https://pytorch.org/" title="pytorch官网" target="_blank" rel="noopener">pytorch官网</a></p><p><a href="https://pytorch-cn.readthedocs.io/zh/latest/" title="翻译的教程网址" target="_blank" rel="noopener">翻译的教程网址</a><br><a id="more"></a></p><h1 id="官网翻译教程"><a href="#官网翻译教程" class="headerlink" title="官网翻译教程"></a>官网翻译教程</h1><p>1、<a href="https://huanghailiang.github.io/2018/09/25/pytorch-1/" title="tensor tutorial (tensor教程)">tensor tutorial (tensor教程)</a></p><p>2、<a href="https://huanghailiang.github.io/2018/09/29/pytorch-2//" title="Autograd: automatic differentiation">Autograd: automatic differentiation 【Autograd：自动微分】</a></p><p>3、<a href="https://huanghailiang.github.io/2018/10/28/pytorch-3/" title="NEURAL NETWORKS【神经网络】">NEURAL NETWORKS【神经网络】</a></p>]]></content>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CUDA study</title>
      <link href="/2018/09/25/CUDA-study/"/>
      <url>/2018/09/25/CUDA-study/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>CUDA学习的自我整理。</p><a id="more"></a><h1 id="自己学习的笔记"><a href="#自己学习的笔记" class="headerlink" title="自己学习的笔记"></a>自己学习的笔记</h1><p>1、<a href="https://huanghailiang.github.io/2018/06/30/1-CUDA/" title="CUDA学习笔记（一）之CUDA安装及GPU硬件介绍">CUDA学习笔记（一）之CUDA安装及GPU硬件介绍</a></p><p>2、<a href="https://huanghailiang.github.io/2018/07/02/2-CUDA-gdb/" title="CUDA学习笔记（二）之调试工具:cuda-gdb">CUDA学习笔记（二）之调试工具:cuda-gdb</a></p><p>3、<a href="https://huanghailiang.github.io/2018/07/02/3-cuda-first-program/" title="CUDA学习笔记（三）之第一个CUDA程序及计时">CUDA学习笔记（三）之第一个CUDA程序及计时</a></p>]]></content>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排序算法总结</title>
      <link href="/2018/09/25/%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2018/09/25/%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML" async></script><h1 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h1><p>参考：<br><a href="https://blog.csdn.net/c406495762/article/details/78979946" target="_blank" rel="noopener">https://blog.csdn.net/c406495762/article/details/78979946</a></p><a id="more"></a><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>根据网上博客还有百度百科等总结了一下8中排序方法（并且使用C语言进行了实现）：</p><ul><li>1、<a href="https://huanghailiang.github.io/2018/04/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/">冒泡排序</a></li><li>2、<a href="https://huanghailiang.github.io/2018/04/06/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/">直接插入排序</a></li><li>3、<a href="https://huanghailiang.github.io/2018/04/06/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/">希尔排序</a></li><li>4、<a href="https://huanghailiang.github.io/2018/04/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">快速排序</a></li><li>5、<a href="https://huanghailiang.github.io/2018/04/06/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/">简单选择排序</a></li><li>6、<a href="https://huanghailiang.github.io/2018/04/06/%E5%A0%86%E6%8E%92%E5%BA%8F/">堆排序</a></li><li>7、<a href="https://huanghailiang.github.io/2018/04/06/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/">归并排序</a></li><li>8、<a href="https://huanghailiang.github.io/2018/04/06/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/">基数排序</a></li></ul><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><img src="/images/排序算法总结.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1 - tensor_tutorial (tensor教程)</title>
      <link href="/2018/09/25/pytorch-1/"/>
      <url>/2018/09/25/pytorch-1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文地址：<br><a href="https://pytorch.org/tutorials/beginner/blitz/tensor_tutorial.html" target="_blank" rel="noopener">https://pytorch.org/tutorials/beginner/blitz/tensor_tutorial.html</a></p><h1 id="What-is-PyTorch"><a href="#What-is-PyTorch" class="headerlink" title="What is PyTorch"></a>What is PyTorch</h1><p>这是一个基于Python的科学计算包，目标是两组优势：</p><ul><li>NumPy的替代品，可以使用GPU的强大功能</li><li>深入学习研究平台，提供最大的灵活性和速度<a id="more"></a><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1></li></ul><p>Tensor</p><p>Tensor与NumPy的多维数组相似，添加的是Tensor也可以用于GPU加速计算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line">import torch</span><br></pre></td></tr></table></figure><p>构建一个未初始化的5*3的矩阵：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.empty(5, 3)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0.0000, 0.0000, 0.0000],</span><br><span class="line">        [0.0000, 0.0000, 0.0000],</span><br><span class="line">        [0.0000, 0.0000, 0.0000],</span><br><span class="line">        [0.0000, 0.0000, 0.0000],</span><br><span class="line">        [0.0000, 0.0000, 0.0000]])</span><br></pre></td></tr></table></figure></p><p>创建一个随机初始化矩阵</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(5, 3)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0.2799, 0.2665, 0.5734],</span><br><span class="line">        [0.7835, 0.6617, 0.8958],</span><br><span class="line">        [0.9766, 0.6714, 0.2334],</span><br><span class="line">        [0.6510, 0.0141, 0.6451],</span><br><span class="line">        [0.6124, 0.3446, 0.6923]])</span><br></pre></td></tr></table></figure></p><p>创建一个全零矩阵并且类型为long:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.zeros(5, 3, dtype=torch.long)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0, 0, 0],</span><br><span class="line">        [0, 0, 0],</span><br><span class="line">        [0, 0, 0],</span><br><span class="line">        [0, 0, 0],</span><br><span class="line">        [0, 0, 0]])</span><br></pre></td></tr></table></figure></p><p>根据数据直接创建一个tensor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([5.5, 3])</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([5.5000, 3.0000])</span><br></pre></td></tr></table></figure></p><p>或者根据现有tensor创建一个tensor。<br>这些方法将重用输入tensor的属性，如dtype，除非用户提供新的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = x.new_ones(5, 3, dtype=torch.double)      # new_* methods 获得大小</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = torch.randn_like(x, dtype=torch.float)    # 重新赋予类型</span><br><span class="line">print(x)                                      # 结果拥有相同的大小</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1., 1., 1.],</span><br><span class="line">        [1., 1., 1.],</span><br><span class="line">        [1., 1., 1.],</span><br><span class="line">        [1., 1., 1.],</span><br><span class="line">        [1., 1., 1.]], dtype=torch.float64)</span><br><span class="line">tensor([[ 0.3567, -1.2192, -1.5638],</span><br><span class="line">        [-0.9681,  0.5553,  0.1525],</span><br><span class="line">        [ 0.6320, -0.5874,  0.6034],</span><br><span class="line">        [-0.5114, -0.6262, -0.0601],</span><br><span class="line">        [-0.0572,  0.9120,  0.9557]])</span><br></pre></td></tr></table></figure></p><p>获取它的大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(x.size())</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.Size([5, 3])</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：</p><p>“torch.Size”实际上是一个元组，所以它支持所有的元组操作。</p><p>有多个语法操作。在下面的例子中，我们将看一看加法操作。</p></blockquote><ul><li>语法1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = torch.rand(5, 3)</span><br><span class="line">print(x + y)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[ 0.5408, -0.8138, -1.3310],</span><br><span class="line">        [-0.0024,  0.6934,  0.3962],</span><br><span class="line">        [ 1.2138, -0.5800,  1.2939],</span><br><span class="line">        [ 0.1962, -0.5142,  0.7489],</span><br><span class="line">        [ 0.6374,  1.1835,  1.3452]])</span><br></pre></td></tr></table></figure></p><ul><li>语法2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(torch.add(x, y))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[ 0.5408, -0.8138, -1.3310],</span><br><span class="line">        [-0.0024,  0.6934,  0.3962],</span><br><span class="line">        [ 1.2138, -0.5800,  1.2939],</span><br><span class="line">        [ 0.1962, -0.5142,  0.7489],</span><br><span class="line">        [ 0.6374,  1.1835,  1.3452]])</span><br></pre></td></tr></table></figure><ul><li>作为参数提供一个输出tensor</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = torch.empty(5, 3)</span><br><span class="line">torch.add(x, y, out=result)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[ 0.5408, -0.8138, -1.3310],</span><br><span class="line">        [-0.0024,  0.6934,  0.3962],</span><br><span class="line">        [ 1.2138, -0.5800,  1.2939],</span><br><span class="line">        [ 0.1962, -0.5142,  0.7489],</span><br><span class="line">        [ 0.6374,  1.1835,  1.3452]])</span><br></pre></td></tr></table></figure></p><ul><li>在原位置上操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># adds x to y</span><br><span class="line">y.add_(x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[ 0.5408, -0.8138, -1.3310],</span><br><span class="line">        [-0.0024,  0.6934,  0.3962],</span><br><span class="line">        [ 1.2138, -0.5800,  1.2939],</span><br><span class="line">        [ 0.1962, -0.5142,  0.7489],</span><br><span class="line">        [ 0.6374,  1.1835,  1.3452]])</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：</p><p>任何对一个tensor进行变异的操作都是用<code>_</code>。<br>例如:“x.copy_(y)’ ‘,’ ‘ x.t_()’ ‘,将改变“x”。</p><p>You can use standard NumPy-like indexing with all bells and whistles!</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(x[:, 1])</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([-1.2192,  0.5553, -0.5874, -0.6262,  0.9120])</span><br></pre></td></tr></table></figure></p><p>调整大小：如果你想要调整/重塑张量，你可以使用 torch.view:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(4, 4)</span><br><span class="line">y = x.view(16)</span><br><span class="line">z = x.view(-1, 8)  # the size -1 is inferred from other dimensions</span><br><span class="line">print(x.size(), y.size(), z.size())</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.Size([4, 4]) torch.Size([16]) torch.Size([2, 8])</span><br></pre></td></tr></table></figure></p><p>如果你有一个元素tensor，使用.item（）来获得作为Python的数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(1)</span><br><span class="line">print(x)</span><br><span class="line">print(x.item())</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([0.6536])</span><br><span class="line">0.653590977191925</span><br></pre></td></tr></table></figure></p><p>Read later:</p><p>100+ Tensor operations, including transposing, indexing, slicing, mathematical operations, linear algebra, random numbers, etc., are described  here <a href="http://pytorch.org/docs/torch" target="_blank" rel="noopener">http://pytorch.org/docs/torch</a>_.</p><h1 id="NumPy-Bridge"><a href="#NumPy-Bridge" class="headerlink" title="NumPy Bridge"></a>NumPy Bridge</h1><p>将一个Torch Tensor转换成一个NumPy数组，反之亦然。</p><p>Torch Tensor和NumPy数组将共享它们的底层内存位置，而改变一个则会改变另一个。</p><p>将一个Torch Tensor转换为Numpy数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(5)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([1., 1., 1., 1., 1.])</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = a.numpy()</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1. 1. 1. 1. 1.]</span><br></pre></td></tr></table></figure></p><p>看看numpy数组是如何在值中改变的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.add_(1)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([2., 2., 2., 2., 2.])</span><br><span class="line">[2. 2. 2. 2. 2.]</span><br></pre></td></tr></table></figure></p><p>将一个Numpy数组转换为Torch Tensor,看看如何改变np数组自动改变了Torch Tensor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.ones(5)</span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line">np.add(a, 1, out=a)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2. 2. 2. 2. 2.]</span><br><span class="line">tensor([2., 2., 2., 2., 2.], dtype=torch.float64)</span><br></pre></td></tr></table></figure></p><p>CPU上所有的Tensors，除了CharTensor 都支持跟NumPy之间的相互转换。</p><h1 id="CUDA-Tensors"><a href="#CUDA-Tensors" class="headerlink" title="CUDA Tensors"></a>CUDA Tensors</h1><p>Tensor可以使用.to方法移动到任何设备上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># let us run this cell only if CUDA is available</span><br><span class="line"># We will use ``torch.device`` objects to move tensors in and out of GPU</span><br><span class="line">if torch.cuda.is_available():</span><br><span class="line">    device = torch.device(&quot;cuda&quot;)          # a CUDA device object</span><br><span class="line">    y = torch.ones_like(x, device=device)  # directly create a tensor on GPU</span><br><span class="line">    x = x.to(device)                       # or just use strings ``.to(&quot;cuda&quot;)``</span><br><span class="line">    z = x + y</span><br><span class="line">    print(z)</span><br><span class="line">    print(z.to(&quot;cpu&quot;, torch.double))       # ``.to`` can also change dtype together!</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([1.6536], device=&apos;cuda:0&apos;)</span><br><span class="line">tensor([1.6536], dtype=torch.float64)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CUDA学习笔记（三）之第一个CUDA程序及计时</title>
      <link href="/2018/07/02/3-cuda-first-program/"/>
      <url>/2018/07/02/3-cuda-first-program/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一个CUDA程序"><a href="#第一个CUDA程序" class="headerlink" title="第一个CUDA程序"></a>第一个CUDA程序</h1><p>我们将使用矢量求和的简单运算来学习一下CUDA的简单编程。<br><a id="more"></a></p><h2 id="矢量求和运算"><a href="#矢量求和运算" class="headerlink" title="矢量求和运算"></a>矢量求和运算</h2><p>假设我们有两组数据，我们需要将这两组数据中对应的元素两两相加，并将结果保存在第三个数组中。</p><h3 id="基于CPU的矢量求和"><a href="#基于CPU的矢量求和" class="headerlink" title="基于CPU的矢量求和"></a>基于<strong>CPU</strong>的矢量求和</h3><p>CPU中矢量求和的函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_CPU</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i] = a[i] + b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是CPU中的一个矢量求和的函数，采用了for循环来依次执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c[0]=a[0]+b[0];</span><br><span class="line">c[1]=a[1]+b[1];</span><br><span class="line">...</span><br><span class="line">c[N-1]=a[N-1]+b[N-1];</span><br></pre></td></tr></table></figure></p><p>我们可以发现每次循环的操作，只是内存地址不一样，但是指令都是一样的，所以可以看作他们每次循环都是一个独立的运算，那么我们将其并行起来是不是更好呢？假设我们有两个CPU计算核心，那么我们希望两个核心同时开始进行计算，那么我们的循环次数也将减半，运行时间将会变少。</p><p>对于上诉的问题，在CPU编程中我们也有并行编程的库可以来运行，比如Openmp这个并行工具就可以很好的实现这种操作，不过这将限制与我们计算机的CPU核心数目，我们也知道CPU的核心数目目前是非常有限的，所以对于大程序我们也是无能为力的，这个时候GPU的优势就体现出来了，对于上面每个循环互相独立，操作相同的计算，我们可以在GPU中开出足够多的线程来进行操作，这将大大降低计算时间。</p><h3 id="基于GPU的矢量求和"><a href="#基于GPU的矢量求和" class="headerlink" title="基于GPU的矢量求和"></a>基于<strong>GPU</strong>的矢量求和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__global__ void add(int *a, int *b, int *c)</span><br><span class="line">&#123;</span><br><span class="line">int tid = blockIdx.x*blockDim.x+threadIdx.x;//计算该索引处的数据</span><br><span class="line">if (tid &lt; N)</span><br><span class="line">&#123;</span><br><span class="line">c[tid] = a[tid] + b[tid];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是GPU中的一个矢量求和函数。</p><p>其中<strong>global</strong>是一个函数声明，说明这个函数是一个全局的函数，在设备上执行的。因为GPU是通过开启大量的线程来并行操作的，所以我们需要计算每个线程的编号，及就是上面程序中的tid.然后我们每个线程在根据这个线程好去读取每个线程需要用到的内存，再去完成计算。该程序的tid计算可以在下面完整的代码看出来因为我们可能不只开了一个块所以我们需要将块也考虑进来。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">矢量求和运算</span><br><span class="line">a[i]+b[i]=c[i];</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//CUDA的头文件</span><br><span class="line">#include &quot;cuda_runtime.h&quot;</span><br><span class="line">#include &quot;device_launch_parameters.h&quot;</span><br><span class="line">//C语言的头文件</span><br><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line">#include &quot;time.h&quot;</span><br><span class="line"></span><br><span class="line">//宏定义 N为数组的长度 thread_num表示每个块中的线程数</span><br><span class="line">#define N 60000</span><br><span class="line">#define thread_num  1024</span><br><span class="line"></span><br><span class="line">//GPU函数申明</span><br><span class="line">__global__ void add(int *a, int *b, int *c);</span><br><span class="line"></span><br><span class="line">//CPU函数申明</span><br><span class="line">void add_CPU(int *a, int *b, int *c);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //GPU方法计时申明</span><br><span class="line">float time_CPU, time_GPU;</span><br><span class="line">cudaEvent_t start_GPU, stop_GPU, start_CPU, stop_CPU;</span><br><span class="line">    //CPU方法计时申明</span><br><span class="line">float time_cpu, time_gpu;</span><br><span class="line">clock_t start_cpu, stop_cpu, start_gpu, stop_gpu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int a[N], b[N], c[N],c_CPU[N];</span><br><span class="line">int *dev_a, *dev_b, *dev_c;</span><br><span class="line">//知道了每个块中所开的线程数量，那么我们就要知道我们需要开启多少个块</span><br><span class="line">int block_num;</span><br><span class="line"></span><br><span class="line">    //线程块中的数量需要向上取整，下面两个操作有可以/*********/</span><br><span class="line">//block_num = (N % thread_num == 0) ? (N / thread_num) : (N / thread_num + 1);</span><br><span class="line">block_num = (N + thread_num - 1) / thread_num;</span><br><span class="line"></span><br><span class="line">//在GPU上分配内存</span><br><span class="line">cudaMalloc((void**)&amp;dev_a, N*sizeof(int));</span><br><span class="line">cudaMalloc((void**)&amp;dev_b, N*sizeof(int));</span><br><span class="line">cudaMalloc((void**)&amp;dev_c, N*sizeof(int));</span><br><span class="line"></span><br><span class="line">//在CPU上为a和b进行赋值操作</span><br><span class="line">for (int i = 0; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = -i;</span><br><span class="line">b[i] = i*i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建Event</span><br><span class="line">cudaEventCreate(&amp;start_CPU);</span><br><span class="line">cudaEventCreate(&amp;stop_CPU);</span><br><span class="line">//记录当前时间</span><br><span class="line">cudaEventRecord(start_CPU, 0);</span><br><span class="line">start_cpu = clock();</span><br><span class="line">//CPU计算/*******************************************************/</span><br><span class="line">add_CPU(a, b, c_CPU);</span><br><span class="line">stop_cpu = clock();</span><br><span class="line">//记录当前时间</span><br><span class="line">cudaEventRecord(stop_CPU, 0);</span><br><span class="line">cudaEventSynchronize(start_CPU);    //等待事件完成。</span><br><span class="line">cudaEventSynchronize(stop_CPU);    //等待事件完成。记录之前的任务</span><br><span class="line">cudaEventElapsedTime(&amp;time_CPU, start_CPU, stop_CPU);    //计算时间差</span><br><span class="line">printf(&quot;The time for CPU:\t%f(ms)\n&quot;, time_CPU);</span><br><span class="line"></span><br><span class="line">cudaEventDestroy(start_CPU);    //消除Event</span><br><span class="line">cudaEventDestroy(stop_CPU);</span><br><span class="line"></span><br><span class="line">//输出CPU结果</span><br><span class="line">printf(&quot;\nResult from CPU:\n&quot;); </span><br><span class="line">for (int i = 0; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;CPU:\t%d+%d=%d\n&quot;,a[i],b[i],c_CPU[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//GPU计算/*******************************************************/</span><br><span class="line">//内存拷贝CPU-TO-GPU</span><br><span class="line">cudaMemcpy(dev_a, a, N*sizeof(int), cudaMemcpyHostToDevice);</span><br><span class="line">cudaMemcpy(dev_b, b, N*sizeof(int), cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">//创建Event</span><br><span class="line">cudaEventCreate(&amp;start_GPU);</span><br><span class="line">cudaEventCreate(&amp;stop_GPU);</span><br><span class="line">//记录当前时间</span><br><span class="line">cudaEventRecord(start_GPU, 0);</span><br><span class="line"></span><br><span class="line">start_gpu = clock();</span><br><span class="line">//调用cuda的核函数</span><br><span class="line">//printf(&quot;block_num=%d\tthread_num=%d\n&quot;, block_num, thread_num);</span><br><span class="line">add &lt;&lt; &lt;block_num, thread_num &gt;&gt; &gt;(dev_a, dev_b, dev_c);</span><br><span class="line"></span><br><span class="line">stop_gpu = clock();</span><br><span class="line"></span><br><span class="line">//记录当前时间</span><br><span class="line">cudaEventRecord(stop_GPU, 0);</span><br><span class="line">cudaEventSynchronize(start_GPU);    //等待事件完成。</span><br><span class="line">cudaEventSynchronize(stop_GPU);    //等待事件完成。记录之前的任务</span><br><span class="line">cudaEventElapsedTime(&amp;time_GPU, start_GPU, stop_GPU);    //计算时间差</span><br><span class="line">printf(&quot;\nThe time for GPU:\t%f(ms)\n&quot;, time_GPU);</span><br><span class="line"></span><br><span class="line">//将GPU中的结果拷贝出来</span><br><span class="line">cudaMemcpy(c, dev_c, N*sizeof(int), cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">//输出GPU结果</span><br><span class="line">printf(&quot;\nResult from GPU:\n&quot;);</span><br><span class="line">for (int i = 0; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;GPU:\t%d+%d=%d\n&quot;,a[i],b[i],c[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cudaEventDestroy(start_GPU);    //消除Event</span><br><span class="line">cudaEventDestroy(stop_GPU);</span><br><span class="line"></span><br><span class="line">//释放GPU上的内存</span><br><span class="line">cudaFree(dev_a);</span><br><span class="line">cudaFree(dev_b);</span><br><span class="line">cudaFree(dev_c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf(&quot;\nThe time for CPU by event:\t%f(ms)\n&quot;, time_CPU);</span><br><span class="line">printf(&quot;The time for GPU by event:\t%f(ms)\n&quot;, time_GPU);</span><br><span class="line"></span><br><span class="line">time_cpu = (float)(stop_cpu - start_cpu) / CLOCKS_PER_SEC;</span><br><span class="line">time_gpu = (float)(stop_gpu - start_gpu) / CLOCKS_PER_SEC;</span><br><span class="line">printf(&quot;\nThe time for CPU by host:\t%f(ms)\n&quot;, time_cpu);</span><br><span class="line">printf(&quot;The time for GPU by host:\t%f(ms)\n&quot;, time_gpu);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//GPU函数</span><br><span class="line">__global__ void add(int *a, int *b, int *c)</span><br><span class="line">&#123;</span><br><span class="line">int tid = blockIdx.x*blockDim.x+threadIdx.x;//计算该索引处的数据</span><br><span class="line">if (tid &lt; N)</span><br><span class="line">&#123;</span><br><span class="line">c[tid] = a[tid] + b[tid];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//CPU函数</span><br><span class="line">void add_CPU(int *a, int *b, int *c)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i] = a[i] + b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码的注解"><a href="#完整代码的注解" class="headerlink" title="完整代码的注解"></a>完整代码的注解</h2><p>该代码中我使用了两种计时方式使用主机计时和使用时GPU计时。</p><h4 id="使用主机计时"><a href="#使用主机计时" class="headerlink" title="使用主机计时"></a><strong>使用主机计时</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> “time.h”</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> time;</span><br><span class="line"><span class="keyword">clock_t</span> start, stop;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    start=clock();</span><br><span class="line">    </span><br><span class="line">    ...<span class="comment">//需要计时的那一部分</span></span><br><span class="line">    </span><br><span class="line">    stop=clock();</span><br><span class="line">    time=(<span class="keyword">float</span>)(stop-start)/CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The time by host:\t%f(ms)\n"</span>, time);</span><br></pre></td></tr></table></figure><h4 id="使用GPU计时"><a href="#使用GPU计时" class="headerlink" title="使用GPU计时"></a><strong>使用GPU计时</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> time;</span><br><span class="line">cudaEvent_t start, stop;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Event</span></span><br><span class="line">cudaEventCreate(&amp;start);</span><br><span class="line">cudaEventCreate(&amp;stop);</span><br><span class="line"><span class="comment">//记录当前时间</span></span><br><span class="line">cudaEventRecord(start, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">...<span class="comment">//需要计时的那一部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//记录当前时间</span></span><br><span class="line">cudaEventRecord(stop, <span class="number">0</span>);</span><br><span class="line">cudaEventSynchronize(start);    <span class="comment">//等待事件完成。</span></span><br><span class="line">cudaEventSynchronize(stop);    <span class="comment">//等待事件完成。记录之前的任务</span></span><br><span class="line">cudaEventElapsedTime(&amp;time, start, stop);    <span class="comment">//计算时间差</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The time by event:\t%f(ms)\n"</span>, time);</span><br><span class="line">cudaEventDestroy(start);    <span class="comment">//消除Event</span></span><br><span class="line">cudaEventDestroy(stop);</span><br></pre></td></tr></table></figure><h1 id="CUDA程序编写流程"><a href="#CUDA程序编写流程" class="headerlink" title="CUDA程序编写流程"></a>CUDA程序编写流程</h1><p>通过上面一个简单的小程序，我们应该也可以体会到一个基本的CUDA程序编写的一个流程：</p><ul><li>1、从CPU拷贝内存到GPU中；</li><li>2、调用GPU核函数进行并行计算；</li><li>3、从GPU拷贝计算结果的内存到CPU中。</li></ul><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><ul><li>在2步调用GPU核函数的时候我们需要，分配一下我们需要多少个线程块参与计算，并且每个线程块中需要有多少个线程。这些跟硬件有一定的关系，同时一个好的线程规划可能会优化你的程序，这部分因为我也是小白，所以暂时也没有什么特别多的经验，按照之前的经验，只觉得每个线程块开的线程数应该是16或者32的倍数，这个应该跟warp中包含32个线程（目前我用的GPU是这样的）有关。目前大部分的GPU已经支持每个线程块有1024个线程，当然以前比较老的GPU有些只支持到512，所以这些我们需要自己注意一下。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CUDA学习笔记（二）之调试工具:cuda-gdb</title>
      <link href="/2018/07/02/2-CUDA-gdb/"/>
      <url>/2018/07/02/2-CUDA-gdb/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Linux下命令行操作"><a href="#一、Linux下命令行操作" class="headerlink" title="一、Linux下命令行操作"></a>一、Linux下命令行操作</h1><h2 id="使用cuda-gdb对CUDA程序进行编译"><a href="#使用cuda-gdb对CUDA程序进行编译" class="headerlink" title="使用cuda-gdb对CUDA程序进行编译"></a>使用cuda-gdb对CUDA程序进行编译</h2><a id="more"></a><h2 id="1、编译程序"><a href="#1、编译程序" class="headerlink" title="1、编译程序"></a>1、编译程序</h2><p>编译程序的时候我们使用nvcc编译器，将其编译成可调式版本；-g 表示将CPU代码(host)编译成可调式版本，-G表示将GPU代码(kernel)编译成可调式版本。</p><p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -g -G XXX.cu -o XXX</span><br></pre></td></tr></table></figure></p><h2 id="2、进入调试器"><a href="#2、进入调试器" class="headerlink" title="2、进入调试器"></a>2、进入调试器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cuda-gdb</span><br></pre></td></tr></table></figure><p>进入调试器后可以使用3中的指令进行执行可执行文件，然后进行调试，也可以在cuda-gdb指令后面直接加上需要调试的可执行文件进行调试。</p><h2 id="3、调试的基本指令"><a href="#3、调试的基本指令" class="headerlink" title="3、调试的基本指令"></a>3、调试的基本指令</h2><div class="table-container"><table><thead><tr><th>指令</th><th>简写</th><th>指令说明</th><th>举例</th></tr></thead><tbody><tr><td>file exe_name</td><td></td><td>置顶可调试的可执行文件</td><td>file program</td></tr><tr><td>set args arg1 arg2 …</td><td></td><td>设置命令行参数</td><td>set args 1 2</td></tr><tr><td>breakpoint</td><td>b</td><td>设置断点，使代码在指定位置暂停执行。其参数可以是方法名，也可以是行号</td><td>b main; b 数字</td></tr><tr><td>run</td><td>r</td><td>在调试器中执行程序</td><td></td></tr><tr><td>start</td><td></td><td>开始执行程序，并在main的第一行停住</td><td></td></tr><tr><td>next</td><td>n</td><td>单步执行到下一行</td><td></td></tr><tr><td>continue</td><td>c</td><td>继续执行已暂停的程序至下一个断点或程序结尾处</td><td></td></tr><tr><td>step</td><td>s</td><td>单步执行，会进入函数内部执行</td><td></td></tr><tr><td>continue</td><td>c</td><td>执行已暂停程序到下一断点或结尾处</td><td></td></tr><tr><td>print</td><td>p</td><td>打印参数信息,查看变量</td><td>p var1</td></tr><tr><td>thread</td><td></td><td>列出当前主机线程</td><td></td></tr><tr><td>cuda</td><td></td><td>列出当前活跃的kernel/grid/block/thread内容，并允许将焦点移至此处</td><td>cuda thread(1, 1, 1); cuda kernel 1 block(1, 2, 1)</td></tr><tr><td>cuda thread</td><td></td><td>列出当前活跃的GPU线程（若有的话）</td><td></td></tr><tr><td>cuda kernel</td><td></td><td>列出当前活跃的GPU Kernel，并允许将“焦点”转移到指定的GPU线程</td><td></td></tr><tr><td>info</td><td></td><td>查看参数所包含的具体信息</td><td>info devices; info kernels; info threads</td></tr><tr><td>backtrace</td><td>bt</td><td>显示当前函数调用栈的内容</td><td></td></tr><tr><td>quit</td><td>q</td><td>退出cuda-gdb</td><td></td></tr></tbody></table></div><h1 id="二、Linux下使用图形界面"><a href="#二、Linux下使用图形界面" class="headerlink" title="二、Linux下使用图形界面"></a>二、Linux下使用图形界面</h1><p>当我们装好了CUDA的时候，其实在图形界面下已经装好了一个叫“nsight”的编译器，我们可以直接用终端打开这个编译器，然后写好程序直接编译然后debug就可以了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/sinat_28750977/article/details/69062708" target="_blank" rel="noopener">https://blog.csdn.net/sinat_28750977/article/details/69062708</a><br><a href="http://book.51cto.com/art/201301/376309.htm" target="_blank" rel="noopener">http://book.51cto.com/art/201301/376309.htm</a></p>]]></content>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CUDA学习笔记（一）之CUDA安装及GPU硬件介绍</title>
      <link href="/2018/06/30/1-CUDA/"/>
      <url>/2018/06/30/1-CUDA/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、CUDA安装与环境配置"><a href="#一、CUDA安装与环境配置" class="headerlink" title="一、CUDA安装与环境配置"></a>一、CUDA安装与环境配置</h1><a id="more"></a><h2 id="Linux环境下的CUDA的安装"><a href="#Linux环境下的CUDA的安装" class="headerlink" title="Linux环境下的CUDA的安装"></a>Linux环境下的CUDA的安装</h2><p>因为之前的博客中有涉及到这一部分所以这里就不在详述。<a href="https://huanghailiang.github.io/2017/07/22/ubuntu16-04-Server-install-CUDA/">ubuntu16.04 Server install CUDA</a></p><p>不过我们在linux下使用GPU编程的时候有时候会遇到nvidia驱动挂掉的情况，这个时候我们需要修复它，在之前的博客中我们使用dkms来进行管理的方法。<a href="https://huanghailiang.github.io/2018/01/16/nvidia%E9%A9%B1%E5%8A%A8%E6%8C%82%E6%8E%89/">nvidia驱动挂掉</a></p><p>在linux下面我们经常会使用nvidia-smi指令对GPU的使用情况进行监测，但是有时候GPU监测时会不准确或者有时候程序退出了但是现存还被占用着，这种情况之前的博客也有解决方法。<a href="https://huanghailiang.github.io/2017/10/19/GPU%E7%9B%91%E6%B5%8B%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">GPU监测时问题解决</a></p><h2 id="Windows环境下的CUDA安装"><a href="#Windows环境下的CUDA安装" class="headerlink" title="Windows环境下的CUDA安装"></a>Windows环境下的CUDA安装</h2><p>Windows环境下的安装，我们需要先安装Visual Studio编译器用于后面的编程使用，然后去nvidia的官网查找适用与该版本的Visual Studio的CUDA版本，剩下就比较简单了，直接开始安装，安装软件会自动帮你配置好环境变量等，安装好就可以直接使用了。可以去安装的VS中直接建立CUDA的工程进行编程使用了。</p><h1 id="二、GPU硬件"><a href="#二、GPU硬件" class="headerlink" title="二、GPU硬件"></a>二、GPU硬件</h1><p>掌握部门的硬件知识，可以有助于我们更好的编写CUDA程序，可以更好的优化CUDA程序的性能。</p><p>首先我们需要先知道一些基本的一些专业名词：</p><div class="table-container"><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Stream Processor（SP）</td><td>流处理器</td></tr><tr><td>Stream MultiProcessor（SM）</td><td>流处理器组</td></tr><tr><td>Thread</td><td>线程</td></tr><tr><td>Block</td><td>线程块</td></tr><tr><td>Grid</td><td>线程网格</td></tr><tr><td>Warp</td><td>线程束</td></tr><tr><td>shared memory</td><td>共享内存</td></tr><tr><td>kernel function</td><td>核函数</td></tr></tbody></table></div><p>SP（Stream Processor）和SM（Stream MultiProcessor）是硬件层面的，Thread、Block、grid和warp是软件层面上的。</p><blockquote><p><strong><em>SP（streaming processor）：</em></strong>最基本的处理单元，也称为CUDA core。最后具体的指令和任务都是在SP上处理的。GPU进行并行计算，也就是很多个SP同时做处理。</p><p><strong><em>SM（Stream MultiProcessor）：</em></strong>多个SP加上其他的一些资源组成一个SM。也叫GPU大核，其他资源如：warp scheduler，register，shared memory等。SM可以看做GPU的心脏（对比CPU核心），register和shared memory是SM的稀缺资源。CUDA将这些资源分配给所有驻留在SM中的threads。因此，这些有限的资源就使每个SM中active warps有非常严格的限制，也就限制了并行能力。</p><p><strong><em>thread：</em></strong>一个CUDA的并行程序会被以许多个threads来执行。</p><p><strong><em>block：</em></strong>数个threads会被群组成一个block，同一个block中的threads可以同步，也可以通过shared memory通信。</p><p><strong><em>grid：</em></strong>多个blocks则会再构成grid。</p><p><strong><em>warp：</em></strong>GPU执行程序时的调度单位，目前cuda的warp的大小为32，同在一个warp的线程，以不同数据资源执行相同的指令,这就是所谓 SIMT。</p></blockquote><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>对于硬件结构的图网上有很多，还有CUDA的指导手册中也有很多，这里为了简单就先不列出来了，如果未来有时间有兴趣，将会进一步进行优化。也可以去参看后面第四部分中的参考中的网址进行参考。</p><h1 id="三、使用代码获取GPU的参数信息"><a href="#三、使用代码获取GPU的参数信息" class="headerlink" title="三、使用代码获取GPU的参数信息"></a>三、使用代码获取GPU的参数信息</h1><p>因为我们对于不用的GPU型号，其构架等信息都不一样，如果我们要想优化一个更好的CUDA程序，我们就需要更好的了解我们的硬件信息，然后根据其进行一些优化处理。对于GPU硬件参数的获取，当然我们可以根据GPU提供的手册进行查找，我们也可以使用程序进行查找。</p><p>我们可以使用cudaGetDeviceCount()函数来查看当前计算机中拥有多少个GPU设备，然后可以对每个设备进行迭代，并查询各个设备的相关信息。CUDA运行的时将返回一个cudaDeviceProp类型结构，其中包含了设备的相关属性。</p><p><strong>在cudaDeviceProp结构中包含以下信息(本人的CUDA版本是8.0)：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">device_builtin__</span> <span class="title">cudaDeviceProp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span>   name[<span class="number">256</span>];                  <span class="comment">/**&lt; ASCII string identifying device ASCII字符串识别设备*/</span></span><br><span class="line">    <span class="keyword">size_t</span> totalGlobalMem;             <span class="comment">/**&lt; Global memory available on device in bytes 设备上可用的全局内存(以字节为单位)*/</span></span><br><span class="line">    <span class="keyword">size_t</span> sharedMemPerBlock;          <span class="comment">/**&lt; Shared memory available per block in bytes 以字节为单位的每个块可用的共享内存*/</span></span><br><span class="line">    <span class="keyword">int</span>    regsPerBlock;               <span class="comment">/**&lt; 32-bit registers available per block 每个块可用的32位寄存器*/</span></span><br><span class="line">    <span class="keyword">int</span>    warpSize;                   <span class="comment">/**&lt; Warp size in threads 线程束的大小*/</span></span><br><span class="line">    <span class="keyword">size_t</span> memPitch;                   <span class="comment">/**&lt; Maximum pitch in bytes allowed by memory copies 内存拷贝允许的最大字节间距*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxThreadsPerBlock;         <span class="comment">/**&lt; Maximum number of threads per block 每个块的最大线程数*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxThreadsDim[<span class="number">3</span>];           <span class="comment">/**&lt; Maximum size of each dimension of a block 块的每个维度的最大大小*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxGridSize[<span class="number">3</span>];             <span class="comment">/**&lt; Maximum size of each dimension of a grid 网格的每个维度的最大大小*/</span></span><br><span class="line">    <span class="keyword">int</span>    clockRate;                  <span class="comment">/**&lt; Clock frequency in kilohertz 时钟频率（赫兹）*/</span></span><br><span class="line">    <span class="keyword">size_t</span> totalConstMem;              <span class="comment">/**&lt; Constant memory available on device in bytes 设备上可用的常量内存(以字节为单位)*/</span></span><br><span class="line">    <span class="keyword">int</span>    major;                      <span class="comment">/**&lt; Major compute capability 主要的计算能力*/</span></span><br><span class="line">    <span class="keyword">int</span>    minor;                      <span class="comment">/**&lt; Minor compute capability 次要的计算能力*/</span></span><br><span class="line">    <span class="keyword">size_t</span> textureAlignment;           <span class="comment">/**&lt; Alignment requirement for textures 纹理对齐要求*/</span></span><br><span class="line">    <span class="keyword">size_t</span> texturePitchAlignment;      <span class="comment">/**&lt; Pitch alignment requirement for texture references bound to pitched memory 对纹理引用的调距要求绑定到倾斜内存。*/</span></span><br><span class="line">    <span class="keyword">int</span>    deviceOverlap;              <span class="comment">/**&lt; Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount. 设备可以同时复制内存并执行内核。弃用。使用相反asyncEngineCount。*/</span></span><br><span class="line">    <span class="keyword">int</span>    multiProcessorCount;        <span class="comment">/**&lt; Number of multiprocessors on device 设备上多处理器的数量*/</span></span><br><span class="line">    <span class="keyword">int</span>    kernelExecTimeoutEnabled;   <span class="comment">/**&lt; Specified whether there is a run time limit on kernels 指定内核是否有运行时限制。*/</span></span><br><span class="line">    <span class="keyword">int</span>    integrated;                 <span class="comment">/**&lt; Device is integrated as opposed to discrete 设备是集成的，而不是离散的*/</span></span><br><span class="line">    <span class="keyword">int</span>    canMapHostMemory;           <span class="comment">/**&lt; Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer 设备可以使用cudaHostAlloc/cudaHostGetDevicePointer映射主机内存*/</span></span><br><span class="line">    <span class="keyword">int</span>    computeMode;                <span class="comment">/**&lt; Compute mode (See ::cudaComputeMode) 计算模式*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture1D;               <span class="comment">/**&lt; Maximum 1D texture size 最大1 d纹理大小*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture1DMipmap;         <span class="comment">/**&lt; Maximum 1D mipmapped texture size 最大1D的纹理错误处理*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture1DLinear;         <span class="comment">/**&lt; Maximum size for 1D textures bound to linear memory 绑定到线性内存的一维纹理的最大大小*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture2D[<span class="number">2</span>];            <span class="comment">/**&lt; Maximum 2D texture dimensions 最大的2 d纹理维度*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture2DMipmap[<span class="number">2</span>];      <span class="comment">/**&lt; Maximum 2D mipmapped texture dimensions 最大二维的纹理尺寸*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture2DLinear[<span class="number">3</span>];      <span class="comment">/**&lt; Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory 最大尺寸(宽度，高度，pitch)的二维纹理绑定到pitch内存*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture2DGather[<span class="number">2</span>];      <span class="comment">/**&lt; Maximum 2D texture dimensions if texture gather operations have to be performed 如果必须执行纹理收集操作，则最大的二维纹理尺寸*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture3D[<span class="number">3</span>];            <span class="comment">/**&lt; Maximum 3D texture dimensions 最大的3 d纹理维度*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture3DAlt[<span class="number">3</span>];         <span class="comment">/**&lt; Maximum alternate 3D texture dimensions 最大的替代3D纹理尺寸。*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTextureCubemap;          <span class="comment">/**&lt; Maximum Cubemap texture dimensions 最大Cubemap纹理维度*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture1DLayered[<span class="number">2</span>];     <span class="comment">/**&lt; Maximum 1D layered texture dimensions 最大1D层状纹理尺寸*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTexture2DLayered[<span class="number">3</span>];     <span class="comment">/**&lt; Maximum 2D layered texture dimensions 最大二维分层纹理尺寸*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxTextureCubemapLayered[<span class="number">2</span>];<span class="comment">/**&lt; Maximum Cubemap layered texture dimensions 最大立方体地图分层纹理尺寸*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxSurface1D;               <span class="comment">/**&lt; Maximum 1D surface size 最大1 d表面大小*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxSurface2D[<span class="number">2</span>];            <span class="comment">/**&lt; Maximum 2D surface dimensions 最大的2 d表面尺寸*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxSurface3D[<span class="number">3</span>];            <span class="comment">/**&lt; Maximum 3D surface dimensions 最大的3 d表面尺寸*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxSurface1DLayered[<span class="number">2</span>];     <span class="comment">/**&lt; Maximum 1D layered surface dimensions 最大一维分层表面尺寸。*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxSurface2DLayered[<span class="number">3</span>];     <span class="comment">/**&lt; Maximum 2D layered surface dimensions 最大二维分层表面尺寸。*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxSurfaceCubemap;          <span class="comment">/**&lt; Maximum Cubemap surface dimensions 最大Cubemap表面尺寸*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxSurfaceCubemapLayered[<span class="number">2</span>];<span class="comment">/**&lt; Maximum Cubemap layered surface dimensions 最大体积层状表面尺寸*/</span></span><br><span class="line">    <span class="keyword">size_t</span> surfaceAlignment;           <span class="comment">/**&lt; Alignment requirements for surfaces 表面对齐要求*/</span></span><br><span class="line">    <span class="keyword">int</span>    concurrentKernels;          <span class="comment">/**&lt; Device can possibly execute multiple kernels concurrently 设备可以同时执行多个内核*/</span></span><br><span class="line">    <span class="keyword">int</span>    ECCEnabled;                 <span class="comment">/**&lt; Device has ECC support enabled 设备已启用ECC支持*/</span></span><br><span class="line">    <span class="keyword">int</span>    pciBusID;                   <span class="comment">/**&lt; PCI bus ID of the device 设备的PCI总线ID*/</span></span><br><span class="line">    <span class="keyword">int</span>    pciDeviceID;                <span class="comment">/**&lt; PCI device ID of the device 设备的PCI设备ID。*/</span></span><br><span class="line">    <span class="keyword">int</span>    pciDomainID;                <span class="comment">/**&lt; PCI domain ID of the device 设备的PCI域ID*/</span></span><br><span class="line">    <span class="keyword">int</span>    tccDriver;                  <span class="comment">/**&lt; 1 if device is a Tesla device using TCC driver, 0 otherwise 如果设备是使用TCC驱动的特斯拉设备为1，则为0*/</span></span><br><span class="line">    <span class="keyword">int</span>    asyncEngineCount;           <span class="comment">/**&lt; Number of asynchronous engines 异步的引擎*/</span></span><br><span class="line">    <span class="keyword">int</span>    unifiedAddressing;          <span class="comment">/**&lt; Device shares a unified address space with the host 设备与主机共享统一的地址空间*/</span></span><br><span class="line">    <span class="keyword">int</span>    memoryClockRate;            <span class="comment">/**&lt; Peak memory clock frequency in kilohertz 峰值记忆时钟频率，单位为千赫兹*/</span></span><br><span class="line">    <span class="keyword">int</span>    memoryBusWidth;             <span class="comment">/**&lt; Global memory bus width in bits 全局内存总线宽度的位。*/</span></span><br><span class="line">    <span class="keyword">int</span>    l2CacheSize;                <span class="comment">/**&lt; Size of L2 cache in bytes 以字节为单位的L2缓存大小*/</span></span><br><span class="line">    <span class="keyword">int</span>    maxThreadsPerMultiProcessor;<span class="comment">/**&lt; Maximum resident threads per multiprocessor 每个多处理器的最大驻留线程。*/</span></span><br><span class="line">    <span class="keyword">int</span>    streamPrioritiesSupported;  <span class="comment">/**&lt; Device supports stream priorities 设备支持流的优先级*/</span></span><br><span class="line">    <span class="keyword">int</span>    globalL1CacheSupported;     <span class="comment">/**&lt; Device supports caching globals in L1 设备支持在L1中缓存全局变量*/</span></span><br><span class="line">    <span class="keyword">int</span>    localL1CacheSupported;      <span class="comment">/**&lt; Device supports caching locals in L1 设备支持L1中的缓存局部变量*/</span></span><br><span class="line">    <span class="keyword">size_t</span> sharedMemPerMultiprocessor; <span class="comment">/**&lt; Shared memory available per multiprocessor in bytes 每个多处理器可用的共享内存(以字节为单位)*/</span></span><br><span class="line">    <span class="keyword">int</span>    regsPerMultiprocessor;      <span class="comment">/**&lt; 32-bit registers available per multiprocessor 每个多处理器可使用32位寄存器*/</span></span><br><span class="line">    <span class="keyword">int</span>    managedMemory;              <span class="comment">/**&lt; Device supports allocating managed memory on this system 设备支持在这个系统上分配托管内存*/</span></span><br><span class="line">    <span class="keyword">int</span>    isMultiGpuBoard;            <span class="comment">/**&lt; Device is on a multi-GPU board 设备在一个多gpu板上。*/</span></span><br><span class="line">    <span class="keyword">int</span>    multiGpuBoardGroupID;       <span class="comment">/**&lt; Unique identifier for a group of devices on the same multi-GPU board 一组设备的唯一标识符，在同一个多gpu板上。*/</span></span><br><span class="line">    <span class="keyword">int</span>    hostNativeAtomicSupported;  <span class="comment">/**&lt; Link between the device and the host supports native atomic operations 设备和主机之间的链接支持本地原子操作*/</span></span><br><span class="line">    <span class="keyword">int</span>    singleToDoublePrecisionPerfRatio; <span class="comment">/**&lt; Ratio of single precision performance (in floating-point operations per second) to double precision performance 单精度性能(每秒浮点运算)与双精度性能的比值*/</span></span><br><span class="line">    <span class="keyword">int</span>    pageableMemoryAccess;       <span class="comment">/**&lt; Device supports coherently accessing pageable memory without calling cudaHostRegister on it 设备支持连贯地访问可分页内存，而不调用cudaHostRegister*/</span></span><br><span class="line">    <span class="keyword">int</span>    concurrentManagedAccess;    <span class="comment">/**&lt; Device can coherently access managed memory concurrently with the CPU 设备可以与CPU同步访问托管内存*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>使用CUDA程序读取GPU参数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CUDA头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cuda_runtime.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"device_launch_parameters.h"</span></span></span><br><span class="line"><span class="comment">//C语言的头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义cudaDeviceProp结构用于读取参数</span></span><br><span class="line">cudaDeviceProp prop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="comment">//读取设备的数量</span></span><br><span class="line">cudaGetDeviceCount(&amp;count);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"GPU_count = %d\n\n"</span>,count);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取相应设备号的设备信息</span></span><br><span class="line">cudaGetDeviceProperties(&amp;prop,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   --- General Information for device %d ---\n"</span>,i);</span><br><span class="line"><span class="comment">//显卡名称</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Name:\t%s\n"</span>,prop.name);</span><br><span class="line"><span class="comment">//计算能力</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Compute capability:\t%d.%d\n"</span>,prop.major,prop.minor);</span><br><span class="line"><span class="comment">//时钟频率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Clock rate:\t%d\n"</span>,prop.clockRate);</span><br><span class="line"><span class="comment">//设备复制重叠</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Device copy overlap:\t"</span>);</span><br><span class="line"><span class="keyword">if</span>(prop.deviceOverlap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Enable\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disable\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//内核执行超时</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Kernel execition timeout:\t"</span>);</span><br><span class="line"><span class="keyword">if</span>(prop.kernelExecTimeoutEnabled)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Enable\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disable\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   --- Memory Information for device %d ---\n"</span>,i);</span><br><span class="line"><span class="comment">//设备上全局内存的总量，单位为字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Total global Mem:\t%ld\n"</span>,prop.totalGlobalMem);</span><br><span class="line"><span class="comment">//设备上的常量内存的总量，单位为字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Total constant Mem:\t%ld\n"</span>,prop.totalConstMem);</span><br><span class="line"><span class="comment">//内存拷贝允许的最大字节间距</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Max men pitch:\t%ld\n"</span>,prop.memPitch);</span><br><span class="line"><span class="comment">//纹理对齐要求</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Texture Alignment:\t%ld\n"</span>,prop.textureAlignment);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   ---MP Information for device %d ---\n"</span>,i);</span><br><span class="line"><span class="comment">//设备上多处理器的数量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Multiprocessor count:\t%d\n"</span>,prop.multiProcessorCount);</span><br><span class="line"><span class="comment">//以字节为单位的每个块可用的共享内存</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Shared mem per mp:\t%ld\n"</span>,prop.sharedMemPerBlock);</span><br><span class="line"><span class="comment">//每个块可用的32位寄存器</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Registers per mp:\t%d\n"</span>,prop.regsPerBlock);</span><br><span class="line"><span class="comment">//每个warp包含的线程数量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Threads in warp:\t%d\n"</span>,prop.warpSize);</span><br><span class="line"><span class="comment">//每个块包含的最大线程数量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Max threads per block:\t%d\n"</span>,prop.maxThreadsPerBlock);</span><br><span class="line"><span class="comment">//块的每个维度的最大大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Max threads dimensions:\t(%d, %d, %d)\n"</span>,prop.maxThreadsDim[<span class="number">0</span>],prop.maxThreadsDim[<span class="number">1</span>],prop.maxThreadsDim[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">//网格的每个维度的最大大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Max grid dimensions:\t(%d, %d, %d)\n"</span>,prop.maxGridSize[<span class="number">0</span>],prop.maxGridSize[<span class="number">1</span>],prop.maxGridSize[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h1><p>《GPU高性能编程CUDA实战》</p><p><a href="https://blog.csdn.net/zhangfuliang123/article/details/78115163" target="_blank" rel="noopener">https://blog.csdn.net/zhangfuliang123/article/details/78115163</a></p><p><a href="https://blog.csdn.net/q583956932/article/details/78700942" target="_blank" rel="noopener">https://blog.csdn.net/q583956932/article/details/78700942</a></p>]]></content>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows远程链接问题</title>
      <link href="/2018/05/11/windows-link/"/>
      <url>/2018/05/11/windows-link/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="windows远程链接问题"><a href="#windows远程链接问题" class="headerlink" title="windows远程链接问题"></a>windows远程链接问题</h1><p>最近因为微软的更新我们在远程链接windows服务器的时候会出现如下问题：<br><a id="more"></a><br><img src="/images/远程链接问题.jpg"></p><p>使用微软官方建议修改本地组策略：计算机配置&gt;管理模板&gt;系统&gt;凭据分配&gt;加密Oracle修正 选择启用并选择易受攻击。</p><p>但是我们是win 10 家庭版没有组策略，我也尝试过网上添加的方式。如下：</p><p>1、打开txt复制以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line"></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line"></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line"></span><br><span class="line">for /f %%i in (&apos;findstr /i . List.txt 2^&gt;nul&apos;) do dism /online /norestart /add-package:&quot;C:\Windows\servicing\Packages\%%i&quot;</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>2、保存后，后缀改为cmd</p><p>3、管理员身份运行cmd文件</p><p>4、win+r弹出运行窗口，输入gpedit.msc,打开本地组策略</p><p>但是我们好像无法找到<strong>加密Oracle修正</strong>这一项。</p><h1 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h1><p>我们没办法添加组策略，那么我最终选择就是卸载掉微软的更新。<br>在控制面板，卸载程序，左边找到产看已安装的更新，翻到最底下找到如下的更新卸载后重启电脑即可。【但是这种方法不好的是我们在关机后卸载掉的更新又会回来，这样很不方便】</p><img src="/images/删除文件.jpg"><h1 id="解决方法二-较好的方法"><a href="#解决方法二-较好的方法" class="headerlink" title="解决方法二(较好的方法)"></a>解决方法二(较好的方法)</h1><p>1、运行regedit，打开注册表</p><p>2、找文件夹 路径：</p><p>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters（正常情况下只会到System，需要手动添加后两项路径）</p><p>3、再在Parameters里面 新建 DWORD（32）位，文件名 “AllowEncryptionOracle” ，值 : 2.</p><p>4、保存后如未生效，重启计算机</p><p>即可开启桌面远程连接</p>]]></content>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指offer刷题（30）：连续子数组的最大和</title>
      <link href="/2018/04/07/30-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
      <url>/2018/04/07/30-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="剑指offer刷题（30）：连续子数组的最大和"><a href="#剑指offer刷题（30）：连续子数组的最大和" class="headerlink" title="剑指offer刷题（30）：连续子数组的最大和"></a>剑指offer刷题（30）：连续子数组的最大和</h1><p>刷题平台：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网</a></p><a id="more"></a><h1 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h1><h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><p>动态规划</p><h2 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h2><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。你会不会被他忽悠住？(子向量的长度至少是1)</p><h2 id="2、解题思路"><a href="#2、解题思路" class="headerlink" title="2、解题思路"></a>2、解题思路</h2><p>从第一个数字开始，往后加，如果前面的和大于0，那么我们将要继续往下累加就好；否则我们将要重新归零，然后再往下累加。在累加的时候，一旦我们求得最大值的时候我们就可以记录子数组结束的位置。</p><h2 id="3、算法实现"><a href="#3、算法实现" class="headerlink" title="3、算法实现"></a>3、算法实现</h2><h3 id="C实现"><a href="#C实现" class="headerlink" title="C实现"></a>C实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *length, <span class="keyword">int</span> *start, <span class="keyword">int</span> *end, <span class="keyword">int</span> *sum_max)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *length, <span class="keyword">int</span> *start, <span class="keyword">int</span> *end, <span class="keyword">int</span> *sum_max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (length &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">*sum_max = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> sum_max_old = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; *length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*sum_max &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*sum_max = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*sum_max += a[i];</span><br><span class="line"><span class="keyword">if</span> (*sum_max &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*sum_max &gt; sum_max_old)</span><br><span class="line">&#123;</span><br><span class="line">sum_max_old = *sum_max;</span><br><span class="line">*start = i;</span><br><span class="line">*end = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*sum_max = <span class="number">0</span>;</span><br><span class="line">*start = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*sum_max &gt; sum_max_old)</span><br><span class="line">&#123;</span><br><span class="line">*end = i;</span><br><span class="line">sum_max_old = *sum_max;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*start &gt; *end)</span><br><span class="line">&#123;</span><br><span class="line">*start = *end;</span><br><span class="line">&#125;</span><br><span class="line">*sum_max = sum_max_old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num[] = &#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span> &#125;;<span class="comment">//−2,1,−3,4,−1,2,1,−5,4</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(num[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, sum_max=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"我们需要计算的数组"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">FindGreatestSumOfSubArray(num, &amp;length, &amp;start, &amp;end, &amp;sum_max);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连续子数组的最大和为："</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum_max);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连续子数组的最大和的起止坐标为:（%d,%d）\n"</span>, start, end);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连续子数组为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (start == end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, num[end]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, num[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h3><img src="/images/30-连续子数组的最大和.png">]]></content>
      
      
        <tags>
            
            <tag> 剑指offer刷题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指offer刷题（11）：二进制中1的个数</title>
      <link href="/2018/04/07/11-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2018/04/07/11-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="剑指offer刷题（11）：二进制中1的个数"><a href="#剑指offer刷题（11）：二进制中1的个数" class="headerlink" title="剑指offer刷题（11）：二进制中1的个数"></a>剑指offer刷题（11）：二进制中1的个数</h1><p>刷题平台：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网</a></p><a id="more"></a><h1 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h1><h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><p>位运算</p><h2 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h2><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><h2 id="2、解题思路"><a href="#2、解题思路" class="headerlink" title="2、解题思路"></a>2、解题思路</h2><p>一个数只要不为0，该数的二进制至少有一位为1，然后减去1以后原来最后的1变成0，原来1后面的0全变成1，这样并不会影响其余位置的变化，与原来的数求完与操作我们会发现原来数据中少了一个1，依次进行直到与操作为0为止。</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">111000总共有3个1：下面是计算过程：</span><br><span class="line">因为111000不等于0，所以计算标志位count=1;</span><br><span class="line">111000-1=110111,与原来的数据求与操作得到110000；</span><br><span class="line">因为110000不等于0，所以计算标志位conut+1,故count=2；</span><br><span class="line">同理110000-1=101111，与110000求与为100000；</span><br><span class="line">count=3；</span><br><span class="line">100000-1=011111，与100000求与操作000000；</span><br><span class="line">因为000000=0，所以最终的结果为count=3；</span><br><span class="line">故111000总共有3个1.</span><br></pre></td></tr></table></figure><h2 id="3、算法实现"><a href="#3、算法实现" class="headerlink" title="3、算法实现"></a>3、算法实现</h2><h3 id="C-C-实现"><a href="#C-C-实现" class="headerlink" title="C/C++实现"></a>C/C++实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">int</span>  <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             count++;</span><br><span class="line">             n=(n<span class="number">-1</span>)&amp;n;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 剑指offer刷题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指offer刷题（2）：空格替换</title>
      <link href="/2018/04/07/2-%E7%A9%BA%E6%A0%BC%E6%9B%BF%E6%8D%A2/"/>
      <url>/2018/04/07/2-%E7%A9%BA%E6%A0%BC%E6%9B%BF%E6%8D%A2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="剑指offer刷题（2）：空格替换"><a href="#剑指offer刷题（2）：空格替换" class="headerlink" title="剑指offer刷题（2）：空格替换"></a>剑指offer刷题（2）：空格替换</h1><p>刷题平台：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网</a></p><a id="more"></a><h1 id="空格替换"><a href="#空格替换" class="headerlink" title="空格替换"></a>空格替换</h1><h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><p>字符串</p><h2 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h2><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><h2 id="2、解题思路"><a href="#2、解题思路" class="headerlink" title="2、解题思路"></a>2、解题思路</h2><ul><li>1、<strong>思路一</strong>：从前往后依次查找空格，然后依次挪并且将空格替换成“%20”；该方法的计算复杂度为$O( n^2 )$<br>,因为空格后面的数据有可能重复的移动，所以该方法并不好。</li><li>2、<strong>思路二</strong>：我们可以先扫面一遍字符串，然后记录下该字符串中的空格数num_space,然后替换玩以后的数据新的长度new_length应该为length+2*num_space，此时我们在从后往前不停的复制数据，并且在遇到了空格的时候将其替换成“%20”。在该方法中所有的数据只会被移动一次，所以计算复杂度为$O(n)$。</li></ul><h2 id="3、算法实现"><a href="#3、算法实现" class="headerlink" title="3、算法实现"></a>3、算法实现</h2><h3 id="C-C-实现"><a href="#C-C-实现" class="headerlink" title="C/C++实现"></a>C/C++实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceSpace</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num_space=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num_space++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> new_length=length+<span class="number">2</span>*num_space;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=length;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]!=<span class="string">' '</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                str[new_length--]=str[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                str[new_length--]=<span class="string">'0'</span>;</span><br><span class="line">                str[new_length--]=<span class="string">'2'</span>;</span><br><span class="line">                str[new_length--]=<span class="string">'%'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 剑指offer刷题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指offer刷题（1）：二维数组中的查找</title>
      <link href="/2018/04/07/1-%E4%BA%8C%E4%BD%8D%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/04/07/1-%E4%BA%8C%E4%BD%8D%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="剑指offer刷题（1）：二维数组中的查找"><a href="#剑指offer刷题（1）：二维数组中的查找" class="headerlink" title="剑指offer刷题（1）：二维数组中的查找"></a>剑指offer刷题（1）：二维数组中的查找</h1><p>刷题平台：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网</a></p><a id="more"></a><h1 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h1><h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><p>数组</p><h2 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h2 id="2、解题思路"><a href="#2、解题思路" class="headerlink" title="2、解题思路"></a>2、解题思路</h2><p>对于一个二维数组，每一行都按照从左到右递增的顺序，每一列都按照从上到下递增的顺序排列，那么我们要想实现在这个数组中查找一个数。我们可以有很多个思路：</p><ul><li>1、从第一个数据向后或者最后一个数据向前挨个查找一遍，直至查到该数据或者查完所有数据为止。虽然这种方法可以实现，但是比较麻烦。</li><li>2、我们可以利用数组行列都是递增的这么一个关系，因此我们可以从数组的左下角或者右上角开始查找，让所需要查找的数组与左下角或者右上角的数据进行比较，这样我们就可以利用矩阵的特性来不断的缩小数据应该出现的范围，从而可以很快的找出数据，当然也可以很快的确定该数据是否存在与改数组中。</li></ul><h2 id="3、算法实现"><a href="#3、算法实现" class="headerlink" title="3、算法实现"></a>3、算法实现</h2><h3 id="C实现"><a href="#C实现" class="headerlink" title="C实现"></a>C实现</h3><p>为了方便这里的矩阵我并没有手动输入，而是直接放在程序里面的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> targe, <span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> targe, <span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = rows - <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; j &lt; cols)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (targe &lt; <span class="built_in">array</span>[cols * i + j]<span class="comment">/**((int *)array + cols * i + j)*/</span>  <span class="comment">/*array[i][j]*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targe&gt;<span class="built_in">array</span>[cols * i + j] <span class="comment">/**((int *)array + cols * i + j)*/</span>  <span class="comment">/*array[i][j]*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"找到了该数，位置为（%d,%d）\t第%d行,第%d列\n"</span>,i,j,i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该数组中没有该数。\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先定义一个二维数组</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>] = &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;, &#123; <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;, &#123; <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span> &#125;, &#123; <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span> &#125;, &#123; <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> targe=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cols = <span class="keyword">sizeof</span>(a[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> rows = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"二维数组为：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n矩阵的大小为：rows=%d\tcols=%d\n"</span>, rows, cols);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入需要查询的数字：\n"</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;targe);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"需要查询的数字为：%d\n"</span>,targe);</span><br><span class="line"></span><br><span class="line">Find(targe, *a, rows, cols);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows=<span class="built_in">array</span>.size();</span><br><span class="line">        <span class="keyword">int</span> cols=<span class="built_in">array</span>[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> i=rows<span class="number">-1</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;j&lt;cols)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;<span class="built_in">array</span>[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target&gt;<span class="built_in">array</span>[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="C语言实现结果"><a href="#C语言实现结果" class="headerlink" title="C语言实现结果"></a>C语言实现结果</h3><img src="/images/1-二维数组中的查找.png">]]></content>
      
      
        <tags>
            
            <tag> 剑指offer刷题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速排序</title>
      <link href="/2018/04/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>参考：<br><a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95</a></p><p><a href="http://cuijiahua.com/blog/2017/12/algorithm_4.html" target="_blank" rel="noopener">http://cuijiahua.com/blog/2017/12/algorithm_4.html</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br><a id="more"></a></p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><p>设要排序的数组是$A_{[0]}……A_{[N-1]}$，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。<br>一趟快速排序的算法是：</p><ul><li>1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；</li><li>2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；</li><li>3）从j开始向前搜索，即由后开始向前搜索(j—)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；</li><li>4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；</li><li>5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。</li></ul><h2 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h2><p>假设有一组数{6,10,1,2,8,5,9,7,3,4,0}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下标    0    1    2    3    4    5    6    7    8    9    10</span><br><span class="line">数据    6    10   1    2    8    5    9    7    3    4    0</span><br></pre></td></tr></table></figure></p><p>此时i=0,j=10,key=6</p><p>从右边开始把比key小的值与0位的6进行换位操作。因此对于上述例子，右边第一个数为0，比6小，进项换位操作，完成第一次比较：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下标    0    1    2    3    4    5    6    7    8    9    10</span><br><span class="line">数据    0    10   1    2    8    5    9    7    3    4    6</span><br></pre></td></tr></table></figure></p><p>此时i=0，j=10,key=6</p><p>接着进行第二次比较，从左边开始把比6大的数字与6进行换位操作，完成第二次比较：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下标    0    1    2    3    4    5    6    7    8    9    10</span><br><span class="line">数据    0    6    1    2    8    5    9    7    3    4    10</span><br></pre></td></tr></table></figure></p><p>上面两次比较是一个循环，接下来递减变量j和i,只需要不断的重复上面的操作，直至i=j为止。</p><p>然后，对key两边的数据，再分组分别进行上述的过程，直到不能再分组为止。</p><h2 id="四、算法实现"><a href="#四、算法实现" class="headerlink" title="四、算法实现"></a>四、算法实现</h2><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = left;</span><br><span class="line"><span class="keyword">int</span> j = right;</span><br><span class="line"><span class="keyword">int</span> key = a[left];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; key &lt;= a[j])</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">a[i] = a[j];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; key &gt;= a[i])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">a[j] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">a[i] = key;</span><br><span class="line">quick_sort(a, left, i - <span class="number">1</span>);</span><br><span class="line">quick_sort(a, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number[] = &#123; <span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(number) / <span class="keyword">sizeof</span>(number[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数据：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">quick_sort(number, <span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n返回结果：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="/images/快速排序.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基数排序</title>
      <link href="/2018/04/06/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/06/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>参考：<br><a href="https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F</a></p><p><a href="http://cuijiahua.com/blog/2018/01/algorithm_8.html" target="_blank" rel="noopener">http://cuijiahua.com/blog/2018/01/algorithm_8.html</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。<br><a id="more"></a><br>基本思想：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。</p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><ul><li>1、将所有数据从低位开始，按照0~9进行归类</li><li>2、将归完的数据整理好，这就进行了一次排序</li><li>3、重复执行前两步直到最高位也排完序了，此时整理完数据就是排完的序列</li></ul><h2 id="三、例子（借用百度百科的例子）"><a href="#三、例子（借用百度百科的例子）" class="headerlink" title="三、例子（借用百度百科的例子）"></a>三、例子（借用百度百科的例子）</h2><ul><li>第一步</li></ul><p>以LSD为例，假设原来有一串数值如下所示：</p><p>73, 22, 93, 43, 55, 14, 28, 65, 39, 81</p><p>首先根据个位数的数值，在走访数值时将它们分配至编号0到9的桶子中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1 81</span><br><span class="line">2 22</span><br><span class="line">3 73 93 43</span><br><span class="line">4 14</span><br><span class="line">5 55 65</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8 28</span><br><span class="line">9 39</span><br></pre></td></tr></table></figure></p><ul><li>第二步</li></ul><p>接下来将这些桶子中的数值重新串接起来，成为以下的数列：</p><p>81, 22, 73, 93, 43, 14, 55, 65, 28, 39</p><p>接着再进行一次分配，这次是根据十位数来分配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1 14</span><br><span class="line">2 22 28</span><br><span class="line">3 39</span><br><span class="line">4 43</span><br><span class="line">5 55</span><br><span class="line">6 65</span><br><span class="line">7 73</span><br><span class="line">8 81</span><br><span class="line">9 93</span><br></pre></td></tr></table></figure></p><ul><li>第三步</li></ul><p>接下来将这些桶子中的数值重新串接起来，成为以下的数列：</p><p>14, 22, 28, 39, 43, 55, 65, 73, 81, 93</p><p>这时候整个数列已经排序完毕；如果排序的对象有三位数以上，则持续进行以上的动作直至最高位数为止。</p><p>LSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好。MSD的方式与LSD相反，是由高位数为基底开始进行分配，但在分配之后并不马上合并回一个数组中，而是在每个“桶子”中建立“子桶”，将每个桶子中的数值按照下一数位的值分配到“子桶”中。在进行完最低位数的分配后再合并回单一的数组中。</p><h2 id="四、算法实现"><a href="#四、算法实现" class="headerlink" title="四、算法实现"></a>四、算法实现</h2><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"math.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucketSort3</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLoopTimes</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxNum</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort2</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n, <span class="keyword">int</span> loop)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//基数排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucketSort3</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取数组中的最大数</span></span><br><span class="line"><span class="keyword">int</span> maxNum = findMaxNum(p, n);</span><br><span class="line"><span class="comment">//获取最大数的位数，次数也是再分配的次数。</span></span><br><span class="line"><span class="keyword">int</span> loopTimes = getLoopTimes(maxNum);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//对每一位进行桶分配</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= loopTimes; i++)</span><br><span class="line">&#123;</span><br><span class="line">sort2(p, n, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d次循环：\t"</span>, i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, p[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数字的位数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLoopTimes</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> temp = num / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (temp != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">temp = temp / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询数组中的最大数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxNum</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(p + i) &gt; max)</span><br><span class="line">&#123;</span><br><span class="line">max = *(p + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数字分配到各自的桶中，然后按照桶的顺序输出排序结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort2</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n, <span class="keyword">int</span> loop)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//建立一组桶此处的20是预设的根据实际数情况修改</span></span><br><span class="line"><span class="keyword">int</span> buckets[<span class="number">10</span>][<span class="number">20</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">//求桶的index的除数</span></span><br><span class="line"><span class="comment">//如798个位桶index=(798/1)%10=8</span></span><br><span class="line"><span class="comment">//十位桶index=(798/10)%10=9</span></span><br><span class="line"><span class="comment">//百位桶index=(798/100)%10=7</span></span><br><span class="line"><span class="comment">//tempNum为上式中的1、10、100</span></span><br><span class="line"><span class="keyword">int</span> tempNum = (<span class="keyword">int</span>)<span class="built_in">pow</span>((<span class="keyword">float</span>)<span class="number">10</span>, loop - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row_index = (*(p + i) / tempNum) % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (buckets[row_index][j] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">buckets[row_index][j] = *(p + i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将桶中的数，倒回到原有数组中</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (buckets[i][j] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*(p + k) = buckets[i][j];</span><br><span class="line">buckets[i][j] = <span class="literal">NULL</span>;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] =  &#123; <span class="number">73</span>, <span class="number">22</span>, <span class="number">93</span>, <span class="number">43</span>, <span class="number">55</span>, <span class="number">14</span>, <span class="number">28</span>, <span class="number">65</span>, <span class="number">39</span>, <span class="number">81</span> &#125;;<span class="comment">//&#123; 2, 343, 342, 1, 123, 43, 4343, 433, 687, 654, 3 &#125;;//</span></span><br><span class="line"><span class="keyword">int</span> *a_p = a;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//计算数组长度</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数据：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="comment">//基数排序</span></span><br><span class="line">bucketSort3(a_p, size);</span><br><span class="line"><span class="comment">//打印排序后结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n返回结果：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="/images/基数排序.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>归并排序</title>
      <link href="/2018/04/06/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/06/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>参考：<br><a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F</a></p><p><a href="http://cuijiahua.com/blog/2018/01/algorithm_7.html" target="_blank" rel="noopener">http://cuijiahua.com/blog/2018/01/algorithm_7.html</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br><a id="more"></a></p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><ul><li>1、先将序列分为两组</li><li>2、分别对两组进行排序</li><li>3、进行归并</li></ul><p>归并过程为：比较a[i]和b[j]的大小，若a[i]≤b[j]，则将第一个有序表中的元素a[i]复制到r[k]中，并令i和k分别加上1；否则将第二个有序表中的元素b[j]复制到r[k]中，并令j和k分别加上1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到r中从下标k到下标t的单元。</p><h2 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h2><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> sourceArr[], <span class="keyword">int</span> tempArr[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> midIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = startIndex, j = midIndex + <span class="number">1</span>, k = startIndex;</span><br><span class="line"><span class="keyword">while</span> (i != midIndex + <span class="number">1</span> &amp;&amp; j != endIndex + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sourceArr[i] &gt; sourceArr[j])</span><br><span class="line">tempArr[k++] = sourceArr[j++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">tempArr[k++] = sourceArr[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i != midIndex + <span class="number">1</span>)</span><br><span class="line">tempArr[k++] = sourceArr[i++];</span><br><span class="line"><span class="keyword">while</span> (j != endIndex + <span class="number">1</span>)</span><br><span class="line">tempArr[k++] = sourceArr[j++];</span><br><span class="line"><span class="keyword">for</span> (i = startIndex; i &lt;= endIndex; i++)</span><br><span class="line">sourceArr[i] = tempArr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部使用递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> sourceArr[], <span class="keyword">int</span> tempArr[], <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> midIndex;</span><br><span class="line"><span class="keyword">if</span> (startIndex &lt; endIndex)</span><br><span class="line">&#123;</span><br><span class="line">midIndex = (startIndex + endIndex) / <span class="number">2</span>;</span><br><span class="line">MergeSort(sourceArr, tempArr, startIndex, midIndex);</span><br><span class="line">MergeSort(sourceArr, tempArr, midIndex + <span class="number">1</span>, endIndex);</span><br><span class="line">Merge(sourceArr, tempArr, startIndex, midIndex, endIndex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number[] = &#123; <span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(number) / <span class="keyword">sizeof</span>(number[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//int result[11] = &#123;0&#125;;</span></span><br><span class="line"><span class="keyword">int</span> *result = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数据：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">MergeSort(number, result,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n返回结果：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, result[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="/images/归并排序.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单选择排序</title>
      <link href="/2018/04/06/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/06/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h1><p>参考：<br><a href="https://baike.baidu.com/item/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F</a></p><p><a href="http://cuijiahua.com/blog/2017/12/algorithm_5.html" target="_blank" rel="noopener">http://cuijiahua.com/blog/2017/12/algorithm_5.html</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>简单选择排序就是从左边开始，找到最小的数字，然后进行换位操作即可。<br><a id="more"></a></p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><ul><li>1、先找到整个序列中最小的值，然后跟最左边0位进行换位操作；</li><li>2、从1位（即就是第二个数字）开始找到最小的数跟1位进行换位操作；</li><li>3、依此进行最小值的查找并进行换位操作，直至最后。</li></ul><h2 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h2><p>假设有一组数{0,10,1,2,8,5,9,7,3,4,6}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">排序前：    0    10    1    2    8    5    9    7    3    4    6</span><br><span class="line"></span><br><span class="line">第一次：    0    10    1    2    8    5    9    7    3    4    6  </span><br><span class="line">第二次：    0    1     10   2    8    5    9    7    3    4    6 </span><br><span class="line">第三次：    0    1     2    10   8    5    9    7    3    4    6 </span><br><span class="line">第四次：    0    1     2    3    8    5    9    7    10   4    6</span><br><span class="line">第五次：    0    1     2    3    4    5    9    7    10   8    6 </span><br><span class="line">第六次：    0    1     2    3    4    5    9    7    10   8    6</span><br><span class="line">第七次：    0    1     2    3    4    5    6    7    10   8    9</span><br><span class="line">第八次：    0    1     2    3    4    5    6    7    10   8    9</span><br><span class="line">第九次：    0    1     2    3    4    5    6    7    8    10   9</span><br><span class="line">第十次：    0    1     2    3    4    5    6    7    8    9    10</span><br></pre></td></tr></table></figure><h2 id="四、算法实现"><a href="#四、算法实现" class="headerlink" title="四、算法实现"></a>四、算法实现</h2><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)<span class="comment">//最后就一个数字了不用找最小值换了</span></span><br><span class="line">&#123;</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[t]&gt;a[j])</span><br><span class="line">&#123;</span><br><span class="line">t = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = a[i];</span><br><span class="line">a[i] = a[t];</span><br><span class="line">a[t] = temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d次循环：\t"</span>, i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number[] = &#123; <span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(number) / <span class="keyword">sizeof</span>(number[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数据：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">select_sort(number, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n返回结果：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="/images/简单选择排序.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2018/04/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>参考：<br><a href="https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306</a></p><p><a href="http://cuijiahua.com/blog/2017/12/algorithm_1.html" target="_blank" rel="noopener">http://cuijiahua.com/blog/2017/12/algorithm_1.html</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>1、比较两个相邻元素的大小。如果前面的比后面的大则交换位置，否则不变。<br><a id="more"></a><br>2、依次循环第一步的操作，直到最后一对数字结束，最后一个数字一定是这组数字中最大的那一个</p><p>3、依次进行上述操作（除了每次得到的最大的数）</p><p>4、循环上述操作直到没有可以比较的数字为止，我们就已经得到了最终的排序</p><h2 id="二、优化"><a href="#二、优化" class="headerlink" title="二、优化"></a>二、优化</h2><p>其实当我们进行比较的时候，如果前面的比较都没有进行换位操作的话，即证明前面的顺序是对的，所以此时我们可以设置一个标志位停止掉后面的循环操作。这样我们就可以节省掉很多的时间。</p><h2 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h2><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, temp, exchange_num;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">exchange_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span> - j; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[i];</span><br><span class="line">a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">a[i + <span class="number">1</span>] = temp;</span><br><span class="line">exchange_num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d次循环,交换了%d次：\t"</span>, j + <span class="number">1</span>, exchange_num);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (exchange_num == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nbreak bubble_sort\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number[] = &#123; <span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(number) / <span class="keyword">sizeof</span>(number[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数据：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">bubble_sort(number, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n返回结果：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="/images/冒泡排序.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>希尔排序</title>
      <link href="/2018/04/06/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/06/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>参考：<br><a href="https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F</a></p><p><a href="http://cuijiahua.com/blog/2017/12/algorithm_3.html" target="_blank" rel="noopener">http://cuijiahua.com/blog/2017/12/algorithm_3.html</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>希尔排序是插入排序的一种，又称“缩小增量排序”，是直接插入排序的一种高效改进版。<br><a id="more"></a></p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><ul><li>1、先取一个增量$a_{1}$,然后将待排序的序列按照将距离为$a_{1}$的数放在一组中的原则分成n组，（最后不够$a_{1}$个的数也为一组）</li><li>2、将所有组数分别进行直接插入排序</li><li>3、排好序后再将所有组的数拼接在一起</li><li>4、重新选择一个增量$a_{2}$，使得$a_{2}&lt;a_{1}$，然后重复上诉步骤即可，直到增量为1，排序完成</li></ul><h2 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h2><p>假设有一组数{0,10,1,2,8,5,9,7,3,4,6}，增量步长为3进行排序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0    2    9    4</span><br><span class="line">10   8    7    6</span><br><span class="line">1    5    3</span><br></pre></td></tr></table></figure></p><p>对每组进行直接插入语排序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0    2    4    9</span><br><span class="line">6    7    8    10</span><br><span class="line">1    3    5</span><br></pre></td></tr></table></figure></p><p>将上述每组元素依此拼接在一起得到{0,2,4,9,6,7,8,10,1,3,5},然后在以2为增量步长进行排序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0    4    6    8    1    5</span><br><span class="line">2    9    7    10   3</span><br></pre></td></tr></table></figure></p><p>对每组进行直接插入排序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0    1    4    5    6    8</span><br><span class="line">2    3    7    9    10</span><br></pre></td></tr></table></figure></p><p>最后再以1为增量步长进行排序（就是简单的直接插入排序了）。</p><h2 id="四、算法实现"><a href="#四、算法实现" class="headerlink" title="四、算法实现"></a>四、算法实现</h2><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gap,i,j,temp,loop_num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (gap = n &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap &gt;&gt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">loop_num++;</span><br><span class="line"><span class="keyword">for</span> (i = gap; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = a[i];</span><br><span class="line">j = i - gap;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j]&gt;temp)</span><br><span class="line">&#123;</span><br><span class="line">a[j + gap] = a[j];</span><br><span class="line">j -= gap;</span><br><span class="line">&#125;</span><br><span class="line">a[j + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d次循环,gap=%d：\t"</span>, loop_num,gap);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number[] = &#123; <span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(number) / <span class="keyword">sizeof</span>(number[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数据：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">shell_sort(number, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n返回结果：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="/images/希尔排序.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>堆排序</title>
      <link href="/2018/04/06/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/06/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>参考：<br><a href="https://baike.baidu.com/item/%E5%A0%86%E6%8E%92%E5%BA%8F/2840151" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%A0%86%E6%8E%92%E5%BA%8F/2840151</a></p><p><a href="http://cuijiahua.com/blog/2018/01/algorithm_6.html" target="_blank" rel="noopener">http://cuijiahua.com/blog/2018/01/algorithm_6.html</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即$A_{[PARENT_{[i]}]} &gt;= A_{[i]}$。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。<br><a id="more"></a></p><p>堆是一棵顺序存储的完全二叉树。</p><ul><li>其中每个结点的关键字都不大于其孩子结点的关键字，这样的堆称为小根堆。</li><li><p>其中每个结点的关键字都不小于其孩子结点的关键字，这样的堆称为大根堆。<br>举例来说，对于n个元素的序列${R_{0}, R_{1}, … , R_{n}}$当且仅当满足下列关系之一时，称之为堆：</p><script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML" async></script></li><li><p>$R_{i}&lt;=R_{2i+1}$ 且 $R_{i}&lt;=R_{2i+2}$ (小根堆)</p></li><li>$R_{i}&gt;=R_{2i+1}$ 且 $R_{i}&gt;=R_{2i+2}$ (大根堆)<br>其中i=1,2,…,n/2向下取整；</li></ul><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><p>设当前元素在数组中以R[i]表示，那么，</p><blockquote><p>(1) 它的左孩子结点是：R[2*i+1];</p><p>(2) 它的右孩子结点是：R[2*i+2];</p><p>(3) 它的父结点是：R[(i-1)/2];</p><p>(4) R[i] &lt;= R[2*i+1] 且 R[i] &lt;= R[2i+2]。</p></blockquote><ul><li><p>首先，按堆的定义将数组R[0..n]调整为堆（这个过程称为创建初始堆），交换R[0]和R[n]；</p></li><li><p>然后，将R[0..n-1]调整为堆，交换R[0]和R[n-1]；</p></li><li><p>如此反复，直到交换了R[0]和R[1]为止。</p></li></ul><p>以上思想可归纳为两个操作：</p><ul><li><p>（1）根据初始数组去构造初始堆（构建一个完全二叉树，保证所有的父结点都比它的孩子结点数值大）。</p></li><li><p>（2）每次交换第一个和最后一个元素，输出最后一个元素（最大值），然后把剩下元素重新调整为大根堆。</p></li></ul><p>当输出完最后一个元素后，这个数组已经是按照从小到大的顺序排列了。</p><h2 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h2><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span> param1, <span class="keyword">int</span> j, <span class="keyword">int</span> inNums[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> nums, <span class="keyword">int</span> inNums[])</span></span>;</span><br><span class="line"><span class="comment">//大根堆进行调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span> param1, <span class="keyword">int</span> j, <span class="keyword">int</span> inNums[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = inNums[param1];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = param1 * <span class="number">2</span> + <span class="number">1</span>; k&lt;j; k = k * <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果右边值大于左边值，指向右边</span></span><br><span class="line"><span class="keyword">if</span> (k + <span class="number">1</span>&lt;j &amp;&amp; inNums[k]&lt; inNums[k + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果子节点大于父节点，将子节点值赋给父节点,并以新的子节点作为父节点（不用进行交换）</span></span><br><span class="line"><span class="keyword">if</span> (inNums[k]&gt;temp)</span><br><span class="line">&#123;</span><br><span class="line">inNums[param1] = inNums[k];</span><br><span class="line">param1 = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//put the value in the final position</span></span><br><span class="line">inNums[param1] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序主要算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">( <span class="keyword">int</span> inNums[],<span class="keyword">int</span> nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="comment">//1.构建大顶堆</span></span><br><span class="line"><span class="keyword">for</span> (i = nums / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//put the value in the final position</span></span><br><span class="line">adjustHeap(i, nums, inNums);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.调整堆结构+交换堆顶元素与末尾元素</span></span><br><span class="line"><span class="keyword">for</span> (j = nums - <span class="number">1</span>; j&gt;<span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//堆顶元素和末尾元素进行交换</span></span><br><span class="line"><span class="keyword">int</span> temp = inNums[<span class="number">0</span>];</span><br><span class="line">inNums[<span class="number">0</span>] = inNums[j];</span><br><span class="line">inNums[j] = temp;</span><br><span class="line"></span><br><span class="line">adjustHeap(<span class="number">0</span>, j, inNums);<span class="comment">//重新对堆进行调整</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d次循环：\t"</span>, nums-j);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, inNums[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number[] = &#123; <span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(number) / <span class="keyword">sizeof</span>(number[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数据：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">HeapSort(number, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n返回结果：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="/images/堆排序.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>直接插入排序</title>
      <link href="/2018/04/06/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/06/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><p>参考：<br><a href="https://baike.baidu.com/item/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F</a></p><p><a href="http://cuijiahua.com/blog/2017/12/algorithm_2.html" target="_blank" rel="noopener">http://cuijiahua.com/blog/2017/12/algorithm_2.html</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>每次将一条记录插入到已经排好的有序表中，从而得到了一个新的有序表。</p><a id="more"></a><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><p>假设待排序记录 <script type="math/tex">R_{0},R_{1},R_{2},...,R_{n-1},R_{n}</script></p><ul><li>1、将第一个元素 <script type="math/tex">R_{0}</script> 视为一个元素为1的有序序列</li><li>2、依次将 <script type="math/tex">R_{1},R_{2},...,R_{n-1},R_{n}</script> 插入到前面的有序序列中，每插入一次有序序列的元素数个数加1</li><li>3、直到 <script type="math/tex">R_{n}</script> 也插入到序列中的时候，排序完成</li></ul><h2 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h2><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, temp;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[i];</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt; <span class="number">0</span> &amp;&amp; a[j] &gt; temp; j--)</span><br><span class="line">&#123;</span><br><span class="line">a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">&#125;</span><br><span class="line">a[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第%d次循环：\t"</span>, i);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number[] = &#123; <span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(number) / <span class="keyword">sizeof</span>(number[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原始数据：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">insert_sort(number, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n返回结果：\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, number[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="/images/直接插入排序.png">]]></content>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nvidia驱动挂掉</title>
      <link href="/2018/01/16/nvidia%E9%A9%B1%E5%8A%A8%E6%8C%82%E6%8E%89/"/>
      <url>/2018/01/16/nvidia%E9%A9%B1%E5%8A%A8%E6%8C%82%E6%8E%89/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="nvidia驱动挂掉"><a href="#nvidia驱动挂掉" class="headerlink" title="nvidia驱动挂掉"></a>nvidia驱动挂掉</h1><p>linux系统中，在内核自动升级后英伟达的驱动有时候会找不到，以至于驱动用不了，装的CUDA等都找不到。</p><p><strong>或者无法链接NVIDIA驱动：NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver</strong></p><a id="more"></a><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>以下是自己的解决方法。</p><p>我们选择使用dkms这个包来对驱动进行管理。</p><p>在此之前我们应该先查看一下gcc和g++的版本，这个可能会影响我们的编译，<strong><em>【同时也有可能时gcc和g++的版本被我们降低了才导致了驱动更新没有跟上】</em></strong>我们要将这两个版本调到原来系统的版本（如果有多版本的话），当然gcc和g++应该处于同一个版本。调整gcc和g++的版本可以参考以前的博客<a href="https://huanghailiang.github.io/2017/07/22/ubuntu-Reduce-the-version-gcc-g++/">ubuntu环境下降低gcc和g++的版本</a></p><p><strong>方法一：</strong><br>安装dkms<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dkms</span><br></pre></td></tr></table></figure></p><p>查看dkms的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkms status</span><br></pre></td></tr></table></figure><p>使用dkms挂载nvidia</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkms nvidia</span><br></pre></td></tr></table></figure><p>使用dkms自动安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dkms autoinstall</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong><br>nvcc -V可以找到驱动</p><p>step1：sudo apt-get install dkms</p><p>step2: sudo dkms install -m nvidia -v 410.48</p><p><strong>其中step2 中的410.48是NVIDIA的版本号，进入/usr/src目录中，可以看到里面有nvidia文件夹，后缀就是其版本号</strong></p><p>本人使用以上的方法解决了因为内核更新导致的驱动版本没有跟上的问题。作为笔记供日后查看。</p><p>注：</p><p>安装内核<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-headers-generic</span><br></pre></td></tr></table></figure></p><p>查看错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/dkms/nvidia/375.26/build/make.log</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>服务器之间免密配置</title>
      <link href="/2017/12/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%8D%E5%AF%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/12/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%8D%E5%AF%86%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="服务器之间免密配置"><a href="#服务器之间免密配置" class="headerlink" title="服务器之间免密配置"></a>服务器之间免密配置</h1><p>主要用于服务器之间的通信。</p><a id="more"></a><p>当服务器没有禁用密码登陆的时候，我们服务器之间通信可以通过密码登陆，比如ssh和scp指令的操作可以使用密码来操作。但是如果其中一台服务器设置了禁止密码登陆的话，连接该机子将会受阻；同理两台机子如果都禁用了密码登陆的话，两台机子之间的互相连接都会受阻。因此我们要设置两台机子之间的免密登陆。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>在之前的博客“hadoop集群安装”中，其中就有一个ssh无密码登陆节点的配置的过程。</p><p>不过如果有一台机子已经设置过禁止密码登陆了，这种方法中使用scp传输id_rsa.pub文件将会受阻。此时可以使用方法二。<br>。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>该方法比较简单粗暴，就跟之前博客“Ubuntu 系统设置密钥登陆”一样，给两台电脑互换公钥即可。</p><p>具体操作为：</p><p>在两台机子上执行</p><pre><code>ssh-keygen</code></pre><p>用于生成机子的公钥，如果有的话可以直接用，或者删了重新生成都可。</p><p>接着复制服务器1中 ~/.ssh/id_rsa.pub中的公匙到服务器2中的~/.ssh/authorized_keys<br>同理将服务器2中的也复制到服务器1中对应的位置即可。</p><p>注：</p><p>可以直接使用cat指令进行查看id_rsa.pub中的公匙。</p><p>更改authorized_keys的文件模式</p><pre><code>chmod 600 authorized_keys</code></pre>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XX-net</title>
      <link href="/2017/11/29/XX-net/"/>
      <url>/2017/11/29/XX-net/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用XX-net进行上网"><a href="#使用XX-net进行上网" class="headerlink" title="使用XX-net进行上网"></a>使用XX-net进行上网</h1><p>xx-net个人用它来上外网的。</p><a id="more"></a><p>参考网址：<a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net</a></p><p>1、安装谷歌浏览器</p><p>2、下载或者使用git克隆xx-net软件； <a href="https://github.com/XX-net/XX-Net.git" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net.git</a></p><p>3、将文件放置到希望安装的位置，然后运行 start.vbs即可。</p><p>完成上面的步骤，如果使用的是学校的网络，那么应该就可以直接上外网了，如果是自己寝室的网络需要根据上面的提示设置一下IPV6然后重新启动计算机即可。</p><p>这个时候使用的是公共appid，当然你也可以用你自己的谷歌账户创建自己的appid，一个谷歌账户可以创建12个appid.直接点配置文件重点的怎么申请即可。</p><h2 id="IPV6开启"><a href="#IPV6开启" class="headerlink" title="IPV6开启"></a>IPV6开启</h2><p>参考网址：</p><p><a href="https://github.com/XX-net/XX-Net/wiki/%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AFIPv6" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net/wiki/%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AFIPv6</a></p><p>设置如下：</p><p>  // 设置 Teredo 服务器，默认为：win10.ipv6.microsoft.com<br>  netsh interface teredo set state enterpriseclient server=default<br>  ping -6 ipv6.test-ipv6.com</p><p>  // 重置 IPv6 配置<br>  netsh interface ipv6 reset</p>]]></content>
      
      
        <tags>
            
            <tag> 工具的使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VXL库的简单使用</title>
      <link href="/2017/11/07/VXL%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/11/07/VXL%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="VXL库"><a href="#VXL库" class="headerlink" title="VXL库"></a>VXL库</h1><p>该库是进行矩阵运算的一个矩阵库，个人感觉使用起来跟eigen库还是比较像，毕竟都是基于C++编写的矩阵运算库。<br><a id="more"></a></p><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>该库是ITK这个开源项目中的数学计算部分，ITK是一个开源的跨平台的图像分析算法研究平台。感觉国内使用的人好像并不是很多，所以之前找到的资料也比较少，下面是自己找到的资源的链接：</p><p><a href="http://xueshu.baidu.com/s?wd=%E5%9F%BA%E4%BA%8EITK%E6%95%B0%E5%AD%A6%E5%BA%93%E7%9A%84%E7%9F%A9%E9%98%B5%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97&amp;rsv_bp=0&amp;tn=SE_baiduxueshu_c1gjeupa&amp;rsv_spt=3&amp;ie=utf-8&amp;f=8&amp;rsv_sug2=1&amp;sc_f_para=sc_tasktype%3D%7BfirstSimpleSearch%7D&amp;rsv_n=2" target="_blank" rel="noopener">http://xueshu.baidu.com/s?wd=%E5%9F%BA%E4%BA%8EITK%E6%95%B0%E5%AD%A6%E5%BA%93%E7%9A%84%E7%9F%A9%E9%98%B5%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97&amp;rsv_bp=0&amp;tn=SE_baiduxueshu_c1gjeupa&amp;rsv_spt=3&amp;ie=utf-8&amp;f=8&amp;rsv_sug2=1&amp;sc_f_para=sc_tasktype%3D%7BfirstSimpleSearch%7D&amp;rsv_n=2</a></p><p><a href="https://public.kitware.com/vxl/doc/release/" target="_blank" rel="noopener">https://public.kitware.com/vxl/doc/release/</a></p><h2 id="VXL库的下载"><a href="#VXL库的下载" class="headerlink" title="VXL库的下载"></a>VXL库的下载</h2><p>我使用的是vxl-1.17.0可以直接百度下载：</p><p><a href="https://zh.osdn.net/projects/sfnet_vxl/downloads/vxl/1.17b/vxl-1.17.0-b.tar.gz/" target="_blank" rel="noopener">https://zh.osdn.net/projects/sfnet_vxl/downloads/vxl/1.17b/vxl-1.17.0-b.tar.gz/</a></p><p>或者可以在我的github上进行下载：</p><p><a href="https://github.com/huanghailiang/vxl-1.17.0.git" target="_blank" rel="noopener">https://github.com/huanghailiang/vxl-1.17.0.git</a></p><h1 id="VXL库的简单使用"><a href="#VXL库的简单使用" class="headerlink" title="VXL库的简单使用"></a>VXL库的简单使用</h1><p>在上面资源的链接中都有讲vxl这个库的使用，尤其VXL Documentation中更加全面。</p><p>下面是自己给的一些最常用到的一些简单的例子，如果后面有时间有兴趣的话会接着更新，如果没有就…..</p><p>编写CMakeList.txt来进行链接库生成工程，省去自己链接库的麻烦：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#=========================================================================</span><br><span class="line"># $Author$</span><br><span class="line"># $Date$</span><br><span class="line"># $Revision$</span><br><span class="line">#=========================================================================</span><br><span class="line"></span><br><span class="line">CMAKE_MINIMUM_REQUIRED(VERSION <span class="number">2.4</span>)</span><br><span class="line">IF(COMMAND cmake_policy)</span><br><span class="line">    cmake_policy(SET CMP0003 NEW)</span><br><span class="line">ENDIF(COMMAND cmake_policy)</span><br><span class="line"></span><br><span class="line">PROJECT(VNL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FIND_PACKAGE(VXL)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">IF(VXL_FOUND)</span><br><span class="line">  INCLUDE($&#123;VXL_CMAKE_DIR&#125;/UseVXL.cmake)</span><br><span class="line">ENDIF(VXL_FOUND)</span><br><span class="line"></span><br><span class="line">IF(WIN32)</span><br><span class="line">ADD_DEFINITIONS(-D_ALLOW_KEYWORD_MACROS)</span><br><span class="line">ENDIF(WIN32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#IF( VXL_VNL_FOUND )  </span><br><span class="line">INCLUDE_DIRECTORIES( $&#123;VXL_VNL_INCLUDE_DIR&#125; )</span><br><span class="line"></span><br><span class="line">                          </span><br><span class="line">SET(IO_API_SRCS</span><br><span class="line">common.cpp</span><br><span class="line"></span><br><span class="line"> )</span><br><span class="line"> </span><br><span class="line">file(GLOB_RECURSE IO_API_HDRS </span><br><span class="line">common.h</span><br><span class="line"></span><br><span class="line"> )</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ADD_LIBRARY(io_api $&#123;API_LIBRARY_TYPE&#125; $&#123;IO_API_SRCS&#125; $&#123;IO_API_HDRS&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET( VNL $&#123;VNL&#125; vnl_example.cpp )</span><br><span class="line">ADD_EXECUTABLE( VNL $&#123;VNL&#125;)</span><br><span class="line">TARGET_LINK_LIBRARIES( VNL io_api vnl_algo vnl vcl netlib)</span><br></pre></td></tr></table></figure><p>自己照着编写的一些简单的使用例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************/</span></span><br><span class="line"><span class="comment">//该程序主要是为了学习使用VXL这个库而制作的</span></span><br><span class="line"><span class="comment">//数字vnl库旨在为数字编程提供一个环境，结合了Mathematica和Matlab等软件的易用性，C的速度和C++的优雅。</span></span><br><span class="line"><span class="comment">/**************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************/</span></span><br><span class="line"><span class="comment">//矩阵的模板类</span></span><br><span class="line"><span class="comment">/*************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vnl/vnl_matrix.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vcl_iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个矩阵A而不给它设定大小</span></span><br><span class="line">vnl_matrix&lt;<span class="keyword">double</span>&gt; A;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"A_rows=%d \t A_cols=%d\n"</span>, A.rows(), A.cols());</span><br><span class="line"><span class="comment">//定义一个矩阵B设定大小为3*5的矩阵,但是不给初值</span></span><br><span class="line">vnl_matrix&lt;<span class="keyword">double</span>&gt; B(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"B_rows=%d \t B_cols=%d\n"</span>, B.rows(), B.cols());</span><br><span class="line"><span class="comment">//定义一个矩阵C设定大小为3*5的矩阵，并且给任意的初值，这里设置初值为1</span></span><br><span class="line">vnl_matrix&lt;<span class="keyword">double</span>&gt; C(<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"C_rows=%d \t C_cols=%d\n"</span>, C.rows(), C.cols());</span><br><span class="line"><span class="comment">//矩阵输出，这个格式跟C++很像，不过需要包含 vcl_iostream.h 这个头文件</span></span><br><span class="line">vcl_cerr &lt;&lt;<span class="string">" C 初值为1"</span>&lt;&lt; vcl_endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"C_rows=%d \t C_cols=%d\n"</span>, C.rows(), C.cols());</span><br><span class="line">vcl_cerr &lt;&lt; C &lt;&lt; vcl_endl;</span><br><span class="line"><span class="comment">//定义一个矩证D，初值为0</span></span><br><span class="line">vnl_matrix&lt;<span class="keyword">double</span>&gt; D(<span class="number">3</span>, <span class="number">3</span>, vnl_matrix_null);</span><br><span class="line">vcl_cerr &lt;&lt;<span class="string">" D 初值为0  vnl_matrix_null"</span>&lt;&lt; vcl_endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"D_rows=%d \t D_cols=%d\n"</span>, D.rows(), D.cols());</span><br><span class="line">vcl_cerr &lt;&lt; D &lt;&lt; vcl_endl;</span><br><span class="line"><span class="comment">//单位矩阵</span></span><br><span class="line"><span class="comment">//定义一个 单位矩证 E ，单位矩阵的话，矩阵的长宽一定是一样大的</span></span><br><span class="line">vnl_matrix&lt;<span class="keyword">double</span>&gt; E(<span class="number">3</span>, <span class="number">3</span>, vnl_matrix_identity);</span><br><span class="line">vcl_cerr &lt;&lt;<span class="string">" E 单位阵  vnl_matrix_identity"</span>&lt;&lt; vcl_endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"E_rows=%d \t E_cols=%d\n"</span>, E.rows(), E.cols());</span><br><span class="line">vcl_cerr &lt;&lt; E &lt;&lt; vcl_endl;</span><br><span class="line"><span class="comment">//矩阵的前n位(第三个参数)自动被数组赋值，其他位不变，行优先</span></span><br><span class="line"><span class="keyword">double</span> f[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span> &#125;;</span><br><span class="line">vnl_matrix&lt;<span class="keyword">double</span>&gt; F(<span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, f);</span><br><span class="line">vcl_cerr &lt;&lt; <span class="string">" F 前n位被数组自动赋值"</span> &lt;&lt; vcl_endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"F_rows=%d \t F_cols=%d\n"</span>, F.rows(), F.cols());</span><br><span class="line">vcl_cerr &lt;&lt; F &lt;&lt; vcl_endl;</span><br><span class="line"><span class="comment">//矩阵</span></span><br><span class="line"><span class="keyword">double</span> g[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span> &#125;;</span><br><span class="line">vnl_matrix&lt;<span class="keyword">double</span>&gt; G(g, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">vcl_cerr &lt;&lt; <span class="string">" G 被一块内存初始化"</span> &lt;&lt; vcl_endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"G_rows=%d \t G_cols=%d\n"</span>, G.rows(), G.cols());</span><br><span class="line">vcl_cerr &lt;&lt; G &lt;&lt; vcl_endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 工具的使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CMakeLists的编写</title>
      <link href="/2017/11/01/CMakeLists%E7%9A%84%E7%BC%96%E5%86%99/"/>
      <url>/2017/11/01/CMakeLists%E7%9A%84%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CMake工具的理解"><a href="#CMake工具的理解" class="headerlink" title="CMake工具的理解"></a>CMake工具的理解</h1><p>CMake是一个很方便的跨平台编译的软件，他可以输出各种各样的makefile或者project文件。<br><a id="more"></a><br>因为本人经常需要将windows上编写的程序放到linux上进行编译运行等，所以如果自己手动去一个一个编译，去链接各种库；这个时候CMake就可以帮助我们来解决这些麻烦的问题，他不仅仅可以帮助我们生成相应的makefile和project，还会帮助我们去查找系统中所安装的一些依赖库，帮我们做好链接工作【当然，如果我们有些库没有设置环境变量的话，可能会找不到，但是这个时候在windows上我们可以手动添加，在linux上面我们可以通过ccmake来进入可视化界面进行添加或者使用cmake后面加上指令进行添加】。</p><p>当然CMake工具也要知道我们的工程需要干什么等，这个时候我们就需要编写CMakeLists.txt文件来告诉计算机我这个工程用到了哪些库，里面的文件是如何链接的等。</p><h1 id="CMakeLists-txt的编写"><a href="#CMakeLists-txt的编写" class="headerlink" title="CMakeLists.txt的编写"></a>CMakeLists.txt的编写</h1><p>下面是我自己编写的一个例子：</p><p>在这个例子中，我生成了一个名字叫VNL的工程，并且在该工程中我链接了VXL这个库,并且有一个IO接口，这个IO中我们可以编写自己的函数然后生成lib供主函数来调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=========================================================================</span></span><br><span class="line"><span class="comment"># $Author$</span></span><br><span class="line"><span class="comment"># $Date$</span></span><br><span class="line"><span class="comment"># $Revision$</span></span><br><span class="line"><span class="comment">#=========================================================================</span></span><br><span class="line"></span><br><span class="line">CMAKE_MINIMUM_REQUIRED(VERSION 2.4)</span><br><span class="line">IF(COMMAND cmake_policy)</span><br><span class="line">    cmake_policy(SET CMP0003 NEW)</span><br><span class="line">ENDIF(COMMAND cmake_policy)</span><br><span class="line"></span><br><span class="line">PROJECT(VNL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FIND_PACKAGE(VXL)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">IF(VXL_FOUND)</span><br><span class="line">  INCLUDE(<span class="variable">$&#123;VXL_CMAKE_DIR&#125;</span>/UseVXL.cmake)</span><br><span class="line">ENDIF(VXL_FOUND)</span><br><span class="line"></span><br><span class="line">IF(WIN32)</span><br><span class="line">ADD_DEFINITIONS(-D_ALLOW_KEYWORD_MACROS)</span><br><span class="line">ENDIF(WIN32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#IF( VXL_VNL_FOUND )  </span></span><br><span class="line">INCLUDE_DIRECTORIES( <span class="variable">$&#123;VXL_VNL_INCLUDE_DIR&#125;</span> )</span><br><span class="line"></span><br><span class="line">                          </span><br><span class="line">SET(IO_API_SRCS</span><br><span class="line">common.cpp</span><br><span class="line"></span><br><span class="line"> )</span><br><span class="line"> </span><br><span class="line">file(GLOB_RECURSE IO_API_HDRS </span><br><span class="line">common.h</span><br><span class="line"></span><br><span class="line"> )</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ADD_LIBRARY(io_api <span class="variable">$&#123;API_LIBRARY_TYPE&#125;</span> <span class="variable">$&#123;IO_API_SRCS&#125;</span> <span class="variable">$&#123;IO_API_HDRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET( VNL <span class="variable">$&#123;VNL&#125;</span> vnl_example.cpp )</span><br><span class="line">ADD_EXECUTABLE( VNL <span class="variable">$&#123;VNL&#125;</span>)</span><br><span class="line">TARGET_LINK_LIBRARIES( VNL io_api vnl_algo vnl vcl netlib)</span><br></pre></td></tr></table></figure><p>其他库的调用跟上面的方法类似，如果不会也可以自行百度。</p><p>例如下面是打开openmp并行的编写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FIND_PACKAGE( OpenMP REQUIRED)  </span><br><span class="line"><span class="keyword">if</span>(OPENMP_FOUND)  </span><br><span class="line">message(<span class="string">"OPENMP FOUND"</span>)  </span><br><span class="line"><span class="built_in">set</span>(CMAKE_C_FLAGS <span class="string">"<span class="variable">$&#123;CMAKE_C_FLAGS&#125;</span> <span class="variable">$&#123;OpenMP_C_FLAGS&#125;</span>"</span>)  </span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">"<span class="variable">$&#123;CMAKE_CXX_FLAGS&#125;</span> <span class="variable">$&#123;OpenMP_CXX_FLAGS&#125;</span>"</span>)  </span><br><span class="line"><span class="built_in">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="string">"<span class="variable">$&#123;CMAKE_EXE_LINKER_FLAGS&#125;</span> <span class="variable">$&#123;OpenMP_EXE_LINKER_FLAGS&#125;</span>"</span>)  </span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><h1 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h1><p>编写CMakelist的时候要注意一下各个的包含关系等，以及库的调用，还有名字等。</p>]]></content>
      
      
        <tags>
            
            <tag> 工具的使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GPU监测时问题解决</title>
      <link href="/2017/10/19/GPU%E7%9B%91%E6%B5%8B%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2017/10/19/GPU%E7%9B%91%E6%B5%8B%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="GPU监测时问题解决"><a href="#GPU监测时问题解决" class="headerlink" title="GPU监测时问题解决"></a>GPU监测时问题解决</h1><p>不管在我们使用服务器还是使用自己的桌面版本的时候，跑程序时一方面，有时候我们会监测一下电脑的资源使用情况,但是监测的时候我们可以能会遇到一些问题。<br><a id="more"></a><br>对于CPU资源的使用，我们可以使用top或者使用更高级的htop指令进行监测，这个里面包含了很多的信息。<br>对于GPU资源的使用，我们一般使用nvidia-smi来进行一个监测，因为该指令是一个静态的，所以如果我们想动态的监测GPU的使用情况，我们可以配合watch指令进行使用，watch -n 1 nvidia-smi.</p><p>以上是我们使用一些基本方法，但是我在监测GPU的时候，可能会遇到以下两个问题：</p><p>1、GPU明明没有在用，但是显示的时候却显示GPU的利用率却很高，但是再看功率的时候又可以肯定GPU并没有在使用；</p><p>2、当一个用户用GPU跑完程序后，关掉了程序，但是GPU依旧显示该程序占用内存。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>针对以上的两个问题，本人的解决方法如下</p><h2 id="GPU监测时显示不准确"><a href="#GPU监测时显示不准确" class="headerlink" title="GPU监测时显示不准确"></a>GPU监测时显示不准确</h2><p>对于GPU监测显示不准确时的指令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nvidia-smi -pm 1</span><br></pre></td></tr></table></figure></p><h2 id="GPU内存没有清零"><a href="#GPU内存没有清零" class="headerlink" title="GPU内存没有清零"></a>GPU内存没有清零</h2><p>对于程序结束了，但是GPU内存没有被清零的情况，解决方案如下：</p><p>使用nvidia-smi指令进行查找没有释放内存的程序的PID；<br>然后使用如下指令进行释放：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">kill</span> -9 PID</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://serverfault.com/questions/809038/why-is-my-cuda-gpu-util-70-when-there-are-no-running-processes-found" target="_blank" rel="noopener">https://serverfault.com/questions/809038/why-is-my-cuda-gpu-util-70-when-there-are-no-running-processes-found</a></p><p><a href="http://blog.csdn.net/lgh0824/article/details/77096241" target="_blank" rel="noopener">http://blog.csdn.net/lgh0824/article/details/77096241</a></p>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mathjax 使用</title>
      <link href="/2017/09/26/mathjax%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/09/26/mathjax%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML" async></script><p>$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $</p><script type="math/tex; mode=display">x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}</script>]]></content>
      
      
        <tags>
            
            <tag> mathjax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>互信息</title>
      <link href="/2017/09/17/%E4%BA%92%E4%BF%A1%E6%81%AF/"/>
      <url>/2017/09/17/%E4%BA%92%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="互信息"><a href="#互信息" class="headerlink" title="互信息"></a>互信息</h1><p>在做医学图像分割时需要用到互信息来计算两幅图像的相似度。之前写好了函数，在此备份。</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">MI_hhl</span><span class="params">(<span class="keyword">float</span> ***Img1, <span class="keyword">float</span> ***Img2, <span class="keyword">int</span> Image_X_Size, <span class="keyword">int</span> Image_Y_Size, <span class="keyword">int</span> Image_Z_Size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绘制直方图</span></span><br><span class="line"><span class="keyword">int</span> Hist_Img1[<span class="number">256</span>], Hist_Img2[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">256</span>; t++)</span><br><span class="line">&#123;</span><br><span class="line">Hist_Img1[t] = <span class="number">0</span>;</span><br><span class="line">Hist_Img2[t] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; Image_Z_Size; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Image_X_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;Image_Y_Size; j++)</span><br><span class="line">&#123;</span><br><span class="line">Hist_Img1[(<span class="keyword">int</span>)Img1[k][i][j]]++;</span><br><span class="line">Hist_Img2[(<span class="keyword">int</span>)Img2[k][i][j]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制两个图像的联合直方图</span></span><br><span class="line"><span class="keyword">int</span> Hist[<span class="number">256</span>][<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Hist[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; Image_Z_Size; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Image_X_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;Image_Y_Size; j++)</span><br><span class="line">&#123;</span><br><span class="line">Hist[(<span class="keyword">int</span>)Img1[k][i][j]][(<span class="keyword">int</span>)Img2[k][i][j]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算单个概率</span></span><br><span class="line"><span class="keyword">float</span> P_Img1[<span class="number">256</span>], P_Img2[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">float</span> all_number;</span><br><span class="line">all_number = Image_X_Size * Image_Y_Size * Image_Z_Size;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">256</span>; t++)</span><br><span class="line">&#123;</span><br><span class="line">P_Img1[t] = (<span class="keyword">float</span>)Hist_Img1[t] / all_number;</span><br><span class="line">P_Img2[t] = (<span class="keyword">float</span>)Hist_Img2[t] / all_number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算联合概率</span></span><br><span class="line"><span class="keyword">float</span> P_Hist[<span class="number">256</span>][<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">P_Hist[i][j] = (<span class="keyword">float</span>)Hist[i][j] / all_number;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算两个图像的互信息</span></span><br><span class="line"><span class="keyword">float</span> Mut_INF = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (P_Hist[i][j] == <span class="number">0</span> || P_Img1[i] == <span class="number">0</span> || P_Img2[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">Mut_INF += P_Hist[i][j] * <span class="built_in">log10</span>(P_Hist[i][j] / (P_Img1[i] * P_Img2[j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Mut_INF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 医学图像分割 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于距离的计算方法</title>
      <link href="/2017/09/17/%E5%9F%BA%E4%BA%8E%E8%B7%9D%E7%A6%BB%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/"/>
      <url>/2017/09/17/%E5%9F%BA%E4%BA%8E%E8%B7%9D%E7%A6%BB%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基于距离的计算方法"><a href="#基于距离的计算方法" class="headerlink" title="基于距离的计算方法"></a>基于距离的计算方法</h1><p>在因为之前项目中用到了欧氏距离，所以在网上看了一下，然后感觉还不错就转载到自己的笔记中。顺便测试了一下在博客中直接编写公式。</p><p>本文转自：<a href="http://blog.sina.com.cn/s/blog_52510b1d01015nrg.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_52510b1d01015nrg.html</a></p><a id="more"></a><h1 id="欧氏距离-Euclidean-Distance"><a href="#欧氏距离-Euclidean-Distance" class="headerlink" title="欧氏距离(Euclidean Distance)"></a>欧氏距离(Euclidean Distance)</h1><p>欧氏距离是最易于理解的一种距离计算方法，源自欧氏空间中两点间的距离公式。</p><p>(1)二维平面上两点a(x1,y1)与b(x2,y2)间的欧氏距离：</p><script type="math/tex; mode=display">d_{12}=\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}</script><p>(2)三维空间两点a(x1,y1,z1)与b(x2,y2,z2)间的欧氏距离：</p><script type="math/tex; mode=display">d_{12}=\sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2}</script><p>(3)两个n维向量a(x11,x12,…,x1n)与 b(x21,x22,…,x2n)间的欧氏距离：</p><script type="math/tex; mode=display">d_{12}=\sqrt{\sum_{k=1}^n(x_{1k}-x_{2k})^2}</script><p>也可以用表示成向量运算的形式：</p><script type="math/tex; mode=display">d_{12}=\sqrt{(a-b)(a-b)^T}</script><p>(4)Matlab计算欧氏距离</p><p>Matlab计算距离主要使用pdist函数。若X是一个M×N的矩阵，则pdist(X)将X矩阵M行的每一行作为一个N维向量，然后计算这M个向量两两间的距离。</p><p>例子：计算向量(0,0)、(1,0)、(0,2)两两间的欧式距离</p><p>X = [0 0 ; 1 0 ; 0 2]</p><p>D = pdist(X,’euclidean’)</p><p>结果：</p><p>D =</p><pre><code>1.0000    2.0000    2.2361</code></pre><h1 id="曼哈顿距离-Manhattan-Distance"><a href="#曼哈顿距离-Manhattan-Distance" class="headerlink" title="曼哈顿距离(Manhattan Distance)"></a>曼哈顿距离(Manhattan Distance)</h1><p>从名字就可以猜出这种距离的计算方法了。想象你在曼哈顿要从一个十字路口开车到另外一个十字路口，驾驶距离是两点间的直线距离吗？显然不是，除非你能穿越大楼。实际驾驶距离就是这个“曼哈顿距离”。而这也是曼哈顿距离名称的来源， 曼哈顿距离也称为<strong>城市街区距离(City Block distance)</strong>。</p><p>(1)二维平面两点a(x1,y1)与b(x2,y2)间的曼哈顿距离</p><script type="math/tex; mode=display">d_{12}=|x_1-x_2|+|y_1-y_2|</script><p>(2)两个n维向量a(x11,x12,…,x1n)与 b(x21,x22,…,x2n)间的曼哈顿距离</p><script type="math/tex; mode=display">d_{12}=\sum_{k=1}^n|x_{1k}-x_{2k}|</script><p>(3) Matlab计算曼哈顿距离</p><p>例子：计算向量(0,0)、(1,0)、(0,2)两两间的曼哈顿距离</p><p>X = [0 0 ; 1 0 ; 0 2]</p><p>D = pdist(X, ‘cityblock’)</p><p>结果：</p><p>D =</p><pre><code> 1     2     3</code></pre><h1 id="标准化欧氏距离-Standardized-Euclidean-distance"><a href="#标准化欧氏距离-Standardized-Euclidean-distance" class="headerlink" title="标准化欧氏距离(Standardized Euclidean distance )"></a>标准化欧氏距离(Standardized Euclidean distance )</h1><p>(1)标准欧氏距离的定义</p><p>标准化欧氏距离是针对简单欧氏距离的缺点而作的一种改进方案。标准欧氏距离的思路：既然数据各维分量的分布不一样，好吧！那我先将各个分量都“标准化”到均值、方差相等吧。均值和方差标准化到多少呢？这里先复习点统计学知识吧，假设样本集X的均值(mean)为m，标准差(standard deviation)为s，那么X的“标准化变量”表示为：</p><p>而且标准化变量的数学期望为0，方差为1。因此样本集的标准化过程(standardization)用公式描述就是：</p><script type="math/tex; mode=display">X^* = \frac{X-m}{s}</script><p>标准化后的值 =  ( 标准化前的值  － 分量的均值 ) /分量的标准差</p><p>经过简单的推导就可以得到两个n维向量a(x11,x12,…,x1n)与 b(x21,x22,…,x2n)间的标准化欧氏距离的公式：</p><script type="math/tex; mode=display">d_{12}=\sqrt{\sum_{k=1}^n(\frac{x_{1k}-x_{2k}}{s_k})^2}</script><p>如果将方差的倒数看成是一个权重，这个公式可以看成是一种<strong>加权欧氏距离(Weighted Euclidean distance)</strong>。</p><p>(2)Matlab计算标准化欧氏距离</p><p>例子：计算向量(0,0)、(1,0)、(0,2)两两间的标准化欧氏距离 (假设两个分量的标准差分别为0.5和1)</p><p>X = [0 0 ; 1 0 ; 0 2]</p><p>D = pdist(X, ‘seuclidean’,[0.5,1])</p><p>结果：</p><p>D =</p><pre><code>2.0000    2.0000    2.8284</code></pre><h1 id="夹角余弦-Cosine"><a href="#夹角余弦-Cosine" class="headerlink" title="夹角余弦(Cosine)"></a>夹角余弦(Cosine)</h1><p>有没有搞错，又不是学几何，怎么扯到夹角余弦了？各位看官稍安勿躁。几何中夹角余弦可用来衡量两个向量方向的差异，机器学习中借用这一概念来衡量样本向量之间的差异。</p><p>(1)在二维空间中向量A(x1,y1)与向量B(x2,y2)的夹角余弦公式：</p><script type="math/tex; mode=display">\cos \theta = \frac{x_1x_2+y_1y_2}{\sqrt{x_1^2+y_1^2} \sqrt{x_2^2+y_2^2}}</script><p>(2) 两个n维样本点a(x11,x12,…,x1n)和b(x21,x22,…,x2n)的夹角余弦</p><p>类似的，对于两个n维样本点a(x11,x12,…,x1n)和b(x21,x22,…,x2n)，可以使用类似于夹角余弦的概念来衡量它们间的相似程度。</p><script type="math/tex; mode=display">\cos(\theta)=\frac{a \cdot b}{|a||b|}</script><p>即：</p><script type="math/tex; mode=display">\cos(\theta)=\frac{\sum_{k=1}^n x_{1k}x_{2k}}{\sqrt{\sum_{k=1}^nx_{1k}^2}\sqrt{\sum_{k=1}^nx_{2k}^2}}</script><p>夹角余弦取值范围为[-1,1]。夹角余弦越大表示两个向量的夹角越小，夹角余弦越小表示两向量的夹角越大。当两个向量的方向重合时夹角余弦取最大值1，当两个向量的方向完全相反夹角余弦取最小值-1。</p><p>(3)Matlab计算夹角余弦</p><p>例子：计算(1,0)、( 1,1.732)、( -1,0)两两间的夹角余弦</p><p>X = [1 0 ; 1 1.732 ; -1 0]</p><p>D = 1- pdist(X, ‘cosine’)  % Matlab中的pdist(X, ‘cosine’)得到的是1减夹角余弦的值</p><p>结果：</p><p>D =</p><pre><code>    0.5000   -1.0000   -0.5000</code></pre>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh连接服务器中断，如何让命令继续在服务器执行</title>
      <link href="/2017/09/08/ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%96%AD%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%A9%E5%91%BD%E4%BB%A4%E7%BB%A7%E7%BB%AD%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%A7%E8%A1%8C/"/>
      <url>/2017/09/08/ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%96%AD%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%A9%E5%91%BD%E4%BB%A4%E7%BB%A7%E7%BB%AD%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%A7%E8%A1%8C/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ssh连接linux服务器中断后，如何让命令继续在服务器运行"><a href="#ssh连接linux服务器中断后，如何让命令继续在服务器运行" class="headerlink" title="ssh连接linux服务器中断后，如何让命令继续在服务器运行"></a>ssh连接linux服务器中断后，如何让命令继续在服务器运行</h1><p>这个问题也许是我们这些小白比较头疼的问题，尤其对于那些做机器学习需要花很久的时间才能训练出一个结果。然而就在这时，因为各种不可抗力我们使用ssh连接服务器时，ssh的窗口突然断开了连接，那么在服务器上跑的程序就也跟着断掉了，之前所有跑的数据也将丢失，这样将会浪费我们大量的时间。</p><a id="more"></a><p>今天刚好有人跟我提到了这个问题，然后就简单上网查找资料，简单的学习一下，做个笔记方便自己以后查阅。</p><p>参考链接：</p><p><a href="http://blog.csdn.net/gukesdo/article/details/6901902" target="_blank" rel="noopener">http://blog.csdn.net/gukesdo/article/details/6901902</a></p><h1 id="为什么ssh一旦断开我们的进程也将会被杀掉？"><a href="#为什么ssh一旦断开我们的进程也将会被杀掉？" class="headerlink" title="为什么ssh一旦断开我们的进程也将会被杀掉？"></a>为什么ssh一旦断开我们的进程也将会被杀掉？</h1><p>元凶：SIGHUP 信号</p><p>让我们来看看为什么关掉窗口/断开连接会使得正在运行的程序死掉。</p><p>在Linux/Unix中，有这样几个概念：</p><p>进程组（process group）：一个或多个进程的集合，每一个进程组有唯一一个进程组ID，即进程组长进程的ID。 </p><p>会话期（session）：一个或多个进程组的集合，有唯一一个会话期首进程（session leader）。会话期ID为首进程的ID。 </p><p>会话期可以有一个单独的控制终端（controlling terminal）。与控制终端连接的会话期首进程叫做控制进程（controlling process）。当前与终端交互的进程称为前台进程组。其余进程组称为后台进程组。</p><p>根据POSIX.1定义：</p><p>挂断信号（SIGHUP）默认的动作是终止程序。 </p><p>当终端接口检测到网络连接断开，将挂断信号发送给控制进程（会话期首进程）。 </p><p>如果会话期首进程终止，则该信号发送到该会话期前台进程组。 </p><p>一个进程退出导致一个孤儿进程组中产生时，如果任意一个孤儿进程组进程处于STOP状态，发送SIGHUP和SIGCONT信号到该进程组中所有进程。 </p><p>因此当网络断开或终端窗口关闭后，控制进程收到SIGHUP信号退出，会导致该会话期内其他进程退出。</p><p><strong>这里我认为我们的进程被杀掉也就是因为ssh与服务器之间的通信断掉了，这个通信断掉之后linux程序就默认将该连接下的所有进程都杀掉</strong></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>针对上面的问题，上面的参考链接中也有讲解，在此进行一个简单的整理。</p><p>这里主要有三个方案，一个是使用nohup指令，一个是使用screen指令，最后一个是screen的升级版byobu。看完这三个指令之后其实<strong>我更倾向于使用byobu指令，因为byobu指令更加的强大,是screen的升级版本，并且界面也比较友好。</strong></p><h2 id="nohup命令"><a href="#nohup命令" class="headerlink" title="nohup命令"></a>nohup命令</h2><p>nohup命令参考</p><p>　　nohup 命令</p><p>　　用途：不挂断地运行命令。</p><p>语法：nohup Command [ Arg … ] [　&amp; ]</p><p>　　描述：nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令，忽略所有挂断(SIGHUP)信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; ( 表示”and”的符号)到命令的尾部。</p><p>无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。</p><h3 id="nohup的简单使用"><a href="#nohup的简单使用" class="headerlink" title="nohup的简单使用"></a>nohup的简单使用</h3><p>在执行命令时在命令前面加上nohup，然后回车开始运行。</p><p><strong>这时你会发现该有的输出其实并没有输出出来，这个时候不要方，这是因为nohup命令将你的所有输出都输出到了当前文件夹下的nohup.out文件中，自己可以使用vim指令进行一个查看。</strong></p><p>nohup命令及其输出文件<br>　　nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思( n ohang up)。<br>　　该命令的一般形式为：nohup command &amp;<br>　　使用nohup命令提交作业<br>　　如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：<br>　　nohup command &gt; myout.file 2&gt;&amp;1 &amp;</p><p><strong>使用 jobs 查看任务。</strong></p><p><strong>使用 fg %n　关闭。</strong></p><h2 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h2><p>简单来说，Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。在screen中创建一个新的窗口有这样几种方式：</p><p>1．直接在命令行键入screen命令</p><p>$ screen<br>Screen将创建一个执行shell的全屏窗口。你可以执行任意shell程序，就像在ssh窗口中那样。在该窗口中键入exit退出该窗口，如果这是该screen会话的唯一窗口，该screen会话退出，否则screen自动切换到前一个窗口。</p><p>2．Screen命令后跟你要执行的程序。</p><p>$ screen 【后面跟你执行程序的命令】</p><p>Screen创建一个执行vi test.c的单窗口会话，退出vi将退出该窗口/会话。</p><p>3．以上两种方式都创建新的screen会话。我们还可以在一个已有screen会话中创建新的窗口。在当前screen窗口中键入C-a c ，即Ctrl键+a键，之后再按下c键，screen 在该会话内生成一个新的窗口并切换到该窗口。</p><p>screen还有更高级的功能。你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。</p><h3 id="screen的简单使用"><a href="#screen的简单使用" class="headerlink" title="screen的简单使用"></a>screen的简单使用</h3><p>在所要执行的指令前添加screen.然后程序的运行等一切正常。（nohup的输出是定向到了nohup.out文件中，然而screen指令的输出是直接输出到了屏幕上的）</p><p>这个时候如果ssh终端断开了连接。我们只需要再次连接服务器然后输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure><p>然后会得到类似下面的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">There is a screen on:</span><br><span class="line">27267.pts-19.TITAN-X(09/08/2017 03:49:10 PM)(Detached)</span><br><span class="line">1 Socket <span class="keyword">in</span> /var/run/screen/S-huanghailiang.</span><br></pre></td></tr></table></figure><p>这里就会显示ssh断开之前的程序，<strong><em>其实断开后程序依然在后台在运行</em></strong>，只是我们这个时候需要将它放到前台来运行。这个时候我们们已经通过screen -ls查询到了线程号是27267了，所以我们只需要执行下面的指令即可恢复到前台了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r 27267</span><br></pre></td></tr></table></figure><p>如果想杀掉终端可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> 27267</span><br></pre></td></tr></table></figure><p>其他更多的指令可以通过screen —help来进行学习。</p><p>当然screen还有更多的快捷键值得我们学习。我们可以通过C-a ? 即先按ctrl+a以后再按？即可查看。</p><p><strong>通过观察我们可以发现它其实恢复了我们ssh断开前的那个界面。（所有的输出也都会在此显示出来）</strong></p><h2 id="byobu命令"><a href="#byobu命令" class="headerlink" title="byobu命令"></a>byobu命令</h2><p>byobu感觉就是screen的一个升级版本，界面比较友好，操作也比较方便。<br>一般Ubuntu系统开始的时候默认没有安装，我们需要手动安装byobu:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install byobu</span><br></pre></td></tr></table></figure><h3 id="byobu的基本简单操作"><a href="#byobu的基本简单操作" class="headerlink" title="byobu的基本简单操作"></a>byobu的基本简单操作</h3><div class="table-container"><table><thead><tr><th>按键</th><th>说明</th></tr></thead><tbody><tr><td>F2</td><td>新建窗口</td></tr><tr><td>F3</td><td>移动到前一个窗口</td></tr><tr><td>F4</td><td>移动到后一个窗口</td></tr><tr><td>F6</td><td>退出byobu窗口</td></tr><tr><td>F9</td><td>打开byobu菜单，查看帮助信息的配置信息</td></tr></tbody></table></div><p>关闭当前窗口其实Ctrl+D就可以完成</p><p>剩余操作我们可以F9查看byobu的帮助即可。</p><p>如果我们想要一登陆就显示byobu界面的话，可以使用指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byobu-enable</span><br></pre></td></tr></table></figure></p><p>如果想取消一登陆就显示byobu界面可以是用指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byobu-disable</span><br></pre></td></tr></table></figure></p><h1 id="注（个人理解）："><a href="#注（个人理解）：" class="headerlink" title="注（个人理解）："></a>注（个人理解）：</h1><p><strong>nohup</strong>虽然可以把所有的输出都写入到nohup.out中间来，但是在面对需要人机交互的时候它就不能正常使用了。另外在我做测试的时候，一旦ssh断开，虽然程序还在后台运行，但是好像并不会再把输出写入到nohup.out文件中，这一点很不好。</p><p><strong>screen</strong>相比之下就强大了很多，不仅可以满足人机交互，而且还可以将所有的输出都再次展示出来，方便我们查看。我对screen的理解是，其实它是一个虚拟的终端，我们运行的时候screen指令就为我们创建了一个虚拟的终端，所以我们再次连接后我们打开的还是这个虚拟的终端，所以我们可以更好的进行操作，而且screen支持开很多个终端。</p><p><strong>byobu</strong>相比之下继承了screen的所有优点，并且拥有了更加方便快捷的操作界面，同时在界面下方还能很好的显示目前计算机的硬件使用情况，十分方便。</p><p>它们三者的共性我认为都已经不受SIGHUP信号的影响了，所以即使断掉了ssh程序依旧会运行。</p>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速哈达玛变换</title>
      <link href="/2017/09/06/%E5%BF%AB%E9%80%9F%E5%93%88%E8%BE%BE%E7%8E%9B%E5%8F%98%E6%8D%A2/"/>
      <url>/2017/09/06/%E5%BF%AB%E9%80%9F%E5%93%88%E8%BE%BE%E7%8E%9B%E5%8F%98%E6%8D%A2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快速哈达玛变换"><a href="#快速哈达玛变换" class="headerlink" title="快速哈达玛变换"></a>快速哈达玛变换</h1><p>在生成哈达玛矩阵的文章中我已经提到了沃尔什函数，其实也就是快速哈达玛变换，他是针对与压缩感知中压缩过程中对哈达玛矩阵的行进行一个变换，这么做可以更好的压缩图像，并更好的进行解压。</p><a id="more"></a><h1 id="快速哈达玛矩阵的代码实现"><a href="#快速哈达玛矩阵的代码实现" class="headerlink" title="快速哈达玛矩阵的代码实现"></a>快速哈达玛矩阵的代码实现</h1><p>简单的实现就是写成二进制表示没然后保存反向格雷码就是新矩阵所对应的行号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;<span class="comment">//需要转换的数</span></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gray_number</span><span class="params">(<span class="keyword">int</span> num_h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  binary[<span class="number">30</span>];<span class="comment">//保存反向二进制的值 </span></span><br><span class="line"><span class="keyword">int</span>  Gray[<span class="number">30</span>];<span class="comment">//保存反向格雷码 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////</span></span><br><span class="line"><span class="keyword">int</span> M_m = M - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> M_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">M_m = M_m / <span class="number">2</span>;</span><br><span class="line">M_num++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"M_num=%d"</span>, M_num);</span><br><span class="line"><span class="keyword">if</span> (M_m == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////////////////////</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"num_h=%d"</span>, num_h);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">binary[i] = num_h % <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\ni=%d  binary[i]=%d\n"</span>, i, binary[i]);</span><br><span class="line">num_h = num_h / <span class="number">2</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (num_h == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\ni=%d\n"</span>, i);</span><br><span class="line"><span class="keyword">for</span> (i = i; i&lt;M_num; i++)</span><br><span class="line">&#123;</span><br><span class="line">binary[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\ni=%d  binary[i]=%d\n"</span>, i, binary[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////////////</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"binary[j]=%d   %d\n"</span>, binary[j], j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%d"</span>, i);</span><br><span class="line"><span class="comment">//得到反向的格雷码</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>, Gray_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;i - <span class="number">1</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((binary[k] - binary[k + <span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Gray_num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Gray_num = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Gray[k] = Gray_num;</span><br><span class="line">&#125;</span><br><span class="line">Gray[i - <span class="number">1</span>] = binary[i - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nGray\n"</span>, i);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, Gray[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nlast number\n"</span>, i);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">&#123;</span><br><span class="line">number += Gray[j] * <span class="built_in">pow</span>((<span class="keyword">double</span>)<span class="number">2</span>, (<span class="keyword">int</span>)(i - j - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"number=%d"</span>, number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Gray_number(num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"number=%d"</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 常用的C语言小程序代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>生成哈达玛矩阵</title>
      <link href="/2017/09/06/%E7%94%9F%E6%88%90%E5%93%88%E8%BE%BE%E7%8E%9B%E7%9F%A9%E9%98%B5/"/>
      <url>/2017/09/06/%E7%94%9F%E6%88%90%E5%93%88%E8%BE%BE%E7%8E%9B%E7%9F%A9%E9%98%B5/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="哈达玛矩阵是什么"><a href="#哈达玛矩阵是什么" class="headerlink" title="哈达玛矩阵是什么"></a>哈达玛矩阵是什么</h1><p>哈达玛（Hadamard)矩阵是由+1和-1元素构成的正交方阵。所谓正交方阵，指它的任意两行（或两列）都是正交的，且任意一行（列）的所有元素的平方和等于方阵的阶数。即：设A为n阶由+1和-1元素构成的方阵，若AA‘=nI（这里A’为A的转置，I为单位方阵），则称A为n阶Hadamard矩阵。<br>　　已有人证明，Hadamard矩阵的阶数都是4的倍数。</p><a id="more"></a><h1 id="哈达玛矩阵的应用"><a href="#哈达玛矩阵的应用" class="headerlink" title="哈达玛矩阵的应用"></a>哈达玛矩阵的应用</h1><p>本人使用哈达玛矩阵是在压缩感知中知道的，在压缩中进行快速哈达玛变换（沃尔什函数）的变换以后就可以进行图像压缩，之后在运用TVAL3算法就可以进行一个解压缩，来还原原来的图像。现在的压缩比基本都在10%之下。</p><h1 id="哈达玛矩阵生成的代码"><a href="#哈达玛矩阵生成的代码" class="headerlink" title="哈达玛矩阵生成的代码"></a>哈达玛矩阵生成的代码</h1><p>这里的M和N表示矩阵的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 32 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 32</span></span><br><span class="line"><span class="keyword">int</span> Hadamard[M][N];</span><br><span class="line"><span class="comment">//生成哈达玛矩阵的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateHadmard</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> k, temp, result = <span class="number">0</span>;</span><br><span class="line">temp = i&amp;j;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;<span class="number">32</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">result = result + (temp &gt;&gt; k) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (result % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"生成哈达玛矩阵\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;M; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;N; j++)</span><br><span class="line">&#123;</span><br><span class="line">Hadamard[i][j] = CreateHadmard(i, j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>, Hadamard[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 常用的C语言小程序代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言读取系统当前时间</title>
      <link href="/2017/09/06/C%E8%AF%AD%E8%A8%80%E8%AF%BB%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
      <url>/2017/09/06/C%E8%AF%AD%E8%A8%80%E8%AF%BB%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C语言读取系统当前时间"><a href="#C语言读取系统当前时间" class="headerlink" title="C语言读取系统当前时间"></a>C语言读取系统当前时间</h1><p>之前编程的时候我们需要来读取当前的时间，或者使用当前的时间对文件进行一个命名等，所以做一个笔记用来备忘。</p><a id="more"></a><h2 id="读取时间代码"><a href="#读取时间代码" class="headerlink" title="读取时间代码"></a>读取时间代码</h2><p><strong>C语言读取系统时间的代码如下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> timep,Tim;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">p</span>;</span></span><br><span class="line">time(&amp;timep);</span><br><span class="line">p =  localtime(&amp;timep); <span class="comment">//此函数获得的tm结构体的时间，是已经进行过时区转化为本地时间     </span></span><br><span class="line"><span class="comment">//p = gmtime(&amp;timep); //把日期和时间转换为格林威治(GMT)时间的函数 </span></span><br><span class="line"><span class="keyword">int</span> Year = <span class="number">1900</span> + p-&gt;tm_year;</span><br><span class="line"><span class="keyword">int</span> Month = <span class="number">1</span> + p-&gt;tm_mon;</span><br><span class="line"><span class="keyword">int</span> Day = p-&gt;tm_mday;</span><br><span class="line"><span class="keyword">int</span> Hour = p-&gt;tm_hour;</span><br><span class="line"><span class="keyword">int</span> Minute = p-&gt;tm_min;</span><br><span class="line"><span class="keyword">int</span> Second = p-&gt;tm_sec;</span><br><span class="line"><span class="keyword">char</span> year[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> month[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> day[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> hour[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> minute[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> second[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"year=%d\n"</span>,Year);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"month=%d\n"</span>, Month);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"day=%d\n"</span>, Day);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hour=%d\n"</span>, Hour);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"minute=%d\n"</span>, Minute);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"second=%d\n"</span>, Second);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为简单的系统时间读取。<br>在Windows环境下好像运行是有问题的，这个时候需要在预编译头那里添加 _CRT_SECURE_NO_WARNINGS即可。</p><p><strong>localtime</strong>函数获得的tm结构体的时间，是已经进行过时区转化为本地时间，然而gmtime函数是把日期和时间转换为格林威治(GMT)时间的函数。</p><h2 id="要用这个时间对文件进行命名"><a href="#要用这个时间对文件进行命名" class="headerlink" title="要用这个时间对文件进行命名"></a>要用这个时间对文件进行命名</h2><p>在我们进行编程的时候有时候需要对文件进行命名，有时候一个程序是不停的循环运行的，我们还要区分程序跑出来的文件结果，所以这个时候我们如果使用时间来对文件命名的话就会方便很多，而且一定不会因为重名而被覆盖。</p><p>这个时候我们可以用sprintf和strcat这两个函数进行一个组合。<br>简单的例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">char</span> name[<span class="number">100</span>] = <span class="string">"1616_"</span>;</span><br><span class="line"><span class="keyword">char</span> year[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> month[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> day[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> hour[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> minute[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> second[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> txt[<span class="number">5</span>] = <span class="string">".txt"</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(year, <span class="string">"%d"</span>, Year);</span><br><span class="line"><span class="built_in">sprintf</span>(month, <span class="string">"%d"</span>, Month);</span><br><span class="line"><span class="built_in">sprintf</span>(day, <span class="string">"%d"</span>, Day);</span><br><span class="line"><span class="built_in">sprintf</span>(hour, <span class="string">"%d"</span>, Hour);</span><br><span class="line"><span class="built_in">sprintf</span>(minute, <span class="string">"%d"</span>, Minute);</span><br><span class="line"><span class="built_in">sprintf</span>(second, <span class="string">"%d"</span>, Second);</span><br><span class="line"><span class="built_in">strcat</span>(name, year);</span><br><span class="line"><span class="built_in">strcat</span>(name, month);</span><br><span class="line"><span class="built_in">strcat</span>(name, day);</span><br><span class="line"><span class="built_in">strcat</span>(name, hour);</span><br><span class="line"><span class="built_in">strcat</span>(name, minute);</span><br><span class="line"><span class="built_in">strcat</span>(name, second);</span><br><span class="line"><span class="built_in">strcat</span>(name, txt);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 常用的C语言小程序代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用C语言自己写2048</title>
      <link href="/2017/09/05/2048/"/>
      <url>/2017/09/05/2048/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用C语言自己写2048"><a href="#用C语言自己写2048" class="headerlink" title="用C语言自己写2048"></a>用C语言自己写2048</h1><p>2048是之前非常火爆的一个游戏，记得之前上课的时候很多同学都在玩这个游戏。尤其是一些比较无聊的课上玩的人更多。那么我们应该如何用代码自己来实现2048这个游戏的编写呢？</p><a id="more"></a><p>之前在实验楼网站学习linux的时候碰巧看到了一个教程，所以就试着玩了一下，代码编写也很简单，当然我也无聊的玩到了2048，所以我发现其实实验楼上面给的代码也是有点小bug的，所以我对代码进行了一个简单的更改。</p><p>实验楼该教程网址：</p><p><a href="https://www.shiyanlou.com/courses/155" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/155</a></p><p><strong><em>下面就是操作及其我修改后的代码：</em></strong></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>要实现我们的 2048 小游戏，需要涉及一些数据结构的知识，以及一些 Linux 的系统调用。此外，为了方便在屏幕上使用字符绘图，我们还需要使用一个文本界面的屏幕绘图库 ncurses ，具体到操作就是在编译的时候需要加上 -lcurses 选项。</p><p>ncurses 库的安装操作如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure></p><h2 id="我修改后的代码"><a href="#我修改后的代码" class="headerlink" title="我修改后的代码"></a>我修改后的代码</h2><p>创建一个c文件，命名为2048.c</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4*4方格</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// 方格里空格的个数</span></span><br><span class="line"><span class="keyword">int</span> empty;</span><br><span class="line"><span class="keyword">int</span> old_y, old_x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw_one</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cnt_value</span><span class="params">(<span class="keyword">int</span> *new_y, <span class="keyword">int</span> *new_x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">game_over</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cnt_one</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    play();</span><br><span class="line">    endwin();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    initscr();</span><br><span class="line">    cbreak();</span><br><span class="line">    noecho();</span><br><span class="line">    curs_set(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    empty = <span class="number">15</span>;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    x = rand() % <span class="number">4</span>;</span><br><span class="line">    y = rand() % <span class="number">4</span>;</span><br><span class="line">    a[y][x] = <span class="number">2</span>;</span><br><span class="line">    draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, x, y;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">4</span>] = &#123;<span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    clear();</span><br><span class="line">    <span class="keyword">for</span>(n = <span class="number">0</span>; n &lt; <span class="number">9</span>; n += <span class="number">2</span>)   <span class="comment">//横线</span></span><br><span class="line">        <span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; <span class="number">21</span>; m++) &#123;</span><br><span class="line">            move(n, m);</span><br><span class="line">            addch(<span class="string">'-'</span>);</span><br><span class="line">            refresh();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; <span class="number">22</span>; m += <span class="number">5</span>)  <span class="comment">//竖线</span></span><br><span class="line">        <span class="keyword">for</span>(n = <span class="number">1</span>; n &lt; <span class="number">8</span>; n++) &#123;</span><br><span class="line">            move(n, m);</span><br><span class="line">            addch(<span class="string">'|'</span>);</span><br><span class="line">            refresh();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">4</span>; y++)     <span class="comment">//数字</span></span><br><span class="line">        <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++) &#123;</span><br><span class="line">            draw_one(y, x);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw_one</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, m, k, j;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">4</span>] = &#123;<span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    i = a[y][x];</span><br><span class="line">    m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        j = i % <span class="number">10</span>;</span><br><span class="line">        c[m++] = j + <span class="string">'0'</span>;</span><br><span class="line">        i = i / <span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &gt; <span class="number">0</span>);</span><br><span class="line">    m = <span class="number">0</span>;</span><br><span class="line">    k = (x + <span class="number">1</span>) * <span class="number">5</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(c[m] != <span class="string">'0'</span>) &#123;</span><br><span class="line">        move(<span class="number">2</span>*y+<span class="number">1</span>, k);</span><br><span class="line">        addch(c[m++]);</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, i, new_x, new_y, tmp;</span><br><span class="line">    <span class="keyword">int</span> old_empty, move;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        move = <span class="number">0</span>;</span><br><span class="line">        old_empty = empty;</span><br><span class="line">        <span class="comment">//draw();</span></span><br><span class="line">        ch = getch();</span><br><span class="line">        <span class="keyword">switch</span>(ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                <span class="comment">//从左向右消去相同方块</span></span><br><span class="line">                <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">4</span>; y++)</span><br><span class="line">                    <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">4</span>; ) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                            x++;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = x + <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(a[y][i] == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(a[y][x] == a[y][i]) &#123;</span><br><span class="line">                                        a[y][x] += a[y][i];</span><br><span class="line">                                        a[y][i] = <span class="number">0</span>;</span><br><span class="line">                                        x = i + <span class="number">1</span>;</span><br><span class="line">                                        empty++;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">else</span> &#123;</span><br><span class="line">                                        x = i;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//向左移动方块</span></span><br><span class="line">                <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">4</span>; y++)</span><br><span class="line">                    <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = x; (i &gt; <span class="number">0</span>) &amp;&amp; (a[y][i<span class="number">-1</span>] == <span class="number">0</span>); i--) &#123;</span><br><span class="line">                                a[y][i<span class="number">-1</span>] = a[y][i];</span><br><span class="line">                                a[y][i] = <span class="number">0</span>;</span><br><span class="line">                            move = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                <span class="comment">//从右向左消去相同方块</span></span><br><span class="line">                <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">4</span>; y++)</span><br><span class="line">                    <span class="keyword">for</span>(x = <span class="number">3</span>; x &gt;= <span class="number">0</span>; ) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                            x--;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = x - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(a[y][i] == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a[y][x] == a[y][i]) &#123;</span><br><span class="line">                                    a[y][x] += a[y][i];</span><br><span class="line">                                    a[y][i] = <span class="number">0</span>;</span><br><span class="line">                                    x = i - <span class="number">1</span>;</span><br><span class="line">                                    empty++;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    x = i;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//向右移动方块</span></span><br><span class="line">                <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">4</span>; y++)</span><br><span class="line">                    <span class="keyword">for</span>(x = <span class="number">3</span>; x &gt;= <span class="number">0</span>; x--) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = x; (i &lt; <span class="number">3</span>) &amp;&amp; (a[y][i+<span class="number">1</span>] == <span class="number">0</span>); i++) &#123;</span><br><span class="line">                                a[y][i+<span class="number">1</span>] = a[y][i];</span><br><span class="line">                                a[y][i] = <span class="number">0</span>;</span><br><span class="line">                            move = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'w'</span>:</span><br><span class="line">                <span class="comment">//从上向下消去相同方块</span></span><br><span class="line">                <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++)</span><br><span class="line">                    <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">4</span>; ) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                            y++;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = y + <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(a[i][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a[y][x] == a[i][x]) &#123;</span><br><span class="line">                                    a[y][x] += a[i][x];</span><br><span class="line">                                    a[i][x] = <span class="number">0</span>;</span><br><span class="line">                                    y = i + <span class="number">1</span>;</span><br><span class="line">                                    empty++;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    y = i;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            y = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//向上移动方块</span></span><br><span class="line">                <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++)</span><br><span class="line">                    <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">4</span>; y++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = y; (i &gt; <span class="number">0</span>) &amp;&amp; (a[i<span class="number">-1</span>][x] == <span class="number">0</span>); i--) &#123;</span><br><span class="line">                                a[i<span class="number">-1</span>][x] = a[i][x];</span><br><span class="line">                                a[i][x] = <span class="number">0</span>;</span><br><span class="line">                            move = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                <span class="comment">//从下向上消去相同方块</span></span><br><span class="line">                <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++)</span><br><span class="line">                    <span class="keyword">for</span>(y = <span class="number">3</span>; y &gt;= <span class="number">0</span>; ) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                            y--;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = y - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(a[i][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a[y][x] == a[i][x]) &#123;</span><br><span class="line">                                    a[y][x] += a[i][x];</span><br><span class="line">                                    a[i][x] = <span class="number">0</span>;</span><br><span class="line">                                    y = i <span class="number">-1</span>;</span><br><span class="line">                                    empty++;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    y = i;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            y = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//向下移动方块</span></span><br><span class="line">                <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++)</span><br><span class="line">                    <span class="keyword">for</span>(y = <span class="number">3</span>; y &gt;= <span class="number">0</span>; y--) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = y; (i &lt; <span class="number">3</span>) &amp;&amp; (a[i+<span class="number">1</span>][x] == <span class="number">0</span>); i++) &#123;</span><br><span class="line">                                a[i+<span class="number">1</span>][x] = a[i][x];</span><br><span class="line">                                a[i][x] = <span class="number">0</span>;</span><br><span class="line">                            move = <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'q'</span>:</span><br><span class="line">                game_over();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(empty &lt;= <span class="number">0</span>)</span><br><span class="line">            game_over();</span><br><span class="line">        draw();</span><br><span class="line">        <span class="comment">//生成新方块</span></span><br><span class="line">        <span class="keyword">if</span>((empty != old_empty) || (move == <span class="number">1</span>)) &#123;  <span class="comment">//修复了不移动或消除方块也生成新方块的bug</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                new_x = rand() % <span class="number">4</span>;</span><br><span class="line">                new_y = rand() % <span class="number">4</span>;</span><br><span class="line">            &#125;<span class="keyword">while</span>(a[new_y][new_x] != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            cnt_value(&amp;new_y, &amp;new_x);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                tmp = rand() % <span class="number">4</span>;</span><br><span class="line">            &#125;<span class="keyword">while</span>(tmp == <span class="number">0</span> || tmp == <span class="number">2</span>);</span><br><span class="line">            a[new_y][new_x] = tmp + <span class="number">1</span>;</span><br><span class="line">            empty--;</span><br><span class="line"></span><br><span class="line">            draw_one(new_y, new_x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cnt_one</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(y - <span class="number">1</span> &gt; <span class="number">0</span>)  </span><br><span class="line">                    a[y<span class="number">-1</span>][x] ? <span class="number">0</span> : value++;</span><br><span class="line">                <span class="keyword">if</span>(y + <span class="number">1</span> &lt; <span class="number">4</span>)</span><br><span class="line">                    a[y+<span class="number">1</span>][x] ? <span class="number">0</span> : value++;</span><br><span class="line">                <span class="keyword">if</span>(x - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                    a[y][x<span class="number">-1</span>] ? <span class="number">0</span> : value++;</span><br><span class="line">                <span class="keyword">if</span>(x + <span class="number">1</span> &lt; <span class="number">4</span>)</span><br><span class="line">                    a[y][x+<span class="number">1</span>] ? <span class="number">0</span> : value++;</span><br><span class="line">                <span class="keyword">if</span>(y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; x - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                    a[y<span class="number">-1</span>][x<span class="number">-1</span>] ? <span class="number">0</span> : value++;</span><br><span class="line">                <span class="keyword">if</span>(y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; x + <span class="number">1</span> &lt; <span class="number">4</span>)</span><br><span class="line">                    a[y<span class="number">-1</span>][x+<span class="number">1</span>] ? <span class="number">0</span> : value++;</span><br><span class="line">                <span class="keyword">if</span>(y + <span class="number">1</span> &lt; <span class="number">4</span> &amp;&amp; x - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                    a[y+<span class="number">1</span>][x<span class="number">-1</span>] ? <span class="number">0</span> : value++;</span><br><span class="line">                <span class="keyword">if</span>(y + <span class="number">1</span> &lt; <span class="number">4</span> &amp;&amp; x + <span class="number">1</span> &lt; <span class="number">4</span>)</span><br><span class="line">                    a[y+<span class="number">1</span>][x+<span class="number">1</span>] ? <span class="number">0</span> : value++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cnt_value</span><span class="params">(<span class="keyword">int</span> *new_y, <span class="keyword">int</span> *new_x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max_x, max_y, x, y, value;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    max = cnt_one(*new_y, *new_x);</span><br><span class="line">    <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">4</span>; y++)</span><br><span class="line">        <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[y][x]) &#123;</span><br><span class="line">                value = cnt_one(y, x);</span><br><span class="line">                <span class="keyword">if</span>(value &gt; max &amp;&amp; old_y != y &amp;&amp; old_x != x) &#123;  <span class="comment">//避免在同一位置反复出现新方块</span></span><br><span class="line">                    *new_y = y;</span><br><span class="line">                    *new_x = x;</span><br><span class="line">                    old_x = x;</span><br><span class="line">                    old_y = y;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">game_over</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    endwin();</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc 2048.c -o 2048 -lcurses</span><br></pre></td></tr></table></figure><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./2048</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>使用“w”;”a”;”s”;”d”;或者”W”;”A”;”S”;”D”来进行移动</p><p>效果图如下：</p><img src="/images/2048.png">]]></content>
      
      
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu server 硬盘挂载教程</title>
      <link href="/2017/09/05/Ubuntu-server-%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E6%95%99%E7%A8%8B/"/>
      <url>/2017/09/05/Ubuntu-server-%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-server-硬盘挂载教程"><a href="#Ubuntu-server-硬盘挂载教程" class="headerlink" title="Ubuntu server 硬盘挂载教程"></a>Ubuntu server 硬盘挂载教程</h1><p>在我们使用服务器的时候，因为使用的人比较多，而且目前做机器学习的人比较多，然而机器学习那边需要训练一些数据，训练集比较大，这就对于我们服务器的存储能力是一个较大的体验，所以一块硬盘已经不能满足我们的需求，我们需要使用多块硬盘来一起存储我们的数据，但是Ubuntu系统要识别多块硬盘需要我们自己配置。</p><a id="more"></a><p><strong>本人认为有以下几种方法：</strong></p><p>1、在安装Ubuntu系统的时候，我们可以手动配置挂载。（这个我们有尝试过，不过理论上应该是可以实现的，不过我们一般比较懒，所以会选择自动分配，这样我们比较省事。然而自动分配的话，系统会让你自己选择一个空硬盘或者一个连续的没有用的磁盘空间进行。）</p><p>2、设置磁盘阵列（比如raid），这个好像也是要在安装系统前进行。简单来说就是将多块磁盘的逻辑分区方放到一起来当作一块使用。（不知道这样的理解对不对，不过呢，个人感觉实际效果就是这个样子的）然后再正常安装选择硬盘的时候你会发现有一个很大的硬盘。（当然这种方法可能也有一些限制，比如两块硬盘的大小要一样等要求，需要自己去找）。</p><p><strong>如果系统已经装好了，我们要用上面的两种方法我觉得很不现实的，所以有些时候我们需要另想办法的。</strong></p><p>3、可以使用LVM技术来创建逻辑分区，这个我在网上看到过，网址如下，感觉讲的还是比较详细的。</p><p>参考网址：<a href="http://blog.csdn.net/it_yuan/article/details/19242445" target="_blank" rel="noopener">http://blog.csdn.net/it_yuan/article/details/19242445</a></p><p>4、可以直接使用硬盘进行挂载。（也试用于优盘的挂载，不过是服务器版本，一般我们自己用的桌面版本好像它会自动加载优盘的，服务器版本需要自己手动设置的）</p><p>参考网址：<a href="http://zwkufo.blog.163.com/blog/static/258825120141283942244/" target="_blank" rel="noopener">http://zwkufo.blog.163.com/blog/static/258825120141283942244/</a></p><p><strong><em>由于前3种方法我没有亲自尝试，所以这里暂时先不说了，不过网上教程也有的，后面如果有机会的话，我可能会补充进来。所以这里我就简单说一些第四种方法好了。</em></strong></p><h1 id="硬盘挂载"><a href="#硬盘挂载" class="headerlink" title="硬盘挂载"></a>硬盘挂载</h1><p>  1、 sudo fdisk –lu (查看当前硬盘及分区情况) 可以看到类似界面</p><img src="/images/硬盘挂载教程1.png"><p>  2、 sudo fdisk /dev/sdb(这里为想要挂载的硬盘名称)，利用该命令可以对硬盘进行分区，具体可以参考网址中的讲解更加详细</p><p>  3、 sudo mkfs –t ext4 /dev/sdb(硬盘格式化，-t ext4 表示将分区格式化成ext4文件系统类型)</p><p>  4、 sudo df –l(显示硬盘挂载情况)</p><p>  sudo mount –t ext4 /dev/sdb(想要挂载的硬盘) /devdata(目标挂载点)</p><p>  结束后可以用sudo df –l 查看是否成功</p><p>  5、 配置系统启动自动挂载，修改/etc/fstab文件，添加</p><p>  /devdata was on /dev/sdb</p><p>  UUID=37eaa526-5d96-4237-8468-603df5216ce9  /devdata(挂载点)   ext4   defaults     0     0</p><p>  UUID通过sudo blkid 可以查看</p><p>  其实好像输入/dev/sdb也是可以的，例如我在实验室服务器上面的挂载如下：</p><img src="/images/硬盘挂载教程2.png">]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git本地库的建立与使用</title>
      <link href="/2017/09/03/Git%E6%9C%AC%E5%9C%B0%E5%BA%93%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/09/03/Git%E6%9C%AC%E5%9C%B0%E5%BA%93%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git本地库的建立与使用"><a href="#Git本地库的建立与使用" class="headerlink" title="Git本地库的建立与使用"></a>Git本地库的建立与使用</h1><p>本笔记是自己在网上学习后整理后得到的，主要针对的是本地库的建立以及使用，对于远程库的操作这里暂时不涉及。</p><p>本教程的本地库的建立主要是在linux系统上建立，windows上可以使用命令行的git bash 或者带有图形界面的TortoiseGit进行操作，有兴趣的话可以自己学习一下。</p><a id="more"></a><h1 id="在linux版本上："><a href="#在linux版本上：" class="headerlink" title="在linux版本上："></a>在linux版本上：</h1><p>1、打开终端输入git，如果没有安装，按照提示指令进行安装。例如：sudo apt-get install git。如果已经安装会有如下显示<br><img src="/images/Git本地库的建立与使用1.png"></p><p>2、Git的配置<br>设置你的名字和email,就是你提交commit时的签名，每次提交记录里面都会包含这些信息。使用git config命令进行设置。<br><img src="/images/Git本地库的建立与使用2.png"></p><p>执行后会在根目录下建立一个叫.gitconfig的文件（该文件为隐藏文件需要使用ls -la查看到）</p><img src="/images/Git本地库的建立与使用3.png"><p>其中隐藏文件.gitconfig的内容可以使用vim或者cat进行查看</p><img src="/images/Git本地库的建立与使用4.png"><p>3、获取一个Git仓库，这里有两种方法，一种是直接clone一个仓库，另一个是初始化一个仓库。这里我们可以直接自己初始化一个仓库，当然clone仓库也是比较简单的，自己看一下就好。<br>首先需要自己创建一个仓库文件夹，路径什么的自己选择就好，创建使用mkdir就好。例如：mkdir project 就是创建了一个叫project的文件。这里我之前自己手动建立好了一个文件夹就直接使用cd命令进去就好了。初始化Git仓库使用git init命令，Git输出如下。</p><img src="/images/Git本地库的建立与使用5.png"><p>使用ls -la 可以看出来有一个.git目录被创建，意味着仓库被初始化。</p><p>4、git仓库已经被创建好了，接下来就是一些基本操作了。</p><p>   <strong>基本流程：</strong><br>（1）、创建或者修改文件<br>（2）、使用git add命令添加新创建或修改的文件到本地的缓存区（Index）。使用的时候是git add &lt;文件名&gt;或者git add <em> 这</em>说明添加当前文件夹下的所有文件。</p><img src="/images/Git本地库的建立与使用6.png"><p>（3）、使用git commit命令提交到本地代码库。git commit -m “双引号中间是你们提交代码时写的备注”   使用-m的目的是为了添加本次修改的注释，完成后就会记录一个新的版本。除了用git add命令，我们还可以使用git commit -a -m “双引号中间是你们提交代码时写的备注”  将所有没有加入到缓存区的修改也一起提交，但是 -a命令不能添加新建文件。<br><img src="/images/Git本地库的建立与使用7.png"></p><p>（4）（这一步我们的工程不需要，因为我们不需要同步到远程的代码库，因为同步到远程的代码库后相当于开源给了所有人,但是后期你们自己使用git的时候是可以使用的）使用git push命令将本地代码库同步到远端代码库。</p><p>git status命令查看当前git仓库的状态。</p><p>git commit提交了本地代码库以后，可以是使用git diff 命令再加上 —cached参数，看看缓存区中哪些文件被修改了。进入到git diff —cached界面后需要输入q才可以退出。如果没有 —cached参数，git diff会显示当前你所有已经做的但是没有加入到索引里的修改。所有修改完了以后都需要按照上面的步骤加上缓存区，在用commit提交到本地库。</p><p><strong>注：</strong>如果是修改文件，也需要使用git add命令添加到缓存区才可以提交。如果是删除文件，则直接使用git rm命令删除后悔自动将已删除文件的信息添加到缓存区，git commit提交后会将本地仓库中的对应文件删除。（【这一步我们不使用】如果本地仓库链接到了远程Git服务器，可以使用git push origin master 命令将本地仓库同步到远端服务器）。</p><p>5、git的基本操作以及介绍完了。但是基本都是个人操作的，下面介绍一下如果团队合作的话，每个人写一部分代码，最终合并的话，我们需要使用分支与合并的知识。</p><p>（1）、分支</p><p>使用 git branch &lt;分支名&gt;来创建分支。这里我将为大家每个人创建一个分支，分支名的命名方式我将使用*表示目前所在的分支。Master是默认的主分支。<br><img src="/images/Git本地库的建立与使用8.png"></p><p>使用git checkout  &lt;分支名&gt;来选择切换分支，例如下面我将会切换成我自己的分支：由图可以看到*已经跑到了hhl前面说明现在的分支是hhl。</p><img src="/images/Git本地库的建立与使用9.png"><p>切换到自己的分支以后可以自己更改自己的程序，这样并不会影响到其他分支的程序。</p><p>（2）、合并</p><p>可以使用git  merge命令来进行合并。例如想合并hhl分支到主分支，则需要先切换到主分支上git checkout master 然后再将hhl分支合并到主分支中，git merge  -m “这里双引号里面依旧是注释”  hhl</p><p>-m参数仍然是填写合并的注释信息。</p><p>注：如果如果两个想要合并的分支都对同一个文件进行了修改，则在合并的时候会有冲突。这个地方需要我们使用vim编辑器手动解决冲突，然后再add再commit提交。</p><p>（【这一步也不需要，后期自己使用可以先了解一下】，合并完分支后，如果想删除分支的话使用 git branch -d &lt;分支名&gt;，这个只针对已经被当前分支合并了的分支，如果你想要前置删除某个分支的话使用 git branch -D &lt;分支名&gt;）</p><p><strong>撤销合并：</strong>如果合并完以后，想要把当前修改都放弃，可以使用 git reset —hard HEAD^ 进行撤销合并。</p><p>6、查看日志</p><p>git log 命令可以显示所有的提交。如果提交的历史纪录很长，回车会逐步显示，输入q可以退出。</p><img src="/images/Git本地库的建立与使用10.png"><p>如果用git log —stat 它会显示在每个提交（commit）中哪些文件被修改，这些文件分别添加或删除多少行内容，这个命令相当于打印详细的提交记录。</p><p>小结，基本指令：</p><p>（1）git config :配置相关信息</p><p>（2）git clone ：复制仓库</p><p>（3）git init :初始化仓库</p><p>（4）git add ：添加更新内容到</p><p>（5）git diff :比较内容</p><p>（6）git status :获取当前项目状况</p><p>（7）git commit :提交</p><p>（8）git branch :分支相关</p><p>（9）git checkout :切换分支</p><p>（10）git merge :合并分支</p><p>（11）git reset :恢复版本</p><p>（12）git log :查看日志</p>]]></content>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图片转换成字符图</title>
      <link href="/2017/09/02/%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E5%9B%BE/"/>
      <url>/2017/09/02/%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E5%9B%BE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="图片转换成字符图"><a href="#图片转换成字符图" class="headerlink" title="图片转换成字符图"></a>图片转换成字符图</h1><p>因为之前写到了一些好玩的注释模板，当然网上有很多很多好玩的图片，我们不可能完全收集过来，当然也不可能正好有你自己所需要的图片，所以我们需要一个自己将图片转换成字符图的一个代码，这样我们就可以很方便的得到自己想得到的一些字符图。<br><a id="more"></a></p><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p>实验楼有该教程，个人觉得不错，还给了源码，所以摘抄代码下来学习<br><a href="https://www.shiyanlou.com/courses/370" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/370</a></p><h1 id="python实现源码"><a href="#python实现源码" class="headerlink" title="python实现源码"></a>python实现源码</h1><p>编写<strong>ascii.py</strong>源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令行输入参数处理</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'file'</span>)     <span class="comment">#输入文件</span></span><br><span class="line">parser.add_argument(<span class="string">'-o'</span>, <span class="string">'--output'</span>)   <span class="comment">#输出文件</span></span><br><span class="line">parser.add_argument(<span class="string">'--width'</span>, type = int, default = <span class="number">80</span>) <span class="comment">#输出字符画宽</span></span><br><span class="line">parser.add_argument(<span class="string">'--height'</span>, type = int, default = <span class="number">80</span>) <span class="comment">#输出字符画高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取参数</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">IMG = args.file</span><br><span class="line">WIDTH = args.width</span><br><span class="line">HEIGHT = args.height</span><br><span class="line">OUTPUT = args.output</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里的list可以自己定义</span></span><br><span class="line">ascii_char = list(<span class="string">"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\"^`'. "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将256灰度映射到70个字符上</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(r,g,b,alpha = <span class="number">256</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> alpha == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span></span><br><span class="line">    length = len(ascii_char)</span><br><span class="line">    gray = int(<span class="number">0.2126</span> * r + <span class="number">0.7152</span> * g + <span class="number">0.0722</span> * b)</span><br><span class="line"></span><br><span class="line">    unit = (<span class="number">256.0</span> + <span class="number">1</span>)/length</span><br><span class="line">    <span class="keyword">return</span> ascii_char[int(gray/unit)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    im = Image.open(IMG)</span><br><span class="line">    im = im.resize((WIDTH,HEIGHT), Image.NEAREST)</span><br><span class="line"></span><br><span class="line">    txt = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(HEIGHT):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(WIDTH):</span><br><span class="line">            txt += get_char(*im.getpixel((j,i)))</span><br><span class="line">        txt += <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> txt</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#字符画输出到文件</span></span><br><span class="line">    <span class="keyword">if</span> OUTPUT:</span><br><span class="line">        <span class="keyword">with</span> open(OUTPUT,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(txt)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"output.txt"</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(txt)</span><br></pre></td></tr></table></figure><h2 id="代码的运行"><a href="#代码的运行" class="headerlink" title="代码的运行"></a>代码的运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ascii.py ascii_dora.png</span><br></pre></td></tr></table></figure><h1 id="根据实验楼的效果展示"><a href="#根据实验楼的效果展示" class="headerlink" title="根据实验楼的效果展示"></a>根据实验楼的效果展示</h1><p>原图<br><img src="/images/ascii_dora.png"></p><p>效果图<br><img src="/images/dora_xiaoguo.png"></p>]]></content>
      
      
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>注释模板（仅供娱乐）</title>
      <link href="/2017/09/02/%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF%EF%BC%88%E4%BB%85%E4%BE%9B%E5%A8%B1%E4%B9%90%EF%BC%89/"/>
      <url>/2017/09/02/%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF%EF%BC%88%E4%BB%85%E4%BE%9B%E5%A8%B1%E4%B9%90%EF%BC%89/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="注释模板（仅供娱乐）"><a href="#注释模板（仅供娱乐）" class="headerlink" title="注释模板（仅供娱乐）"></a>注释模板（仅供娱乐）</h1><p>今天无意间在网上看到了一些好玩的注释，让我想起之前开始写代码的时候就已经有人开始在代码中添加这些东西，感觉挺好玩的，随手摘抄，仅供娱乐。<br><a id="more"></a></p><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="http://blog.csdn.net/ouyang_peng/article/details/51803181" target="_blank" rel="noopener">http://blog.csdn.net/ouyang_peng/article/details/51803181</a><br><a href="http://www.oschina.net/code/snippet_1046345_43901" target="_blank" rel="noopener">http://www.oschina.net/code/snippet_1046345_43901</a></p><h2 id="在VS中直接设置注释模板"><a href="#在VS中直接设置注释模板" class="headerlink" title="在VS中直接设置注释模板"></a>在VS中直接设置注释模板</h2><p>因为我只是觉得好玩，所以摘抄一下，具体设置可以参照上面第一个参考网址进行设置。</p><h1 id="佛祖保佑-永无bug"><a href="#佛祖保佑-永无bug" class="headerlink" title="佛祖保佑 永无bug"></a>佛祖保佑 永无bug</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *                             _ooOoo_</span></span><br><span class="line"><span class="comment"> *                            o8888888o</span></span><br><span class="line"><span class="comment"> *                            88" . "88</span></span><br><span class="line"><span class="comment"> *                            (| -_- |)</span></span><br><span class="line"><span class="comment"> *                            O\  =  /O</span></span><br><span class="line"><span class="comment"> *                         ____/`---'\____</span></span><br><span class="line"><span class="comment"> *                       .'  \\|     |//  `.</span></span><br><span class="line"><span class="comment"> *                      /  \\|||  :  |||//  \</span></span><br><span class="line"><span class="comment"> *                     /  _||||| -:- |||||-  \</span></span><br><span class="line"><span class="comment"> *                     |   | \\\  -  /// |   |</span></span><br><span class="line"><span class="comment"> *                     | \_|  ''\---/''  |   |</span></span><br><span class="line"><span class="comment"> *                     \  .-\__  `-`  ___/-. /</span></span><br><span class="line"><span class="comment"> *                   ___`. .'  /--.--\  `. . __</span></span><br><span class="line"><span class="comment"> *                ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</span></span><br><span class="line"><span class="comment"> *               | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment"> *               \  \ `-.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment"> *          ======`-.____`-.___\_____/___.-`____.-'======</span></span><br><span class="line"><span class="comment"> *                             `=---='</span></span><br><span class="line"><span class="comment"> *          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"><span class="comment"> *                     佛祖保佑        永无BUG</span></span><br><span class="line"><span class="comment"> *            佛曰:</span></span><br><span class="line"><span class="comment"> *                   写字楼里写字间，写字间里程序员；</span></span><br><span class="line"><span class="comment"> *                   程序人员写程序，又拿程序换酒钱。</span></span><br><span class="line"><span class="comment"> *                   酒醒只在网上坐，酒醉还来网下眠；</span></span><br><span class="line"><span class="comment"> *                   酒醉酒醒日复日，网上网下年复年。</span></span><br><span class="line"><span class="comment"> *                   但愿老死电脑间，不愿鞠躬老板前；</span></span><br><span class="line"><span class="comment"> *                   奔驰宝马贵者趣，公交自行程序员。</span></span><br><span class="line"><span class="comment"> *                   别人笑我忒疯癫，我笑自己命太贱；</span></span><br><span class="line"><span class="comment"> *                   不见满街漂亮妹，哪个归得程序员？</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//                          _ooOoo_                               //</span></span><br><span class="line"><span class="comment">//                         o8888888o                              //</span></span><br><span class="line"><span class="comment">//                         88" . "88                              //</span></span><br><span class="line"><span class="comment">//                         (| ^_^ |)                              //</span></span><br><span class="line"><span class="comment">//                         O\  =  /O                              //</span></span><br><span class="line"><span class="comment">//                      ____/`---'\____                           //</span></span><br><span class="line"><span class="comment">//                    .'  \\|     |//  `.                         //</span></span><br><span class="line"><span class="comment">//                   /  \\|||  :  |||//  \                        //</span></span><br><span class="line"><span class="comment">//                  /  _||||| -:- |||||-  \                       //</span></span><br><span class="line"><span class="comment">//                  |   | \\\  -  /// |   |                       //</span></span><br><span class="line"><span class="comment">//                  | \_|  ''\---/''  |   |                       //</span></span><br><span class="line"><span class="comment">//                  \  .-\__  `-`  ___/-. /                       //</span></span><br><span class="line"><span class="comment">//                ___`. .'  /--.--\  `. . ___                     //</span></span><br><span class="line"><span class="comment">//              ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".                  //</span></span><br><span class="line"><span class="comment">//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 //</span></span><br><span class="line"><span class="comment">//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 //</span></span><br><span class="line"><span class="comment">//      ========`-.____`-.___\_____/___.-`____.-'========         //</span></span><br><span class="line"><span class="comment">//                           `=---='                              //</span></span><br><span class="line"><span class="comment">//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //</span></span><br><span class="line"><span class="comment">//         佛祖保佑       永无BUG     永不修改                  //</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////</span></span><br></pre></td></tr></table></figure><h1 id="神兽保佑-代码无BUG！"><a href="#神兽保佑-代码无BUG！" class="headerlink" title="神兽保佑 代码无BUG！"></a>神兽保佑 代码无BUG！</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ┏┓　　　┏┓</span></span><br><span class="line"><span class="comment">// ┏┛┻━━━┛┻┓</span></span><br><span class="line"><span class="comment">// ┃　　　　　　　┃ 　</span></span><br><span class="line"><span class="comment">// ┃　　　━　　　┃</span></span><br><span class="line"><span class="comment">// ┃　┳┛　┗┳　┃</span></span><br><span class="line"><span class="comment">// ┃　　　　　　　┃</span></span><br><span class="line"><span class="comment">// ┃　　　┻　　　┃</span></span><br><span class="line"><span class="comment">// ┃　　　　　　　┃</span></span><br><span class="line"><span class="comment">// ┗━┓　　　┏━┛</span></span><br><span class="line"><span class="comment">// ┃　　　┃ 神兽保佑　　　　　　　　</span></span><br><span class="line"><span class="comment">// ┃　　　┃ 代码无BUG！</span></span><br><span class="line"><span class="comment">// ┃　　　┗━━━┓</span></span><br><span class="line"><span class="comment">// ┃　　　　　　　┣┓</span></span><br><span class="line"><span class="comment">// ┃　　　　　　　┏┛</span></span><br><span class="line"><span class="comment">// ┗┓┓┏━┳┓┏┛</span></span><br><span class="line"><span class="comment">// ┃┫┫　┃┫┫</span></span><br><span class="line"><span class="comment">// ┗┻┛　┗┻┛</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ━━━━━━神兽出没━━━━━━</span></span><br><span class="line"><span class="comment"> * 　　　┏┓　　　┏┓</span></span><br><span class="line"><span class="comment"> * 　　┏┛┻━━━┛┻┓</span></span><br><span class="line"><span class="comment"> * 　　┃　　　　　　　┃</span></span><br><span class="line"><span class="comment"> * 　　┃　　　━　　　┃</span></span><br><span class="line"><span class="comment"> * 　　┃　┳┛　┗┳　┃</span></span><br><span class="line"><span class="comment"> * 　　┃　　　　　　　┃</span></span><br><span class="line"><span class="comment"> * 　　┃　　　┻　　　┃</span></span><br><span class="line"><span class="comment"> * 　　┃　　　　　　　┃</span></span><br><span class="line"><span class="comment"> * 　　┗━┓　　　┏━┛Code is far away from bug with the animal protecting</span></span><br><span class="line"><span class="comment"> * 　　　　┃　　　┃    神兽保佑,代码无bug</span></span><br><span class="line"><span class="comment"> * 　　　　┃　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　┃　　　┗━━━┓</span></span><br><span class="line"><span class="comment"> * 　　　　┃　　　　　　　┣┓</span></span><br><span class="line"><span class="comment"> * 　　　　┃　　　　　　　┏┛</span></span><br><span class="line"><span class="comment"> * 　　　　┗┓┓┏━┳┓┏┛</span></span><br><span class="line"><span class="comment"> * 　　　　　┃┫┫　┃┫┫</span></span><br><span class="line"><span class="comment"> * 　　　　　┗┻┛　┗┻┛</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ━━━━━━感觉萌萌哒━━━━━━</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　┏┓　　　┏┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┏┛┻━━━┛┻┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　　　　　　　┃ 　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　　　━　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　＞　　　＜　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　　　　　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃...　⌒　...　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┃　　　　　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　┗━┓　　　┏━┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃   神兽保佑,代码无bug</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃  　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┃　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　┗━━━┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　　　　　┣┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃　　　　　　　┏┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┗┓┓┏━┳┓┏┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　　┃┫┫　┃┫┫</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　　┗┻┛　┗┻┛</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *　　　　　　　　┏┓　　　┏┓+ +</span></span><br><span class="line"><span class="comment"> *　　　　　　　┏┛┻━━━┛┻┓ + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　　　　　┃ 　</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　━　　　┃ ++ + + +</span></span><br><span class="line"><span class="comment"> *　　　　　　 ████━████ ┃+</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　　　　　┃ +</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　┻　　　┃</span></span><br><span class="line"><span class="comment"> *　　　　　　　┃　　　　　　　┃ + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　┗━┓　　　┏━┛</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃　　　┃　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃　　　┃ + + + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃　　　┃　　　　Code is far away from bug with the animal protecting　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃　　　┃ + 　　　　神兽保佑,代码无bug　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃　　　┃</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃　　　┃　　+　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃　 　　┗━━━┓ + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃ 　　　　　　　┣┓</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┃ 　　　　　　　┏┛</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　┃┫┫　┃┫┫</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　┗┻┛　┗┻┛+ + + +</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="程序员之歌"><a href="#程序员之歌" class="headerlink" title="程序员之歌"></a>程序员之歌</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *                      江城子 . 程序员之歌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *                  十年生死两茫茫，写程序，到天亮。</span></span><br><span class="line"><span class="comment"> *                      千行代码，Bug何处藏。</span></span><br><span class="line"><span class="comment"> *                  纵使上线又怎样，朝令改，夕断肠。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *                  领导每天新想法，天天改，日日忙。</span></span><br><span class="line"><span class="comment"> *                      相顾无言，惟有泪千行。</span></span><br><span class="line"><span class="comment"> *                  每晚灯火阑珊处，夜难寐，加班狂。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="其他好玩的图片"><a href="#其他好玩的图片" class="headerlink" title="其他好玩的图片"></a>其他好玩的图片</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">  .--,       .--,</span></span><br><span class="line"><span class="comment"> ( (  \.---./  ) )</span></span><br><span class="line"><span class="comment">  '.__/o   o\__.'</span></span><br><span class="line"><span class="comment">     &#123;=  ^  =&#125;</span></span><br><span class="line"><span class="comment">      &gt;  -  &lt;</span></span><br><span class="line"><span class="comment">     /       \</span></span><br><span class="line"><span class="comment">    //       \\</span></span><br><span class="line"><span class="comment">   //|   .   |\\</span></span><br><span class="line"><span class="comment">   "'\       /'"_.-~^`'-.</span></span><br><span class="line"><span class="comment">      \  _  /--'         `</span></span><br><span class="line"><span class="comment">    ___)( )(___</span></span><br><span class="line"><span class="comment">   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">                       ::</span></span><br><span class="line"><span class="comment">                      :;J7, :,                        ::;7:</span></span><br><span class="line"><span class="comment">                      ,ivYi, ,                       ;LLLFS:</span></span><br><span class="line"><span class="comment">                      :iv7Yi                       :7ri;j5PL</span></span><br><span class="line"><span class="comment">                     ,:ivYLvr                    ,ivrrirrY2X,</span></span><br><span class="line"><span class="comment">                     :;r@Wwz.7r:                :ivu@kexianli.</span></span><br><span class="line"><span class="comment">                    :iL7::,:::iiirii:ii;::::,,irvF7rvvLujL7ur</span></span><br><span class="line"><span class="comment">                   ri::,:,::i:iiiiiii:i:irrv177JX7rYXqZEkvv17</span></span><br><span class="line"><span class="comment">                ;i:, , ::::iirrririi:i:::iiir2XXvii;L8OGJr71i</span></span><br><span class="line"><span class="comment">              :,, ,,:   ,::ir@mingyi.irii:i:::j1jri7ZBOS7ivv,</span></span><br><span class="line"><span class="comment">                 ,::,    ::rv77iiiriii:iii:i::,rvLq@huhao.Li</span></span><br><span class="line"><span class="comment">             ,,      ,, ,:ir7ir::,:::i;ir:::i:i::rSGGYri712:</span></span><br><span class="line"><span class="comment">           :::  ,v7r:: ::rrv77:, ,, ,:i7rrii:::::, ir7ri7Lri</span></span><br><span class="line"><span class="comment">          ,     2OBBOi,iiir;r::        ,irriiii::,, ,iv7Luur:</span></span><br><span class="line"><span class="comment">        ,,     i78MBBi,:,:::,:,  :7FSL: ,iriii:::i::,,:rLqXv::</span></span><br><span class="line"><span class="comment">        :      iuMMP: :,:::,:ii;2GY7OBB0viiii:i:iii:i:::iJqL;::</span></span><br><span class="line"><span class="comment">       ,     ::::i   ,,,,, ::LuBBu BBBBBErii:i:i:i:i:i:i:r77ii</span></span><br><span class="line"><span class="comment">      ,       :       , ,,:::rruBZ1MBBqi, :,,,:::,::::::iiriri:</span></span><br><span class="line"><span class="comment">     ,               ,,,,::::i:  @arqiao.       ,:,, ,:::ii;i7:</span></span><br><span class="line"><span class="comment">    :,       rjujLYLi   ,,:::::,:::::::::,,   ,:i,:,,,,,::i:iii</span></span><br><span class="line"><span class="comment">    ::      BBBBBBBBB0,    ,,::: , ,:::::: ,      ,,,, ,,:::::::</span></span><br><span class="line"><span class="comment">    i,  ,  ,8BMMBBBBBBi     ,,:,,     ,,, , ,   , , , :,::ii::i::</span></span><br><span class="line"><span class="comment">    :      iZMOMOMBBM2::::::::::,,,,     ,,,,,,:,,,::::i:irr:i:::,</span></span><br><span class="line"><span class="comment">    i   ,,:;u0MBMOG1L:::i::::::  ,,,::,   ,,, ::::::i:i:iirii:i:i:</span></span><br><span class="line"><span class="comment">    :    ,iuUuuXUkFu7i:iii:i:::, :,:,: ::::::::i:i:::::iirr7iiri::</span></span><br><span class="line"><span class="comment">    :     :rk@Yizero.i:::::, ,:ii:::::::i:::::i::,::::iirrriiiri::,</span></span><br><span class="line"><span class="comment">     :      5BMBBBBBBSr:,::rv2kuii:::iii::,:i:,, , ,,:,:i@petermu.,</span></span><br><span class="line"><span class="comment">          , :r50EZ8MBBBBGOBBBZP7::::i::,:::::,: :,:,::i;rrririiii::</span></span><br><span class="line"><span class="comment">              :jujYY7LS0ujJL7r::,::i::,::::::::::::::iirirrrrrrr:ii:</span></span><br><span class="line"><span class="comment">           ,:  :@kevensun.:,:,,,::::i:i:::::,,::::::iir;ii;7v77;ii;i,</span></span><br><span class="line"><span class="comment">           ,,,     ,,:,::::::i:iiiii:i::::,, ::::iiiir@xingjief.r;7:i,</span></span><br><span class="line"><span class="comment">        , , ,,,:,,::::::::iiiiiiiiii:,:,:::::::::iiir;ri7vL77rrirri::</span></span><br><span class="line"><span class="comment">         :,, , ::::::::i:::i:::i:i::,,,,,:,::i:i:::iir;@Secbone.ii:::</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span></span><br><span class="line"><span class="comment"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐</span></span><br><span class="line"><span class="comment"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span></span><br><span class="line"><span class="comment"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span></span><br><span class="line"><span class="comment"> * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │</span></span><br><span class="line"><span class="comment"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span></span><br><span class="line"><span class="comment"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span></span><br><span class="line"><span class="comment"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span></span><br><span class="line"><span class="comment"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│" '│ Enter  │               │ 4 │ 5 │ 6 │   │</span></span><br><span class="line"><span class="comment"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span></span><br><span class="line"><span class="comment"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span></span><br><span class="line"><span class="comment"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span></span><br><span class="line"><span class="comment"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span></span><br><span class="line"><span class="comment"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> **************************************************************</span></span><br><span class="line"><span class="comment"> *                                                            *</span></span><br><span class="line"><span class="comment"> *   .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-.       *</span></span><br><span class="line"><span class="comment"> *    |                     ______                     |      *</span></span><br><span class="line"><span class="comment"> *    |                  .-"      "-.                  |      *</span></span><br><span class="line"><span class="comment"> *    |                 /            \                 |      *</span></span><br><span class="line"><span class="comment"> *    |     _          |              |          _     |      *</span></span><br><span class="line"><span class="comment"> *    |    ( \         |,  .-.  .-.  ,|         / )    |      *</span></span><br><span class="line"><span class="comment"> *    |     &gt; "=._     | )(__/  \__)( |     _.=" &lt;     |      *</span></span><br><span class="line"><span class="comment"> *    |    (_/"=._"=._ |/     /\     \| _.="_.="\_)    |      *</span></span><br><span class="line"><span class="comment"> *    |           "=._"(_     ^^     _)"_.="           |      *</span></span><br><span class="line"><span class="comment"> *    |               "=\__|IIIIII|__/="               |      *</span></span><br><span class="line"><span class="comment"> *    |              _.="| \IIIIII/ |"=._              |      *</span></span><br><span class="line"><span class="comment"> *    |    _     _.="_.="\          /"=._"=._     _    |      *</span></span><br><span class="line"><span class="comment"> *    |   ( \_.="_.="     `--------`     "=._"=._/ )   |      *</span></span><br><span class="line"><span class="comment"> *    |    &gt; _.="                            "=._ &lt;    |      *</span></span><br><span class="line"><span class="comment"> *    |   (_/                                    \_)   |      *</span></span><br><span class="line"><span class="comment"> *    |                                                |      *</span></span><br><span class="line"><span class="comment"> *    '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-='      *</span></span><br><span class="line"><span class="comment"> *                                                            *</span></span><br><span class="line"><span class="comment"> *           LASCIATE OGNI SPERANZA, VOI CH'ENTRATE           *</span></span><br><span class="line"><span class="comment"> **************************************************************</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim操作</title>
      <link href="/2017/08/25/vim%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/08/25/vim%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vim的基本操作"><a href="#vim的基本操作" class="headerlink" title="vim的基本操作"></a>vim的基本操作</h1><p>本人在实验楼学习的时候摘抄下来的，留作自己的笔记。</p><a id="more"></a><h1 id="游标移动"><a href="#游标移动" class="headerlink" title="游标移动"></a>游标移动</h1><p>按Esc进入普通模式，在该模式下使用方向键或者h,j,k,l键可以移动游标。</p><div class="table-container"><table><thead><tr><th>按键</th><th>说明</th></tr></thead><tbody><tr><td>h</td><td>左</td></tr><tr><td>l</td><td>右（小写L）</td></tr><tr><td>j</td><td>下</td></tr><tr><td>k</td><td>上</td></tr><tr><td>w</td><td>移动到下一个单词</td></tr><tr><td>b</td><td>移动到上一个单词</td></tr></tbody></table></div><h1 id="进入插入模式"><a href="#进入插入模式" class="headerlink" title="进入插入模式"></a>进入插入模式</h1><p>在普通模式下使用下面的键将进入插入模式，并可以从相应的位置开始输入</p><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>在当前光标处进行编辑</td></tr><tr><td>I</td><td>在行首插入</td></tr><tr><td>A</td><td>在行末插入</td></tr><tr><td>a</td><td>在光标后插入编辑</td></tr><tr><td>o</td><td>在当前行后插入一个新行</td></tr><tr><td>O</td><td>在当前行前插入一个新行</td></tr><tr><td>cw</td><td>替换从光标所在位置后到一个单词结尾的字符</td></tr></tbody></table></div><h1 id="命令行模式下保存文档"><a href="#命令行模式下保存文档" class="headerlink" title="命令行模式下保存文档"></a>命令行模式下保存文档</h1><p>从普通模式输入:进入命令行模式，输入w回车，保存文档。输入:w 文件名可以将文档另存为其他文件名或存到其它路径下</p><h1 id="命令行模式下退出vim"><a href="#命令行模式下退出vim" class="headerlink" title="命令行模式下退出vim"></a>命令行模式下退出vim</h1><p>从普通模式输入:进入命令行模式，输入wq回车，保存并退出编辑</p><p>以下为其它几种退出方式：</p><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:q!</td><td>强制退出，不保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:wq!</td><td>强制保存并退出</td></tr><tr><td>:w &lt;文件路径&gt;</td><td>另存为</td></tr><tr><td>:saveas 文件路径</td><td>另存为</td></tr><tr><td>:x</td><td>保存并退出</td></tr><tr><td>:wq</td><td>保存并退出</td></tr></tbody></table></div><h1 id="普通模式下退出vim"><a href="#普通模式下退出vim" class="headerlink" title="普通模式下退出vim"></a>普通模式下退出vim</h1><p>普通模式下输入Shift+zz即可保存退出vim</p><h1 id="普通模式下删除vim文本信息"><a href="#普通模式下删除vim文本信息" class="headerlink" title="普通模式下删除vim文本信息"></a>普通模式下删除vim文本信息</h1><p>进入普通模式，使用下列命令可以进行文本快速删除：</p><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>删除游标所在的字符</td></tr><tr><td>X</td><td>删除游标所在前一个字符</td></tr><tr><td>Delete</td><td>同x</td></tr><tr><td>dd</td><td>删除整行</td></tr><tr><td>dw</td><td>删除一个单词（不适用中文）</td></tr><tr><td>d$或D</td><td>删除至行尾</td></tr><tr><td>d^</td><td>删除至行首</td></tr><tr><td>dG</td><td>删除到文档结尾处</td></tr><tr><td>d1G</td><td>删至文档首部</td></tr></tbody></table></div><p>除此之外，你还可以在命令之前加上数字，表示一次删除多行，如：<br>2dd表示一次删除2行i</p><h1 id="重复执行上次命令"><a href="#重复执行上次命令" class="headerlink" title="重复执行上次命令"></a>重复执行上次命令</h1><p>在普通模式下.(小数点)表示重复上一次的命令操作</p><h1 id="执行指定次数相同的命令"><a href="#执行指定次数相同的命令" class="headerlink" title="执行指定次数相同的命令"></a>执行指定次数相同的命令</h1><p>进入普通模式输入N<command>，N表示重复后面的次数</p><p>例如：输入10x，删除10个连续字符</p><p>输入3dd，将会删除3行文本</p><p>在普通模式下，你还可以使用dw或者daw(delete a word)删除一个单词，所以你可以很容易的联想到dnw(n替换为相应数字)表示删除n个单词</p><h1 id="游标的快速跳转"><a href="#游标的快速跳转" class="headerlink" title="游标的快速跳转"></a>游标的快速跳转</h1><p>普通模式下，下列命令可以让光标快速调转到指定位置，我们分别讨论快速实现<strong>行间</strong>跳转和<strong>行内</strong>跳转</p><h2 id="行间跳转"><a href="#行间跳转" class="headerlink" title="行间跳转"></a>行间跳转</h2><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>nG(n Shift+g)</td><td>游标移动到第 n 行(如果默认没有显示行号，请先进入命令模式，输入:set nu以显示行号)</td></tr><tr><td>gg</td><td>游标移动到到第一行</td></tr><tr><td>G(Shift+g)</td><td>到最后一行</td></tr></tbody></table></div><p><strong><em>小技巧：你在完成依次跳转后，可以使用Ctrl+o快速回到上一次(跳转前)光标所在位置</em></strong>,这个技巧很实用，比如当你在写代码时，忽然想起有个bug，需要修改，这时候你跳过去改好了，只需要按下Ctrl+o就可以回到你之前的位置。vim中会用很多类似的小技巧就等着你去发掘。</p><h2 id="行内跳转"><a href="#行内跳转" class="headerlink" title="行内跳转"></a>行内跳转</h2><p>普通模式下使用下列命令在行内按照单词为单位进行跳转</p><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>到下一个单词的开头</td></tr><tr><td>e</td><td>到下一个单词的结尾</td></tr><tr><td>b</td><td>到前一个单词的开头</td></tr><tr><td>ge</td><td>到前一个单词的结尾</td></tr><tr><td>0或^</td><td>到行头</td></tr><tr><td>$</td><td>到行尾</td></tr><tr><td>f&lt;字母&gt;</td><td>向后搜索&lt;字母&gt;并跳转到第一个匹配的位置(非常实用)</td></tr><tr><td>F&lt;字母&gt;</td><td>向前搜索&lt;字母&gt;并跳转到第一个匹配的位置</td></tr><tr><td>t&lt;字母&gt;</td><td>向后搜索&lt;字母&gt;并跳转到第一个匹配位置之前的一个字母(不常用)</td></tr><tr><td>T&lt;字母&gt;</td><td>向前搜索&lt;字母&gt;并跳转到第一个匹配位置之后的一个字母(不常用)</td></tr></tbody></table></div><h1 id="复制粘贴和剪切"><a href="#复制粘贴和剪切" class="headerlink" title="复制粘贴和剪切"></a>复制粘贴和剪切</h1><h2 id="复制及粘贴文本"><a href="#复制及粘贴文本" class="headerlink" title="复制及粘贴文本"></a>复制及粘贴文本</h2><p>  ● 普通模式中使用y复制</p><pre><code>  ○ 普通模式中，yy复制游标所在的整行（3yy表示复制3行）  ○ 普通模式中，y^ 复制至行首，或y0。不含光标所在处字符。  ○ 普通模式中，y$ 复制至行尾。含光标所在处字符。  ○ 普通模式中，yw 复制一个单词。  ○ 普通模式中，y2w 复制两个单词。  ○ 普通模式中，yG 复制至文本末。  ○ 普通模式中，y1G 复制至文本开头。</code></pre><p>  ● 普通模式中使用p粘贴</p><pre><code>  ○ 普通模式中，p(小写)代表粘贴至光标后（下）  ○ 普通模式中，P(大写)代表粘贴至光标前（上）</code></pre><h2 id="剪切及粘贴"><a href="#剪切及粘贴" class="headerlink" title="剪切及粘贴"></a>剪切及粘贴</h2><p>其实前面讲得dd删除命令就是剪切，你每次dd删除文档内容后，便可以使用p来粘贴，也这一点可以让我们实现一个很爽快的功能——交换上下行</p><h1 id="字符的替换及撤销-Undo操作"><a href="#字符的替换及撤销-Undo操作" class="headerlink" title="字符的替换及撤销(Undo操作)"></a>字符的替换及撤销(Undo操作)</h1><h2 id="替换和撤销-Undo-命令"><a href="#替换和撤销-Undo-命令" class="headerlink" title="替换和撤销(Undo)命令"></a>替换和撤销(Undo)命令</h2><p>替换和Undo命令都是针对普通模式下的操作</p><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>r+&lt;待替换字母&gt;</td><td>将游标所在字母替换为指定字母</td></tr><tr><td>R</td><td>连续替换，直到按下Esc</td></tr><tr><td>cc</td><td>替换整行，即删除游标所在行，并进入插入模式</td></tr><tr><td>cw</td><td>替换一个单词，即删除一个单词，并进入插入模式</td></tr><tr><td>C(大写)</td><td>替换游标以后至行末~反转游标所在字母大小写</td></tr><tr><td>u{n}</td><td>撤销一次或n次操作</td></tr><tr><td>U(大写)</td><td>撤销当前行的所有修改</td></tr><tr><td>Ctrl+r</td><td>redo，即撤销undo的操作</td></tr></tbody></table></div><h1 id="快速缩进"><a href="#快速缩进" class="headerlink" title="快速缩进"></a>快速缩进</h1><p><strong>使用命令进行快速调整缩进操作</strong></p><pre><code>● 普通模式下输入15G，跳转到15行● 普通模式下输入&gt;&gt; 整行将向右缩进（使用，用于格式化代码超爽）● 普通模式下输入&lt;&lt; 整行向左回退● 普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数</code></pre><h1 id="shiftwidth命令"><a href="#shiftwidth命令" class="headerlink" title="shiftwidth命令"></a>shiftwidth命令</h1><p>shiftwidth命令是指上一节&gt;&gt;命令产生的缩进（可以简写成sw）</p><p>普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数</p><p>获取目前的设定值</p><pre><code>:set shiftwidth?</code></pre><p>设置缩进为10个字符</p><pre><code>:set shiftwidth=10</code></pre><p>输入ESC回到普通模式，再次尝试&gt;&gt;看缩进量是否变化</p><h1 id="调整文本位置"><a href="#调整文本位置" class="headerlink" title="调整文本位置"></a>调整文本位置</h1><p>命令行模式下输入:ce(center)命令使本行内容居中</p><pre><code>:ce</code></pre><p>命令行模式下输入:ri(right)命令使本行文本靠右</p><pre><code>:ri</code></pre><p>命令行模式下输入:le(left)命令使本行内容靠左</p><pre><code>:le</code></pre><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h2><p>普通模式下输入/然后键入需要查找的字符串 按回车后就会进行查找。</p><p>？与/功能相同，只不过？是向上而/是向下查找。</p><p>进入查找之后，输入n和N可以继续查找</p><p>n表示继续查找，N反向查找</p><h2 id="高级查找"><a href="#高级查找" class="headerlink" title="高级查找"></a>高级查找</h2><pre><code>● 普通模式下输入\*寻找游标所在处的单词● 普通模式下输入\#同上，但 \# 是向前（上）找，\*则是向后（下）找● 普通模式下输入g\*同\* ，但部分符合该单词即可● 普通模式下输入g\#同\# ，但部分符合该单词即可</code></pre><p>以上查找n,N 的继续查找命令依然可以用</p><h1 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h1><p><strong>使用vim编辑多个文件</strong><br>编辑多个文件有两种形式，一种是在进入vim前使用的参数就是多个文件。另一种就是进入vim后再编辑其他的文件。<br>同时创建两个新文件并编辑</p><pre><code>$ vim 1.txt 2.txt</code></pre><p>默认进入1.txt文件的编辑界面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● 命令行模式下输入:n编辑2.txt文件，可以加!即:n!强制切换，之前一个文件的输入没有保存，仅仅切换到另一个文件</span><br><span class="line">● 命令行模式下输入:N编辑1.txt文件，可以加!即:N!强制切换，之前文件内的输入没有保存，仅仅是切换到另一个文件</span><br></pre></td></tr></table></figure></p><p>进入vim后打开新文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">● 命令行模式下输入:e 3.txt 打开新文件3.txt</span><br><span class="line">● 命令行模式下输入:e# 回到前一个文件</span><br><span class="line">● 命令行模式下输入:ls可以列出以前编辑过的文档</span><br><span class="line">● 命令行模式下输入:b 2.txt（或者编号）可以直接进入文件2.txt编辑</span><br><span class="line">● 命令行模式下输入:bd 2.txt（或者编号）可以删除以前编辑过的列表中的文件项目</span><br><span class="line">● 命令行模式下输入:e! 4.txt，新打开文件4.txt，放弃正在编辑的文件</span><br><span class="line">● 命令行模式下输入:f 显示正在编辑的文件名</span><br><span class="line">● 命令行模式下输入:f new.txt，改变正在编辑的文件名字为new.txt</span><br></pre></td></tr></table></figure></p><h1 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h1><p>如果因为断电等原因造成文档没有保存，可以采用恢复方式，vim -r进入文档后，输入:ewcover 1.txt来恢复</p><pre><code>$ vim -r 1.txt</code></pre><h1 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h1><h2 id="可视模式命令简介"><a href="#可视模式命令简介" class="headerlink" title="可视模式命令简介"></a>可视模式命令简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● 在普通模式下输入v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v会后就会取消选取。 </span><br><span class="line">● 在普通模式下输入Shift+v（小写），进入行选择模式，按下V之后就会把整行选取，您可以上下移动光标选更多的行，同样，再按一次Shift+v就可以取消选取。</span><br><span class="line">● 在普通模式下输入 Ctrl+v（小写），这是区域选择模式，可以进行矩形区域选择，再按一次Ctrl+v取消选取。</span><br><span class="line">● 在可视模式下输入d删除选取区域内容</span><br><span class="line">● 在可视模式下输入y复制选取区域内容</span><br></pre></td></tr></table></figure><h1 id="视窗操作"><a href="#视窗操作" class="headerlink" title="视窗操作"></a>视窗操作</h1><h2 id="视窗操作简介"><a href="#视窗操作简介" class="headerlink" title="视窗操作简介"></a>视窗操作简介</h2><p>vim可以在一个界面里打开多个窗口进行编辑，这些编辑窗口称为vim的视窗。</p><p>打开方法有很多种，例如可以使用在命令行模式下输入:new 打开一个新的vim视窗，并进入视窗编辑一个新文件（普通模式下输入Ctrl+w也可以,但是Ctrl+w在chrome下会与chrome关闭标签页的快捷键冲突，所以使用该快捷键你可以在IE或其它浏览器进行练习），除了:new命令，下述列举的多种方法也可以在命令模式或普通模式下打开新的视窗：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">● 命令行模式下输入:sp 1.txt 打开新的水平分屏视窗来编辑1.txt</span><br><span class="line">● 命令行模式下输入:vsp 2.txt 打开新的垂直分屏视窗来编辑2.txt</span><br><span class="line">● 普通模式下Ctrl-w s 将当前窗口分割成两个水平的窗口</span><br><span class="line">● 普通模式下Ctrl-w v 将当前窗口分割成两个垂直的窗口</span><br><span class="line">● 普通模式下Ctrl-w q 即 :q 结束分割出来的视窗。如果在新视窗中有输入需要使用强制符！即:q!</span><br><span class="line">● 普通模式下Ctrl-w o 打开一个视窗并且隐藏之前的所有视窗</span><br><span class="line">● 普通模式下Ctrl-w j 移至下面视窗</span><br><span class="line">● 普通模式下Ctrl-w k 移至上面视窗</span><br><span class="line">● 普通模式下Ctrl-w h 移至左边视窗</span><br><span class="line">● 普通模式下Ctrl-w l 移至右边视窗</span><br><span class="line">● 普通模式下Ctrl-w J 将当前视窗移至下面</span><br><span class="line">● 普通模式下Ctrl-w K 将当前视窗移至上面</span><br><span class="line">● 普通模式下Ctrl-w H 将当前视窗移至左边</span><br><span class="line">● 普通模式下Ctrl-w L 将当前视窗移至右边</span><br><span class="line">● 普通模式下Ctrl-w - 减小视窗的高度</span><br><span class="line">● 普通模式下Ctrl-w + 增加视窗的高度</span><br></pre></td></tr></table></figure></p><h1 id="文档加密"><a href="#文档加密" class="headerlink" title="文档加密"></a>文档加密</h1><h2 id="创建加密文档"><a href="#创建加密文档" class="headerlink" title="创建加密文档"></a>创建加密文档</h2><pre><code>$ vim -x file1</code></pre><p>输入您的密码</p><p>确认密码</p><p>这样在下一次打开时，vim就会要求你输入密码</p><h1 id="在vim执行外部命令"><a href="#在vim执行外部命令" class="headerlink" title="在vim执行外部命令"></a>在vim执行外部命令</h1><p>在命令行模式中输入!可以执行外部的shell命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">● :!ls 用于显示当前目录的内容</span><br><span class="line">● :!rm FILENAME用于删除名为 FILENAME 的文件</span><br><span class="line">● :w FILENAME可将当前 VIM 中正在编辑的文件另存为 FILENAME 文件</span><br></pre></td></tr></table></figure></p><h1 id="帮助系统"><a href="#帮助系统" class="headerlink" title="帮助系统"></a>帮助系统</h1><h2 id="vim中的查看帮助"><a href="#vim中的查看帮助" class="headerlink" title="vim中的查看帮助"></a>vim中的查看帮助</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">● 普通模式下按F1打开vim自己预设的帮助文档</span><br><span class="line">● 命令行模式下输入:h shiftwidth 打开名为shiftwidth的帮助文件</span><br><span class="line">● 命令行模式下输入:ver 显示版本及参数</span><br></pre></td></tr></table></figure><h1 id="功能设定"><a href="#功能设定" class="headerlink" title="功能设定"></a>功能设定</h1><h2 id="vim的功能设定"><a href="#vim的功能设定" class="headerlink" title="vim的功能设定"></a>vim的功能设定</h2><p>可以在编辑文件的时候进行功能设定，如命令行模式下输入:set nu（显示行数），设定值退出vim后不会保存。要永久保存配置需要修改vim配置文件。</p><p>vim的配置文件~/.vimrc(实验楼环境中配置文件在/etc/vim/vimrc)，可以打开文件进行修改，不过务必小心不要影响vim正常使用</p><h1 id="获取目前的设定"><a href="#获取目前的设定" class="headerlink" title="获取目前的设定"></a>获取目前的设定</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">● 命令行模式下输入:set或者:se显示所有修改过的配置</span><br><span class="line">● 命令行模式下输入:set all 显示所有的设定值</span><br><span class="line">● 命令行模式下输入:set option? 显示option的设定值</span><br><span class="line">● 命令行模式下输入:set nooption 取消当期设定值</span><br></pre></td></tr></table></figure><h1 id="set功能的说明"><a href="#set功能的说明" class="headerlink" title="set功能的说明"></a>set功能的说明</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● 命令行模式下输入:set autoindent(ai) 设置自动缩进</span><br><span class="line">● 命令行模式下输入:set autowrite(aw) 设置自动存档，默认未打开</span><br><span class="line">● 命令行模式下输入:set background=dark或light，设置背景风格</span><br><span class="line">● 命令行模式下输入:set backup(bk) 设置自动备份，默认未打开</span><br><span class="line">● 命令行模式下输入: set cindent(cin) 设置C语言风格缩进</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ubuntu基本操作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>服务器安装问题补充（安装时Select and install software失败）</title>
      <link href="/2017/08/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A1%A5%E5%85%85/"/>
      <url>/2017/08/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="服务器安装问题补充"><a href="#服务器安装问题补充" class="headerlink" title="服务器安装问题补充"></a>服务器安装问题补充</h1><p>之前写好的服务器安装教程已经写好了，针对与大部分服务器的安装应该都可以正常安装了，但是近期安装实验室服务器的时候遇到了问题。安装时Select and install software失败，这个问题在以前没有遇到过，不过也有可能时启动盘做的有问题吧，不过是刚从ubuntu官网上下载的系统做的启动盘，有点迷，不过先记录一下好了。</p><img src="/images/服务器安装问题补充.jpg"><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="先跳过该步骤"><a href="#先跳过该步骤" class="headerlink" title="先跳过该步骤"></a>先跳过该步骤</h2><p>根据系统的提示遇到这个步骤的时候我们可以选择重新再来一次，也可以直接跳过该步骤，这个地方我尝试过，就算你重新再来几次也是这样的。当然如果你选择重新安装系统，如果没有换系统盘的话还是这样的，换了以后我也不确定的。</p><p>所以再此我选择跳过此步骤，直接开始下面的安装，最后安装完成，重启完成</p><h2 id="跳过后的问题及解决方案"><a href="#跳过后的问题及解决方案" class="headerlink" title="跳过后的问题及解决方案"></a>跳过后的问题及解决方案</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>跳过上面的步骤以后我们发现我们可以正常的进入系统。但是呢，在这个时候我们开始安装一些必要的软件的时候，我们会发现根本找不到安装包的，并且在输入的时候也不能补全命令。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="无法找到安装包"><a href="#无法找到安装包" class="headerlink" title="无法找到安装包"></a>无法找到安装包</h4><p>这个时候我们可以发现其实是因为我们apt的源有问题，当然开始的时候它也会让你找CD的路径来进行安装，虽然应该可以通过外接CD或者硬盘然后通过路径来安装，不过这样很是麻烦，所以我们必须要修复它。</p><p>这个时候我们可以去更新apt的源，这里建议使用清华的源，比较方便比较快。<br>清华源的网站：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p><p>具体操作（因为没有安装vim呢，所以这里我们只能使用vi或者nano来进行文件系统的改写）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>然后可以把里面的东西都删除掉或者使用“#”都注释掉<br>下面开始往里面方源了，vi的操作跟vim的操作是一样的</p><p>下面是我填写的源，可以照着填：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure></p><h4 id="无法自动补全命令"><a href="#无法自动补全命令" class="headerlink" title="无法自动补全命令"></a>无法自动补全命令</h4><p>为了提高我们的效率我们一般会用Tab键进行补全的，这个时候我在进行安装的时候install并不能自动补全，所以我进行如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bash-completion</span><br></pre></td></tr></table></figure><p>然后重启就可以了，问题解决。</p><h1 id="服务器的远程配置"><a href="#服务器的远程配置" class="headerlink" title="服务器的远程配置"></a>服务器的远程配置</h1><p>正常安装ubuntu系统的时候在出错的这一步我们其实是可以选择打开ssh远程登陆的，但是此时系统安装这一步出错了，我们应该怎么打开ssh远程登陆的，毕竟对于服务器我们不能每个人都坐在服务器前面插个显示器来用。</p><h2 id="首先安装ssh"><a href="#首先安装ssh" class="headerlink" title="首先安装ssh"></a>首先安装ssh</h2><pre><code>sudo apt-get install openssh-server</code></pre><p>理论上来说安装了ssh以后服务器的ssh会自动打开的，如果不放心可以查看一下</p><pre><code>ps -e |grep ssh</code></pre><p>如果看到sshd那说明ssh-server已经启动了。<br>如果没有则可以这样启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh start</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure></p><p>ssh-server配置文件位于/etc/ssh/sshd_config，在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号<br>然后重启SSH服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh stop</span><br><span class="line">sudo /etc/init.d/ssh start</span><br></pre></td></tr></table></figure></p><h2 id="禁用root登陆"><a href="#禁用root登陆" class="headerlink" title="禁用root登陆"></a>禁用root登陆</h2><p>其实这个也可以不禁用的，但是为了安全，我们一般都是禁用root直接远程登陆的。<br>禁用的方法：<br>修改/etc/ssh/ssh_config文件<br>将其中的PermitRootLogin改成no就可以了，不过如果配置文件中没有这个的话，也可以直接手动输入。<br>然后重启ssh服务就可以了</p><pre><code>/etc/rc.d/sshd restart</code></pre><p>当然如果为了安全的话，其实我们可以直接禁用掉密码登陆，采取用密钥登陆的方式，这样更安全。因为其实你的密码很容易被别人截获的，这个可以参看之前的博客进行设置。<br>另外补充一句：其实咱们使用的账户及密码等信息保存在 /etc/passwd 以及 /etc/shadow 中，密码采用crypt（）算法加密保存了而已。</p>]]></content>
      
      
        <tags>
            
            <tag> 手把手教你配置Ubuntu server服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言编写程序计时</title>
      <link href="/2017/08/22/C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%97%B6/"/>
      <url>/2017/08/22/C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%97%B6/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C语言编写程序计时"><a href="#C语言编写程序计时" class="headerlink" title="C语言编写程序计时"></a>C语言编写程序计时</h1><p>在我们编程的时候，有时候需要我们去监测程序运行的时间问题，尤其是在做加速或者做优化的时候，一个程序运行的时间也许就是我们判断程序好坏的标准，所以我们有时候要进行计时。（因为用到了，所以做个记录方便下次查看）</p><a id="more"></a><h2 id="在windows上进行计时"><a href="#在windows上进行计时" class="headerlink" title="在windows上进行计时"></a>在windows上进行计时</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> start_time, finish_time;<span class="comment">/*计时*/</span></span><br><span class="line"><span class="keyword">double</span> cord_time;<span class="comment">/*计时*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">start_time = clock();<span class="comment">/*****************************计时开始***********************************/</span></span><br><span class="line">    <span class="comment">/*******************/</span></span><br><span class="line">    <span class="comment">/*这里编写程序*/</span></span><br><span class="line">    <span class="comment">/*******************/</span></span><br><span class="line">    finish_time = clock();<span class="comment">/***************************计时结束***********************************/</span></span><br><span class="line">     <span class="comment">//显示总的用时</span></span><br><span class="line">cord_time = (<span class="keyword">double</span>)(finish_time - start_time) ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"time=%f ms\n"</span>, cord_time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在linux上进行计时"><a href="#在linux上进行计时" class="headerlink" title="在linux上进行计时"></a>在linux上进行计时</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">time_substract</span><span class="params">(struct timeval *result, struct timeval *begin,struct timeval *end)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin-&gt;tv_sec &gt; end-&gt;tv_sec)    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>((begin-&gt;tv_sec == end-&gt;tv_sec) &amp;&amp; (begin-&gt;tv_usec &gt; end-&gt;tv_usec)) <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    result-&gt;tv_sec = (end-&gt;tv_sec - begin-&gt;tv_sec);</span><br><span class="line">    result-&gt;tv_usec = (end-&gt;tv_usec - begin-&gt;tv_usec);</span><br><span class="line">    <span class="keyword">if</span>(result-&gt;tv_usec &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result-&gt;tv_sec--;</span><br><span class="line">        result-&gt;tv_usec += <span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">start</span>,<span class="title">stop</span>,<span class="title">diff</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;start,<span class="number">0</span>,<span class="keyword">sizeof</span>(struct timeval));</span><br><span class="line">    <span class="built_in">memset</span>(&amp;stop,<span class="number">0</span>,<span class="keyword">sizeof</span>(struct timeval));</span><br><span class="line">    <span class="built_in">memset</span>(&amp;diff,<span class="number">0</span>,<span class="keyword">sizeof</span>(struct timeval));</span><br><span class="line">    gettimeofday(&amp;start,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*******************/</span></span><br><span class="line">    <span class="comment">/*这里编写程序*/</span></span><br><span class="line">    <span class="comment">/*******************/</span></span><br><span class="line">    gettimeofday(&amp;stop,<span class="number">0</span>);</span><br><span class="line">    time_substract(&amp;diff,&amp;start,&amp;stop);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Total time : %d s,%d us\n"</span>,(<span class="keyword">int</span>)diff.tv_sec,(<span class="keyword">int</span>)diff.tv_usec);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 常用的C语言小程序代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C 语言TXT文件的读写</title>
      <link href="/2017/08/22/C-%E8%AF%AD%E8%A8%80TXT%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%86%99/"/>
      <url>/2017/08/22/C-%E8%AF%AD%E8%A8%80TXT%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%86%99/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C语言编写TXT文件的读写"><a href="#C语言编写TXT文件的读写" class="headerlink" title="C语言编写TXT文件的读写"></a>C语言编写TXT文件的读写</h1><p>本文针对的是对txt文件中数据的读写操作（非二进制的，二进制的可能后面会补充）,因为用到做个记录。</p><a id="more"></a><h2 id="C语言编写TXT文件的读"><a href="#C语言编写TXT文件的读" class="headerlink" title="C语言编写TXT文件的读"></a>C语言编写TXT文件的读</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Read_file</span><span class="params">(<span class="keyword">double</span> **Matrix, <span class="keyword">char</span> *FileName, <span class="keyword">int</span> height, <span class="keyword">int</span> wide)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE *fp = fopen(FileName, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span> (!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"can't open file\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; wide; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%lf"</span>, &amp;Matrix[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C语言编写TXT文件的写"><a href="#C语言编写TXT文件的写" class="headerlink" title="C语言编写TXT文件的写"></a>C语言编写TXT文件的写</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp = fopen(output, <span class="string">"w+"</span>);</span><br><span class="line"><span class="keyword">if</span> (!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"can't open file\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FC_height; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; FC_wide; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%lf\t"</span>, FC_matrix[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 常用的C语言小程序代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件脚本编写问题</title>
      <link href="/2017/08/17/%E6%96%87%E4%BB%B6%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E9%97%AE%E9%A2%98-by%E9%BB%84%E6%B5%B7%E4%BA%AE/"/>
      <url>/2017/08/17/%E6%96%87%E4%BB%B6%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E9%97%AE%E9%A2%98-by%E9%BB%84%E6%B5%B7%E4%BA%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件脚本编写问题"><a href="#文件脚本编写问题" class="headerlink" title="文件脚本编写问题"></a>文件脚本编写问题</h1><p>在编写脚本的时候我们可能会遇到一些各种各样的小问题，比如放置位置，以及使用权限等。</p><a id="more"></a><p>文件脚本编写好以后可以直接放置到 /usr/local/sbin 目录下面，这样就可以不用去申请环境变量了，使用起来也就比较方便了。</p><p>chmod a+x [文件名]  付给权限</p>]]></content>
      
      
        <tags>
            
            <tag> Hadoop脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>清理集群的脚本</title>
      <link href="/2017/08/17/%E6%B8%85%E7%90%86%E9%9B%86%E7%BE%A4%E7%9A%84%E8%84%9A%E6%9C%AC-by%E9%BB%84%E6%B5%B7%E4%BA%AE/"/>
      <url>/2017/08/17/%E6%B8%85%E7%90%86%E9%9B%86%E7%BE%A4%E7%9A%84%E8%84%9A%E6%9C%AC-by%E9%BB%84%E6%B5%B7%E4%BA%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="清理集群的脚本"><a href="#清理集群的脚本" class="headerlink" title="清理集群的脚本"></a>清理集群的脚本</h1><p>该脚本旨在重新配置hadoop的时候我们需要清理一下集群中的东西，比如记录等。</p><a id="more"></a><h1 id="clear-sh源代码例子"><a href="#clear-sh源代码例子" class="headerlink" title="clear.sh源代码例子"></a>clear.sh源代码例子</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">stop-all.sh</span><br><span class="line">xrm.sh /tmp/hadoop</span><br><span class="line">xrm.sh /hadoop/logs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"clean done!"</span></span><br><span class="line">(主要为了清除tmp下面的文件hadoop还有logs)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Hadoop脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初始化集群</title>
      <link href="/2017/08/17/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9B%86%E7%BE%A4-by%E9%BB%84%E6%B5%B7%E4%BA%AE/"/>
      <url>/2017/08/17/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9B%86%E7%BE%A4-by%E9%BB%84%E6%B5%B7%E4%BA%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h1><p>该脚本主要时对第一次使用集群的时候进行一个初始化。</p><a id="more"></a><h1 id="init-sh源代码例子"><a href="#init-sh源代码例子" class="headerlink" title="init.sh源代码例子"></a>init.sh源代码例子</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> hdfs namenode -format</span><br><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure></p><h1 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir -p /user/hadoop</span><br></pre></td></tr></table></figure><h1 id="查看显示目录"><a href="#查看显示目录" class="headerlink" title="查看显示目录"></a>查看显示目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs –ls -R /</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Hadoop脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>所有节点 文件删除脚本编写</title>
      <link href="/2017/08/17/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-by%E9%BB%84%E6%B5%B7%E4%BA%AE/"/>
      <url>/2017/08/17/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-by%E9%BB%84%E6%B5%B7%E4%BA%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="所有节点-文件删除脚本编写"><a href="#所有节点-文件删除脚本编写" class="headerlink" title="所有节点 文件删除脚本编写"></a>所有节点 文件删除脚本编写</h1><p>该脚本旨在删除所有节点上相同的东西，比如hadoop的重新配置等，还有删除hadoop的log等文件，都比较方便。<br><a id="more"></a></p><h1 id="xrm-sh的源代码例子"><a href="#xrm-sh的源代码例子" class="headerlink" title="xrm.sh的源代码例子"></a>xrm.sh的源代码例子</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> no args</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get first argument</span></span><br><span class="line">arg1=<span class="variable">$1</span>;</span><br><span class="line">cuser=`whoami`</span><br><span class="line">fname=`basename <span class="variable">$arg1</span>`</span><br><span class="line">dir=`dirname <span class="variable">$arg1</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$dir</span> == <span class="string">"."</span> ] ; <span class="keyword">then</span></span><br><span class="line">dir=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="comment">#echo $dir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> -----------------rming <span class="variable">$arg1</span> from localhost-------------;</span><br><span class="line">rm -rf <span class="variable">$arg1</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (( i=200;i&lt;=500;i=i+100)) ;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> ---------------rming <span class="variable">$arg1</span> from s<span class="variable">$i</span> -------------;</span><br><span class="line">ssh s<span class="variable">$i</span> rm -rf <span class="variable">$dir</span>/<span class="variable">$fname</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Hadoop脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>所有节点 文件拷贝脚本编写</title>
      <link href="/2017/08/17/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-by%E9%BB%84%E6%B5%B7%E4%BA%AE/"/>
      <url>/2017/08/17/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-by%E9%BB%84%E6%B5%B7%E4%BA%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="所有节点-文件拷贝脚本编写"><a href="#所有节点-文件拷贝脚本编写" class="headerlink" title="所有节点 文件拷贝脚本编写"></a>所有节点 文件拷贝脚本编写</h1><p>该脚本旨在往每个节点拷贝数据，之前我们的拷贝是需要自己一个节点一个节点链接然后拷贝，但是如果我们每个节点都拷贝同样的数据时，这样做显然很麻烦，如果节点多的话还很浪费时间，这样我们就可以通过该脚本自己循环拷贝。</p><a id="more"></a><h1 id="xcp-sh源代码例子"><a href="#xcp-sh源代码例子" class="headerlink" title="xcp.sh源代码例子"></a>xcp.sh源代码例子</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> no args</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get first argument</span></span><br><span class="line">arg1=<span class="variable">$1</span>;</span><br><span class="line">cuser=`whoami`</span><br><span class="line">fname=`basename <span class="variable">$arg1</span>`</span><br><span class="line">dir=`dirname <span class="variable">$arg1</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$dir</span> == <span class="string">"."</span> ] ; <span class="keyword">then</span></span><br><span class="line">dir=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="comment">#echo $dir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">for</span> (( i=200;i&lt;=500;i=i+100)) ;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -----------coping <span class="variable">$arg1</span> to <span class="variable">$i</span>------------------;</span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$arg1</span> ] ; <span class="keyword">then</span></span><br><span class="line">scp  -r  <span class="variable">$arg1</span> <span class="variable">$cuser</span>@s<span class="variable">$i</span>:<span class="variable">$dir</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">scp <span class="variable">$arg1</span> <span class="variable">$cuser</span>@s<span class="variable">$i</span>:<span class="variable">$dir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Hadoop脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>所有节点执行同一指令的操作</title>
      <link href="/2017/08/17/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E6%89%A7%E8%A1%8C%E5%90%8C%E4%B8%80%E6%8C%87%E4%BB%A4%E7%9A%84%E6%93%8D%E4%BD%9C-by%E9%BB%84%E6%B5%B7%E4%BA%AE/"/>
      <url>/2017/08/17/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E6%89%A7%E8%A1%8C%E5%90%8C%E4%B8%80%E6%8C%87%E4%BB%A4%E7%9A%84%E6%93%8D%E4%BD%9C-by%E9%BB%84%E6%B5%B7%E4%BA%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="所有节点执行同一指令的操作"><a href="#所有节点执行同一指令的操作" class="headerlink" title="所有节点执行同一指令的操作"></a>所有节点执行同一指令的操作</h1><p>该脚本旨在对每个节点都执行同一个指令，这样就不用每次都shell到每个子节点上去执行了，较为方便。<br><a id="more"></a></p><h1 id="xcall-sh的源代码例子"><a href="#xcall-sh的源代码例子" class="headerlink" title="xcall.sh的源代码例子"></a>xcall.sh的源代码例子</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> no args</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> -----------------xcall <span class="variable">$arg1</span> from localhost-----------------</span><br><span class="line"><span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="comment">#get first argument</span></span><br><span class="line"><span class="keyword">for</span> (( i=0;i&lt;=3;i=i+1));</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="built_in">echo</span> --------------------xcall <span class="variable">$arg1</span> from Slave<span class="variable">$i</span> ------------------;</span><br><span class="line">ssh Slave<span class="variable">$i</span> <span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Hadoop脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>所有节点 文件查看脚本编写</title>
      <link href="/2017/08/17/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/"/>
      <url>/2017/08/17/%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9-%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="所有节点-文件查看脚本编写"><a href="#所有节点-文件查看脚本编写" class="headerlink" title="所有节点 文件查看脚本编写"></a>所有节点 文件查看脚本编写</h1><p>该脚本用于一次查看所有集群节点相同位置下的文件，类似于手动在每个节点上输入ls指令进行查看。<br><a id="more"></a></p><h1 id="xls-sh的源代码例子"><a href="#xls-sh的源代码例子" class="headerlink" title="xls.sh的源代码例子"></a>xls.sh的源代码例子</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> no args</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get first argument</span></span><br><span class="line">arg1=<span class="variable">$1</span>;</span><br><span class="line">cuser=`whoami`</span><br><span class="line">fname=`basename <span class="variable">$arg1</span>`</span><br><span class="line">dir=`dirname <span class="variable">$arg1</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$dir</span> == <span class="string">"."</span> ] ; <span class="keyword">then</span></span><br><span class="line">dir=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="comment">#echo $dir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (( i=200;i&lt;=500;i=i+100)) ;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> ---------------ls <span class="variable">$arg1</span> from s<span class="variable">$i</span> -------------;</span><br><span class="line">ssh s<span class="variable">$i</span> ls <span class="variable">$dir</span>/<span class="variable">$fname</span> | xargs</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Hadoop脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>扩展Slave的时候需要注意的一些问题</title>
      <link href="/2017/08/17/%E6%89%A9%E5%B1%95Slave%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2017/08/17/%E6%89%A9%E5%B1%95Slave%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="扩展Slave的时候需要注意的一些问题"><a href="#扩展Slave的时候需要注意的一些问题" class="headerlink" title="扩展Slave的时候需要注意的一些问题"></a>扩展Slave的时候需要注意的一些问题</h1><ol><li>扩展的时候可以先直接按照Hadoop集群安装配置教程先进行。</li><li>这里需要更改 <strong><em>/usr/local/hadoop/etc/hadoop</em></strong> 路径下的 slave文件中的参数，需要把添加的节点加进去。<a id="more"></a></li><li>并且在<strong>Master</strong>里面的 <strong>/etc/hosts</strong> 中添加新加节点的IP和节点的命名。（如果想用节点的命名来连接任意一台节点计算机的话，我们需要把这个操作在每台节点计算机上进行）</li><li>如果存在改变节点名字的操作，在<strong><em>文件scp传输的时候可能会有错误</em></strong>，但是在警告中下面的语句有提示让移除之前命名和IP的对应关系，复制下来直接操作就可以了，然后在接着使用scp进行文件传输就没有什么问题了。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hadoop安装_单机伪分布式配置</title>
      <link href="/2017/08/16/Hadoop%E5%AE%89%E8%A3%85_%E5%8D%95%E6%9C%BA%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/08/16/Hadoop%E5%AE%89%E8%A3%85_%E5%8D%95%E6%9C%BA%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hadoop安装-单机伪分布式配置"><a href="#Hadoop安装-单机伪分布式配置" class="headerlink" title="Hadoop安装_单机伪分布式配置"></a>Hadoop安装_单机伪分布式配置</h1><h2 id="创建hadoop账户"><a href="#创建hadoop账户" class="headerlink" title="创建hadoop账户"></a>创建hadoop账户</h2><p>添加用户：</p><pre><code>sudo useradd -m hadoop -s /bin/bash</code></pre><p>给用户设置密码：</p><pre><code>sudo passwd hadoop</code></pre><p>给用户管理员权限：</p><pre><code>sudo adduser hadoop sudo</code></pre><p>更新apt</p><pre><code>sudo apt-get update</code></pre><p>安装vim:</p><pre><code>sudo apt-get install vim</code></pre><a id="more"></a><h2 id="安装SSH、配置SSH无密码登陆"><a href="#安装SSH、配置SSH无密码登陆" class="headerlink" title="安装SSH、配置SSH无密码登陆"></a>安装SSH、配置SSH无密码登陆</h2><pre><code>sudo apt-get install openssh-serverssh localhostexit                           # 退出刚才的 ssh localhostcd ~/.ssh/                     # 若没有该目录，请先执行一次ssh localhostssh-keygen -t rsa              # 会有提示，都按回车就可以cat ./id_rsa.pub &gt;&gt; ./authorized_keys  # 加入授权</code></pre><p>此时再   ssh localhost   时就可以无密码访问了。</p><h2 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h2><pre><code>sudo apt-get install openjdk-8-jre openjdk-8-jdkdpkg -L openjdk-8-jdk | grep &#39;/bin/javac&#39;vim ~/.bashrcexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64source ~/.bashrc    # 使变量设置生效</code></pre><p>检查是否正确：</p><pre><code>echo $JAVA_HOME     # 检验变量值java -version$JAVA_HOME/bin/java -version  # 与直接执行 java -version 一样</code></pre><p>如果设置正确的话，$JAVA_HOME/bin/java -version 会输出 java 的版本信息，且和 java -version 的输出结果一样</p><h2 id="安装-Hadoop-2"><a href="#安装-Hadoop-2" class="headerlink" title="安装 Hadoop 2"></a>安装 Hadoop 2</h2><p>Hadoop 2 可以通过 <a href="http://mirror.bit.edu.cn/apache/hadoop/common/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/hadoop/common/</a> 或者 <a href="http://mirrors.cnnic.cn/apache/hadoop/common/" target="_blank" rel="noopener">http://mirrors.cnnic.cn/apache/hadoop/common/</a> 下载，一般选择下载最新的稳定版本，即下载 “stable” 下的 hadoop-2.x.y.tar.gz 这个格式的文件，这是编译好的，另一个包含 src 的则是 Hadoop 源代码，需要进行编译才可使用。</p><p>我们选择将 Hadoop 安装至 /usr/local/ 中：</p><pre><code>sudo tar -zxf ~/下载/hadoop-2.7.3.tar.gz -C /usr/local    # 解压到/usr/local中cd /usr/local/sudo mv ./hadoop-2.7.3/ ./hadoop            # 将文件夹名改为hadoopsudo chown -R hadoop ./hadoop       # 修改文件权限</code></pre><p><strong>Hadoop 解压后即可使用。输入如下命令来检查 Hadoop 是否可用，成功则会显示 Hadoop 版本信息：</strong></p><pre><code>cd /usr/local/hadoop./bin/hadoop version</code></pre><h2 id="Hadoop单机配置-非分布式"><a href="#Hadoop单机配置-非分布式" class="headerlink" title="Hadoop单机配置(非分布式)"></a>Hadoop单机配置(非分布式)</h2><p>【这一步个人认为可以用来检测hadoop是否安装成功，可以不用管的】</p><pre><code>cd /usr/local/hadoopmkdir ./inputcp ./etc/hadoop/*.xml ./input   # 将配置文件作为输入文件./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep ./input ./output &#39;dfs[a-z.]+&#39;  （和上面一行连着的）cat ./output/*          # 查看运行结果rm -r ./output</code></pre><h2 id="Hadoop伪分布式配置"><a href="#Hadoop伪分布式配置" class="headerlink" title="Hadoop伪分布式配置"></a>Hadoop伪分布式配置</h2><p>Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为 NameNode 也作为 DataNode，同时，读取的是 HDFS 中的文件。</p><p>Hadoop 的配置文件位于 /usr/local/hadoop/etc/hadoop/ 中，伪分布式需要修改2个配置文件 core-site.xml 和 hdfs-site.xml 。Hadoop的配置文件是 xml 格式，每个配置以声明 property 的 name 和 value 的方式来实现。</p><p>修改配置文件 <strong>core-site.xml</strong> (通过 vim 编辑会比较方便: vim ./etc/hadoop/core-site.xml)，将当中的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">修改为下面配置：</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">             &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;file:/usr/<span class="built_in">local</span>/hadoop/tmp&lt;/value&gt;</span><br><span class="line">             &lt;description&gt;Abase <span class="keyword">for</span> other temporary directories.&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">             &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>同样的，修改配置文件 <strong>hdfs-site.xml</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;file:/usr/<span class="built_in">local</span>/hadoop/tmp/dfs/name&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;file:/usr/<span class="built_in">local</span>/hadoop/tmp/dfs/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p><strong><em>配置完成后，执行 NameNode 的格式化:<br>成功的话，会看到 “successfully formatted” 和 “Exitting with status 0” 的提示，若为 “Exitting with status 1” 则是出错。</em></strong></p><p><strong>接着开启 NameNode 和 DataNode 守护进程。</strong></p><pre><code>./sbin/start-dfs.sh</code></pre><p><strong>输入yes（可能第一次需要）</strong><br>启动完成后，可以通过命令 jps 来判断是否成功启动，若成功启动则会列出如下进程: “NameNode”、”DataNode” 和 “SecondaryNameNode”（如果 SecondaryNameNode 没有启动，请运行 sbin/stop-dfs.sh 关闭进程，然后再次尝试启动尝试）。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。<br><strong>成功启动后，可以访问 Web 界面 <a href="http://localhost:50070/" target="_blank" rel="noopener">http://localhost:50070/</a> 查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。</strong></p><h2 id="运行Hadoop伪分布式实例"><a href="#运行Hadoop伪分布式实例" class="headerlink" title="运行Hadoop伪分布式实例"></a>运行Hadoop伪分布式实例</h2><p><strong>（配置时其实也可以不用管，它只是跑了一个例子）</strong></p><p>上面的单机模式，grep 例子读取的是本地数据，伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录：</p><pre><code>./bin/hdfs dfs -mkdir -p /user/hadoop</code></pre><p>接着将 ./etc/hadoop 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 /usr/local/hadoop/etc/hadoop 复制到分布式文件系统中的 /user/hadoop/input 中。我们使用的是 hadoop 用户，并且已创建相应的用户目录 /user/hadoop ，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是 /user/hadoop/input:</p><pre><code>./bin/hdfs dfs -mkdir input./bin/hdfs dfs -put ./etc/hadoop/*.xml input</code></pre><p>复制完成后，可以通过如下命令查看文件列表：</p><pre><code>./bin/hdfs dfs -ls input</code></pre><p>伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是HDFS中的文件（可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点）。</p><pre><code>./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output &#39;dfs[a-z.]+&#39;</code></pre><p>查看运行结果的命令（查看的是位于 HDFS 中的输出结果）：</p><pre><code>./bin/hdfs dfs -cat output/*</code></pre><p>我们也可以将运行结果取回到本地：</p><pre><code>rm -r ./output    # 先删除本地的 output 文件夹（如果存在）./bin/hdfs dfs -get output ./output     # 将 HDFS 上的 output 文件夹拷贝到本机cat ./output/*</code></pre><p>Hadoop 运行程序时，输出目录不能存在，否则会提示错误 “org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://localhost:9000/user/hadoop/output already exists” ，因此若要再次执行，需要执行如下命令删除 output 文件夹:</p><pre><code>./bin/hdfs dfs -rm -r output    # 删除 output 文件夹</code></pre><p>若要关闭 Hadoop，则运行</p><pre><code>./sbin/stop-dfs.sh</code></pre><h2 id="启动YARN"><a href="#启动YARN" class="headerlink" title="启动YARN"></a>启动YARN</h2><p>（伪分布式不启动 YARN 也可以，一般不会影响程序执行）</p><p>YARN 是从 MapReduce 中分离出来的，负责资源管理与任务调度。YARN 运行于 MapReduce 之上，提供了高可用性、高扩展性</p><p><strong>上述通过 ./sbin/start-dfs.sh 启动 Hadoop，仅仅是启动了 MapReduce 环境，我们可以启动 YARN ，让 YARN 来负责资源管理与任务调度。</strong></p><p>首先修改配置文件 mapred-site.xml，这边需要先进行重命名：</p><pre><code>mv ./etc/hadoop/mapred-site.xml.template ./etc/hadoop/mapred-site.xml</code></pre><p>然后再进行编辑，同样使用 vim 编辑 <strong>vim ./etc/hadoop/mapred-site.xml</strong> ：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">             &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>接着修改配置文件 <strong>yarn-site.xml</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">             &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以启动 YARN 了（需要先执行过 ./sbin/start-dfs.sh）：</p><pre><code>./sbin/start-yarn.sh      # 启动YARN./sbin/mr-jobhistory-daemon.sh start historyserver  # 开启历史服务器，才能在Web中查看任务运行情况</code></pre><p>开启后通过 <strong>jps</strong> 查看，可以看到多了 NodeManager 和 ResourceManager 两个后台进程<br>启动 YARN 之后，运行实例的方法还是一样的，仅仅是资源管理方式、任务调度不同。观察日志信息可以发现，不启用 YARN 时，是 “mapred.LocalJobRunner” 在跑任务，启用 YARN 之后，是 “mapred.YARNRunner” 在跑任务。启动 YARN 有个好处是可以通过 Web 界面查看任务的运行情况：<a href="http://master:8088/cluster" target="_blank" rel="noopener">http://master:8088/cluster</a>，</p><p>同样的，关闭 YARN 的脚本如下：</p><pre><code>./sbin/stop-yarn.sh./sbin/mr-jobhistory-daemon.sh stop historyserver</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Hadoop集群安装配置教程_Hadoop2.6.0_Ubuntu/CentOS：<br><a href="http://www.powerxing.com/install-hadoop-cluster/" target="_blank" rel="noopener">http://www.powerxing.com/install-hadoop-cluster/</a></p><p>Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04<br><a href="http://www.powerxing.com/install-hadoop/" target="_blank" rel="noopener">http://www.powerxing.com/install-hadoop/</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hadoop集群安装配置教程</title>
      <link href="/2017/08/16/Hadoop%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/2017/08/16/Hadoop%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hadoop集群安装"><a href="#hadoop集群安装" class="headerlink" title="hadoop集群安装"></a>hadoop集群安装</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>Hadoop 集群的安装配置大致为如下流程:</p><pre><code>1、选定一台机器作为 Master2、在 Master 节点上配置 hadoop 用户、安装 SSH server、安装 Java 环境3、在 Master 节点上安装 Hadoop，并完成配置4、在其他 Slave 节点上配置 hadoop 用户、安装 SSH server、安装 Java 环境5、将 Master 节点上的 /usr/local/hadoop 目录复制到其他 Slave 节点上6、在 Master 节点上开启 Hadoop</code></pre><a id="more"></a><h2 id="创建hadoop账户"><a href="#创建hadoop账户" class="headerlink" title="创建hadoop账户"></a>创建hadoop账户</h2><p>添加用户：</p><pre><code>sudo useradd -m hadoop -s /bin/bash</code></pre><p>给用户设置密码：</p><pre><code>sudo passwd hadoop</code></pre><p>给用户管理员权限：</p><pre><code>sudo adduser hadoop sudo</code></pre><h2 id="更新apt"><a href="#更新apt" class="headerlink" title="更新apt"></a>更新apt</h2><pre><code>sudo apt-get update</code></pre><p>安装vim:</p><pre><code>sudo apt-get install vim</code></pre><h2 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h2><pre><code>sudo apt-get install openjdk-8-jre openjdk-8-jdkdpkg -L openjdk-8-jdk | grep &#39;/bin/javac&#39;vim ~/.bashrcexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64source ~/.bashrc    # 使变量设置生效检查是否正确：echo $JAVA_HOME     # 检验变量值java -version$JAVA_HOME/bin/java -version  # 与直接执行 java -version 一样</code></pre><p>如果设置正确的话，$JAVA_HOME/bin/java -version 会输出 java 的版本信息，且和 java -version 的输出结果一样</p><h2 id="安装-Hadoop-2"><a href="#安装-Hadoop-2" class="headerlink" title="安装 Hadoop 2"></a>安装 Hadoop 2</h2><p>Hadoop 2 可以通过 <a href="http://mirror.bit.edu.cn/apache/hadoop/common/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/hadoop/common/</a> 或者 <a href="http://mirrors.cnnic.cn/apache/hadoop/common/" target="_blank" rel="noopener">http://mirrors.cnnic.cn/apache/hadoop/common/</a> 下载，一般选择下载最新的稳定版本，即下载 “stable” 下的 hadoop-2.x.y.tar.gz 这个格式的文件，这是编译好的，另一个包含 src 的则是 Hadoop 源代码，需要进行编译才可使用。</p><h3 id="我们选择将-Hadoop-安装至-usr-local-中："><a href="#我们选择将-Hadoop-安装至-usr-local-中：" class="headerlink" title="我们选择将 Hadoop 安装至 /usr/local/ 中："></a>我们选择将 Hadoop 安装至 /usr/local/ 中：</h3><pre><code>sudo tar -zxf ~/下载/hadoop-2.7.3.tar.gz -C /usr/local    # 解压到/usr/local中cd /usr/local/sudo mv ./hadoop-2.7.3/ ./hadoop            # 将文件夹名改为hadoopsudo chown -R hadoop ./hadoop       # 修改文件权限Hadoop 解压后即可使用。输入如下命令来检查 Hadoop 是否可用，成功则会显示 Hadoop 版本信息：cd /usr/local/hadoop./bin/hadoop version</code></pre><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>假设集群<strong>所用的节点都位于同一个局域网</strong>。</p><p>首先在 Master 节点上完成准备工作，并关闭 Hadoop (/usr/local/hadoop/sbin/stop-dfs.sh)，再进行后续集群配置。</p><p>为了便于区分，可以修改各个节点的主机名（在终端标题、命令行中可以看到主机名，以便区分）。在 Ubuntu中，我们在 Master 节点上执行如下命令修改主机名（即改为 Master，注意是区分大小写的）：</p><p>设置主机名：</p><pre><code>sudo vim /etc/hostname</code></pre><p>设置IP</p><pre><code>sudo vim /etc/hosts</code></pre><p>设置如下：</p><pre><code>192.168.1.121   Master192.168.1.122   Slave1</code></pre><p>我们在 /etc/hosts 中将该映射关系填写上去即可，如下图所示（一般该文件中只有一个 127.0.0.1，其对应名为 localhost，如果有多余的应删除，特别是不能有 “127.0.0.1 Master” 这样的记录）</p><p>配置好后需要在各个节点上执行如下命令，测试是否相互 ping 得通，如果 ping 不通，后面就无法顺利配置成功：<br>ping Master -c 3   # 只ping 3次，否则要按 Ctrl+c 中断<br>ping Slave1 -c 3</p><p><strong>继续下一步配置前，请先完成所有节点的网络配置，修改过主机名的话需重启才能生效。</strong></p><h2 id="SSH无密码登陆节点"><a href="#SSH无密码登陆节点" class="headerlink" title="SSH无密码登陆节点"></a>SSH无密码登陆节点</h2><pre><code>sudo apt-get install openssh-server</code></pre><p><strong>Master上面操作：</strong></p><p>首先生成 Master 节点的公匙，在 Master 节点的终端中执行（因为改过主机名，所以还需要删掉原有的再重新生成一次）：</p><pre><code>cd ~/.ssh               # 如果没有该目录，先执行一次ssh localhostrm ./id_rsa*            # 删除之前生成的公匙（如果有）ssh-keygen -t rsa       # 一直按回车就可以</code></pre><p>让 Master 节点需能无密码 SSH 本机，在 Master 节点上执行：</p><pre><code>cat ./id_rsa.pub &gt;&gt; ./authorized_keys    </code></pre><p>完成后可执行 ssh Master 验证一下（可能需要输入 yes，成功后执行 exit 返回原来的终端）。接着在 Master 节点将上公匙传输到 Slave1 节点：（当然多个节点的话，每个节点都要传输）</p><pre><code>scp ~/.ssh/id_rsa.pub hadoop@Slave1:/home/hadoop/</code></pre><p><strong>Slave1上面操作：</strong></p><p>接着在 Slave1 节点上，将 ssh 公匙加入授权：</p><pre><code>mkdir ~/.ssh       # 如果不存在该文件夹需先创建，若已存在则忽略cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keysrm ~/id_rsa.pub    # 用完就可以删掉了</code></pre><p>如果有其他 Slave 节点，也要执行将 Master 公匙传输到 Slave 节点、在 Slave 节点上加入授权这两步。<br>（如果配置好了以后可以用 ssh Slave1 指令检验，发现可以不用密码就可以连接上了）</p><h3 id="配置PATH变量"><a href="#配置PATH变量" class="headerlink" title="配置PATH变量"></a>配置PATH变量</h3><p>在单机伪分布式配置教程的最后，说到可以将 Hadoop 安装目录加入 PATH 变量中，这样就可以在任意目录中直接使用 hadoo、hdfs 等命令了，如果还没有配置的，需要在 Master 节点上进行配置。首先执行 vim ~/.bashrc，加入一行：</p><pre><code>export PATH=$PATH:/usr/local/hadoop/bin:/usr/local/hadoop/sbin</code></pre><p>保存后执行 </p><pre><code>source ~/.bashrc </code></pre><p>使配置生效</p><h3 id="配置集群-分布式环境"><a href="#配置集群-分布式环境" class="headerlink" title="配置集群/分布式环境"></a>配置集群/分布式环境</h3><p>集群/分布式模式需要修改 <strong><em>/usr/local/hadoop/etc/hadoop</em></strong> 中的5个配置文件，更多设置项可点击查看官方说明，这里仅设置了正常启动所必须的设置项： slaves、core-site.xml、hdfs-site.xml、mapred-site.xml、yarn-site.xml 。</p><p><strong><em>1,</em></strong> 文件 slaves，将作为 DataNode 的主机名写入该文件，每行一个，默认为 localhost，所以在伪分布式配置时，节点即作为 NameNode 也作为 DataNode。分布式配置可以保留 localhost，也可以删掉，让 Master 节点仅作为 NameNode 使用。</p><p>本教程让 Master 节点仅作为 NameNode 使用，因此<strong><em>将文件中原来的 localhost 删除，只添加一行内容：Slave1。（相应的如果有多个节点要都添加上的）</em></strong></p><p><strong><em>2,</em></strong> 文件 <strong><em>core-site.xml</em></strong> 改为下面的配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hdfs:<span class="comment">//Master:9000&lt;/value&gt;</span></span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p><strong><em>3,</em></strong> 文件 <strong><em>hdfs-site.xml</em></strong>，dfs.replication 一般设为 3，但我们只有一个 Slave 节点，所以 dfs.replication 的值还是设为 1：（如果是多个节点还是改为3）【这里的参数我的理解是数据备份多少次】<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;Slave0:50090&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p><strong><em>4, </em></strong>文件 <strong><em>mapred-site.xml</em></strong> （可能需要先重命名，默认文件名为 mapred-site.xml.template），然后配置修改如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;Master:10020&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;Master:19888&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p><strong><em>5,</em></strong> 文件 yarn-site.xml：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;Master&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>配置好后，将 Master 上的 /usr/local/Hadoop 文件夹复制到各个节点上。因为之前有跑过伪分布式模式，建议在切换到集群模式前先删除之前的临时文件。</p><p><strong><em>在 Master 节点上执行：</em></strong></p><pre><code>cd /usr/localsudo rm -r ./hadoop/tmp     # 删除 Hadoop 临时文件sudo rm -r ./hadoop/logs/*   # 删除日志文件tar -zcf ~/hadoop.master.tar.gz ./hadoop   # 先压缩再复制cd ~scp ./hadoop.master.tar.gz Slave1:/home/hadoop</code></pre><p><strong><em>在 Slave1 节点上执行：</em></strong>（如果有多个节点每个节点上都要执行一遍）</p><pre><code>sudo rm -r /usr/local/hadoop    # 删掉旧的（如果存在）sudo tar -zxf ~/hadoop.master.tar.gz -C /usr/localsudo chown -R hadoop /usr/local/hadoop</code></pre><p>（如果启动不成功的话可以删除  /usr/loval  目录下的 logs和 tmp 再重新操作一次）<br>同样，如果有其他 Slave 节点，也要执行将 hadoop.master.tar.gz 传输到 Slave 节点、在 Slave 节点解压文件的操作。</p><p><strong><em>首次启动需要先在 Master 节点执行 NameNode 的格式化：</em></strong></p><pre><code>hdfs namenode -format       # 首次运行需要执行初始化，之后不需要</code></pre><p>接着可以启动 hadoop 了，启动需要在 Master 节点上进行：</p><pre><code>start-dfs.shstart-yarn.shmr-jobhistory-daemon.sh start historyserver也可以在更目录下面执行start-all.shmr-jobhistory-daemon.sh start historyserver</code></pre><p>通过命令 jps 可以查看各个节点所启动的进程。<br>正确的话，在 Master 节点上可以看到 NameNode、ResourceManager、SecondrryNameNode、JobHistoryServer 进程</p><p>在 <strong>Slave</strong> 节点可以看到 DataNode 和 NodeManager 进程.</p><p>缺少任一进程都表示出错。另外还需要在 Master 节点上通过命令 hdfs dfsadmin -report 查看 DataNode 是否正常启动，如果 Live datanodes 不为 0 ，则说明集群启动成功。</p><p>也可以通过 Web 页面看到查看 DataNode 和 NameNode 的状态：<a href="http://master:50070/" target="_blank" rel="noopener">http://master:50070/</a>。如果不成功，可以通过启动日志排查原因。</p><p>同样可以通过 Web 界面查看任务进度 <a href="http://master:8088/cluster" target="_blank" rel="noopener">http://master:8088/cluster</a>，在 Web 界面点击 “Tracking UI” 这一列的 History 连接，可以看到任务的运行信息</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Hadoop集群安装配置教程_Hadoop2.6.0_Ubuntu/CentOS：<br><a href="http://www.powerxing.com/install-hadoop-cluster/" target="_blank" rel="noopener">http://www.powerxing.com/install-hadoop-cluster/</a></p><p>Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04<br><a href="http://www.powerxing.com/install-hadoop/" target="_blank" rel="noopener">http://www.powerxing.com/install-hadoop/</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>建立自己的github博客</title>
      <link href="/2017/08/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84github%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/08/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84github%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="可以根据博客中的hello-world文件中讲述的安装"><a href="#可以根据博客中的hello-world文件中讲述的安装" class="headerlink" title="可以根据博客中的hello-world文件中讲述的安装"></a>可以根据博客中的hello-world文件中讲述的安装</h1><h1 id="下面是一些详细的步骤"><a href="#下面是一些详细的步骤" class="headerlink" title="下面是一些详细的步骤"></a>下面是一些详细的步骤</h1><p>1、安装node,可以去node的官网直接下载 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> （这里我下载的是node-v6.11.1-x64）<br>2、安装hexo，可以打开cmd终端输入</p><pre><code>npm install -g hexo-cli</code></pre><a id="more"></a><p>3、安装完hexo后开始在电脑上建立一下自己写博客的文件夹，依旧是在cmd终端中运行</p><pre><code>cd C:\Users\Darren\Documents     #实际上是进入了电脑的文档文件夹mkdir blogcd bloghexo init blogcd bloghexo s然后就可以用 http://localhost:4000/ 来查看博客是否安装成功npm install hexo-deployer-git --save</code></pre><p>4、修改_config.yml这个配置文件</p><pre><code># Sitetitle: Darrensubtitle: 海亮的笔记本description:author: Darrenlanguage: zh-Hanstimezone:# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: </code></pre><p>repo是自己在自己github中建立的地址</p><p>5、开始部署</p><pre><code>hexo d</code></pre><p>之后可以去看一下你的博客就好了</p><p><a href="https://huanghailiang.github.io/">https://huanghailiang.github.io/</a></p><p>到此博客基本搭建完成了，剩下的东西就可以按照自己的兴趣去自己配置了。</p><h1 id="如果标签没有的话需要自己新建一个"><a href="#如果标签没有的话需要自己新建一个" class="headerlink" title="如果标签没有的话需要自己新建一个"></a>如果标签没有的话需要自己新建一个</h1><pre><code>hexo new page tags里面修改为：---title: tagsdate: 2017-08-15 11:06:32type: tags---</code></pre>]]></content>
      
      
        <tags>
            
            <tag> 搭建自己的github博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深度学习环境搭建------by邵碧尧</title>
      <link href="/2017/07/23/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/07/23/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><em>转自：</em></strong><a href="https://blog.csdn.net/Roger17/article/details/75258606" title="碧尧博客地址" target="_blank" rel="noopener">碧尧博客地址</a></p><h1 id="深度学习环境搭建"><a href="#深度学习环境搭建" class="headerlink" title="深度学习环境搭建"></a>深度学习环境搭建</h1><p>开始接触深度学习一年多时间了，总是有种技术发展飞快，没等你掌握现有技术更牛X的技术又出来了。身处AI浪潮中，到现在越发有种感觉：深度学习可能很多问题都能解决，但我们自己并没有那么多精力去研究那么多方面，自然语言处理，自动驾驶，人脸识别等等，选定一个方向深入研究才是正解。至少目前是这么理解的，不对希望朋友指正！</p><p>如今深度学习的框架很多，Caffe，TensorFlow，Torch等都各有各的优势，开始深度学习不可避免要配置深度学习的工作环境，如果不知道方法也许在开头就会花费很多时间，写这篇博客的目的就是帮助大家更快上手。下面介绍Caffe在Ubuntu 16.04上的搭建过程（Ubuntu 14.04同样可以）<br><a id="more"></a></p><h2 id="Caffe"><a href="#Caffe" class="headerlink" title="Caffe"></a>Caffe</h2><p>Caffe的环境搭建在几个框架中是最麻烦的，因为Caffe用到的依赖库很多，如果配置GPU版有时候显卡驱动和CUDA也能把你折腾好久。CPU版和GPU版主要差别就是在NVIDIA显卡驱动和CUDA的安装上，其他框架要用到NVIDIA显卡其实差别也就是这样，因此这也算服务器基础。两个版本有区别的地方会注明。</p><h3 id="Nvidia-driver"><a href="#Nvidia-driver" class="headerlink" title="Nvidia driver"></a>Nvidia driver</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install nvidia-352 % 版本自己查询</span><br><span class="line"></span><br><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure><p>重启后用下面命令查看驱动版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure><h3 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h3><p>到<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">CUDA</a>官网下载CUDA安装文件，选择对应版本</p><img src="/images/caffe_1.png"><p>这里有下载deb [local]文件，后面会说runfile [local]的用法，先卖个关子。<br>下载好后cd到存放安装的文件夹，使用一下命令，文件名千万别手输，善用tab键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i cuda-repo-ubuntu1604*amd64.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install cuda</span><br></pre></td></tr></table></figure><p>安装结束，添加环境变量（如果安装服务器，环境变量在每个用户下都需要添加一次，应该是有更聪明的方法，目前还没有找到）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export PATH=/usr/local/cuda/bin:$PATH&apos; &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line">echo &apos;export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH&apos; &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>查看安装CUDA版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p>显示下图信息说明安装好了</p><img src="/images/caffe_2.png"><p>再重启下电脑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure><h3 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h3><p>这是深度学习训练过程中的加速算法包，到<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">cuDNN</a> 下载对应的安装包，cd到安装包所在文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar xvf cudnn*.tgz</span><br><span class="line"></span><br><span class="line">cd cuda</span><br><span class="line"></span><br><span class="line">sudo cp */*.h /usr/local/cuda/include/</span><br><span class="line"></span><br><span class="line">sudo cp */libcudnn* /usr/local/cuda/lib64/</span><br><span class="line"></span><br><span class="line">sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure><p>上面说runfile (local)卖了个关子，可以显卡驱动和CUDA一起安装，属于比较方便的方法，和之前的方法有什么差别目前还不知道</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_8.0.61_375.26_linux.run</span><br></pre></td></tr></table></figure><p>运行这句命令，接下来根据提示操作就好了<br>结束后按照上面的方法添加环境变量</p><h3 id="依赖库安装（CPU版从这里开始）"><a href="#依赖库安装（CPU版从这里开始）" class="headerlink" title="依赖库安装（CPU版从这里开始）"></a>依赖库安装（CPU版从这里开始）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"></span><br><span class="line">sudo apt-get install build-essential cmake g++ gfortran git pkg-config python-dev software-properties-common wget</span><br><span class="line"></span><br><span class="line">sudo apt-get autoremove</span><br><span class="line"></span><br><span class="line">sudo rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line"></span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y libatlas-base-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y python-pip</span><br></pre></td></tr></table></figure><h3 id="下载Caffe"><a href="#下载Caffe" class="headerlink" title="下载Caffe"></a>下载Caffe</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">mkdir git //在home下新建一个git文件夹，用来存放那些从github上git下来的文件</span><br><span class="line"></span><br><span class="line">git clone https://github.com/BVLC/caffe.git //从github上git caffe</span><br><span class="line"></span><br><span class="line">cd caffe</span><br><span class="line"></span><br><span class="line">cp Makefile.config.example Makefile.config</span><br></pre></td></tr></table></figure><p>修改Makefile.config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//如果你不使用GPU的话，就将</span><br><span class="line"></span><br><span class="line"># CPU_ONLY := 1</span><br><span class="line"></span><br><span class="line">修改成：</span><br><span class="line"></span><br><span class="line">CPU_ONLY := 1</span><br><span class="line"></span><br><span class="line">//若使用cudnn，则将</span><br><span class="line"></span><br><span class="line"># USE_CUDNN := 1</span><br><span class="line"></span><br><span class="line">修改成：</span><br><span class="line"></span><br><span class="line">USE_CUDNN := 1</span><br><span class="line"></span><br><span class="line">//若使用的opencv版本是3的，则将</span><br><span class="line"></span><br><span class="line"># OPENCV_VERSION := 3</span><br><span class="line"></span><br><span class="line">修改为：</span><br><span class="line"></span><br><span class="line">OPENCV_VERSION := 3</span><br><span class="line"></span><br><span class="line">//若要使用python来编写layer，则需要将</span><br><span class="line"></span><br><span class="line"># WITH_PYTHON_LAYER := 1</span><br><span class="line"></span><br><span class="line">修改为</span><br><span class="line"></span><br><span class="line">WITH_PYTHON_LAYER := 1</span><br><span class="line"></span><br><span class="line">//重要的一项</span><br><span class="line"></span><br><span class="line">将# Whatever else you find you need goes here.下面的</span><br><span class="line"></span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include</span><br><span class="line"></span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib</span><br><span class="line"></span><br><span class="line">修改为：</span><br><span class="line"></span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial</span><br><span class="line"></span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br><span class="line"></span><br><span class="line">//这是因为ubuntu16.04的文件包含位置发生了变化，尤其是需要用到的hdf5的位置，所以需要更改这一路径</span><br></pre></td></tr></table></figure><p>创建Hdf5文件链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -exec sed -i -e &apos;s^&quot;hdf5.h&quot;^&quot;hdf5/serial/hdf5.h&quot;^g&apos; -e &apos;s^&quot;hdf5_hl.h&quot;^&quot;hdf5/serial/hdf5_hl.h&quot;^g&apos; &apos;&#123;&#125;&apos; \;</span><br><span class="line"></span><br><span class="line">cd /usr/lib/x86_64-linux-gnu</span><br><span class="line"></span><br><span class="line">sudo ln -s libhdf5_serial.so.10.1.0 libhdf5.so</span><br><span class="line"></span><br><span class="line">sudo ln -s libhdf5_serial_hl.so.10.0.2 libhdf5_hl.so</span><br></pre></td></tr></table></figure><p>执行caffe下python文件夹下的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd python</span><br><span class="line"></span><br><span class="line">for req in $(cat requirements.txt); do pip install $req; done</span><br><span class="line"></span><br><span class="line">\\目的是检查caffe所需要的python的库的版本，如果出现红字错误说明版本不满足要求，执行下面语句</span><br><span class="line"></span><br><span class="line">for req in $(cat requirements.txt); do sudo -H pip install $req --upgrade; done</span><br></pre></td></tr></table></figure><p>编辑/usr/local/cuda/include/host_config.h，将其中的第115行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#error -- unsupported GNU version! gcc versions later than 4.9 are not supported!</span><br><span class="line">% 改为</span><br><span class="line">//#error -- unsupported GNU version! gcc versions later than 4.9 are not supported!</span><br></pre></td></tr></table></figure><p>make 各种文件（cd到Caffe文件夹）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">make all -j8 //j8代表计算机cpu有8个核，因此可以多线程一起make，这样make的速度会快很多。一般常用的还有j4</span><br><span class="line"></span><br><span class="line">make test -j8</span><br><span class="line"></span><br><span class="line">make runtest -j8</span><br><span class="line"></span><br><span class="line">make pycaffe //编译python接口</span><br><span class="line"></span><br><span class="line">make distribute</span><br></pre></td></tr></table></figure></p><p>到这里搭建完毕</p>]]></content>
      
      
        <tags>
            
            <tag> 深度学习环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装远程图形界面x2go------by邵碧尧</title>
      <link href="/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_5/"/>
      <url>/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_5/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><em>转自：</em></strong><a href="https://blog.csdn.net/Roger17/article/details/74780042" title="碧尧博客地址" target="_blank" rel="noopener">碧尧博客地址</a></p><h1 id="手把手教你配置Ubuntu-server服务器"><a href="#手把手教你配置Ubuntu-server服务器" class="headerlink" title="手把手教你配置Ubuntu server服务器"></a>手把手教你配置Ubuntu server服务器</h1><h2 id="安装远程图形界面x2go"><a href="#安装远程图形界面x2go" class="headerlink" title="安装远程图形界面x2go"></a>安装远程图形界面x2go</h2><p>Ubuntu server 安装完成只有命令行界面，一般的工作在Windows下用 <a href="https://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">xshell</a> 和 <a href="https://winscp.net/eng/index.php" target="_blank" rel="noopener">winscp</a> ，一个输命令行，一个进行界面化文件管理，还是挺方便的， 但部分用户还是希望有个图形界面更加方便科研工作开展，这里推荐x2go这个轻量化桌面，安装也比较方便，下面就来介绍。<br><a id="more"></a><br>首先在服务器上安装一些必要的软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:x2go/stable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install x2goserver x2goserver-xsession</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y xfce4 xfce4-goodies xubuntu-desktop</span><br></pre></td></tr></table></figure><p>很简单，几条命令结束就OK了。结束用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname -I</span><br></pre></td></tr></table></figure><p>查看ip，后面在Windows下要用到</p><p>然后在 Windows 或者 OS X 下安装一个客户端 <a href="http://wiki.x2go.org/doku.php/download:start" target="_blank" rel="noopener">x2go client</a> ,安装结束打开会跳出如下窗口</p><img src="/images/server_5-1.png"><p>在”Host” 中填写服务器ip<br>“Login”中填写要登录的username<br>“Session type”下拉菜单选择“XFCE”，点击OK结束。</p><img src="/images/server_5-2.png"><p>在这里输入密码就可以远程连接服务器，同时拥有图形界面了。</p><p>配置服务器系列到这里就结束了，小白我自己也在后面多多积累相关的技巧，有了新的经验再来更新，希望大家支持！</p>]]></content>
      
      
        <tags>
            
            <tag> 手把手教你配置Ubuntu server服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>管理服务器用户------by邵碧尧</title>
      <link href="/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_4/"/>
      <url>/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_4/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><em>转自：</em></strong><a href="https://blog.csdn.net/Roger17/article/details/74779908" title="碧尧博客地址" target="_blank" rel="noopener">碧尧博客地址</a></p><h1 id="手把手教你配置Ubuntu-server服务器"><a href="#手把手教你配置Ubuntu-server服务器" class="headerlink" title="手把手教你配置Ubuntu server服务器"></a>手把手教你配置Ubuntu server服务器</h1><h2 id="管理服务器用户"><a href="#管理服务器用户" class="headerlink" title="管理服务器用户"></a>管理服务器用户</h2><p>管理服务器用户，一项一项开始说，首先要管理，当然要现有用户咯。添加用户我是用adduser 命令，相当于一个简单的交互过程，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser username</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后会让你确定用户名，用户密码这些信息，结束后在/home目录下就有一个对应用户名的文件夹了。<br>管理员添加用户后，用户自己可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>来更新自己的密码。</p><p>哪天可能那个用户惹到root管理员了，管理员要删掉那个用户，怎么操作，非常简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel username</span><br></pre></td></tr></table></figure><p>秒删好吧！所以不要惹管理员</p><p>如果想修改用户名有改怎么办，有几种方案</p><p>第一种，简单粗暴，按照上面的方法删掉用户重新建</p><p>第二种，优雅一点，两条命令搞定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -l New_Login_Name, -md Home_Directory Old_Login_Name </span><br><span class="line">groupmod -n NewName OldName</span><br></pre></td></tr></table></figure><p>管理员会给服务器装一些基本的软件，有的用户想装自己需要的软件，但是没有权限怎么办嘞？每次都找管理员也是烦的，因此可以给部分用户 sudo 权限，怎么操作呢？<br>修改/etc/sudoers文件，在 root ALL=(ALL) ALL下方添加要给权限的用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root ALL=(ALL) ALL</span><br><span class="line">username ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>还有种方法就是直接创建管理者账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser username sudo</span><br></pre></td></tr></table></figure><p>以上就是一些最基本的用户管理指令，刚开始是够用了，到后面反正慢慢积累嘛</p>]]></content>
      
      
        <tags>
            
            <tag> 手把手教你配置Ubuntu server服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设置服务器网络------by邵碧尧</title>
      <link href="/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_3/"/>
      <url>/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><em>转自：</em></strong><a href="https://blog.csdn.net/Roger17/article/details/74719876" title="碧尧博客地址" target="_blank" rel="noopener">碧尧博客地址</a></p><h1 id="手把手教你配置Ubuntu-server服务器"><a href="#手把手教你配置Ubuntu-server服务器" class="headerlink" title="手把手教你配置Ubuntu server服务器"></a>手把手教你配置Ubuntu server服务器</h1><h2 id="设置服务器网络"><a href="#设置服务器网络" class="headerlink" title="设置服务器网络"></a>设置服务器网络</h2><p>之前两篇讲了服务器系统安装和硬盘挂载，这篇总结下网络设置。具体开始讲之前先说说如何实现其他人可以访问服务器。一种方法是由一个网口出来接路由器，用户都连接到路由器的网络上，不管是通过有线还是WiFi，把用户都归到同一个网络下。另一种方法就比较bug了，像清华大学那样，整个学校有线网和无线的Tsinghua都是同一个网络，所以就不需要路由器了，之前不知道还倒腾了很久。又有人要问了，那如何让外网的人可以访问服务器呢？不好意思，我没有研究过，另一个原因也是担心网络安全的问题，毕竟没有学过相关的知识，所以搭个服务器内部用就完了。如果有大神在这方面比较有研究，我也非常欢迎交流。（邮箱：shaobiyao@gmail.com）<br><a id="more"></a><br>说回来，先解决基本问题再说</p><p>sudo vim /etc/network/interfaces</p><p>修改如下部分：</p><p>auto eth0（这个名称每台机器不一样，可以通过ifconfig -a查询）<br>iface eth0 inet static<br>address 192.168.0.117 #选用同一个网络下不冲突的ip<br>gateway 192.168.0.1 #gateway and netmask 可以通过查看同一网络下的Windows电脑的信息获得，都一样的<br>netmask 255.255.255.0</p><p>sudo vim /etc/resolvconf/resolv.conf.d/base(网上有说修改/etc/resolv.conf的，这个文件修改完会被系统覆盖，等于白改)<br>nameserver XXX.XXX.XXX.XXX #和同一网络中Windows的电脑一样</p><p>重启网卡：</p><p>sudo /etc/init.d/network restart</p><p>用ping www.baidu.com测试是否成功</p>]]></content>
      
      
        <tags>
            
            <tag> 手把手教你配置Ubuntu server服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>服务器多硬盘挂载------by邵碧尧</title>
      <link href="/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_2/"/>
      <url>/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><em>转自：</em></strong><a href="https://blog.csdn.net/Roger17/article/details/74689926" title="碧尧博客地址" target="_blank" rel="noopener">碧尧博客地址</a></p><h1 id="手把手教你配置Ubuntu-server服务器"><a href="#手把手教你配置Ubuntu-server服务器" class="headerlink" title="手把手教你配置Ubuntu server服务器"></a>手把手教你配置Ubuntu server服务器</h1><h2 id="服务器多硬盘挂载"><a href="#服务器多硬盘挂载" class="headerlink" title="服务器多硬盘挂载"></a>服务器多硬盘挂载</h2><p>现在科研中需要处理的数据量经常性会非常大，因此服务器基本都会采用固态硬盘加机械硬盘的解决方案来实现服务器性能和成本的平衡，系统装在固态中，用户数据和数据集存放在机械硬盘中。接下来就讲下如何挂载硬盘</p><p>参考网页：</p><p><a href="http://zwkufo.blog.163.com/blog/static/258825120141283942244/" target="_blank" rel="noopener">http://zwkufo.blog.163.com/blog/static/258825120141283942244/</a><br><a href="http://www.jianshu.com/p/5c12289dbcd1" target="_blank" rel="noopener">http://www.jianshu.com/p/5c12289dbcd1</a><br><a id="more"></a><br>sudo fdisk –lu (查看当前硬盘及分区情况) 可以看到类似界面</p><img src="/images/server_2-1.png"><p>列表中我们可以看到所有硬盘，找到要挂载的硬盘名称，例如/dev/sdb</p><ol><li><p>sudo fdisk /dev/sdb(这里为想要挂载的硬盘名称)，利用该命令可以对硬盘进行分区，具体可以参考网页1中的讲解更加详细</p></li><li><p>sudo mkfs –t ext4 /dev/sdb(硬盘格式化，-t ext4 表示将分区格式化成ext4文件系统类型)</p></li><li><p>sudo df –l(显示硬盘挂载情况)<br>sudo mount –t ext4 /dev/sdb(想要挂载的硬盘) /devdata(目标挂载点)<br>结束后可以用sudo df –l 查看是否成功</p></li><li>配置系统启动自动挂载，修改/etc/fstab文件，添加<h1 id="devdata-was-on-dev-sdb"><a href="#devdata-was-on-dev-sdb" class="headerlink" title="/devdata was on /dev/sdb"></a>/devdata was on /dev/sdb</h1>UUID=37eaa526-5d96-4237-8468-603df5216ce9  /devdata(挂载点)   ext4   defaults     0     2<br>硬盘的UUID通过命令 sudo blkid 进行查看</li></ol><p>这样就把/dev/sdb挂载到/devdata这个文件夹下了。有人要问了，我不要挂这里，要把硬盘挂到/home目录下怎么办？接下来就是解决这个问题</p><p>首先要做的是卸载原先的挂载点，怎么做，很简单， sudo umount /dev/sdb(这里好像是写挂载的文件夹名也可以，但我没有试过)，再用 sudo df -l 查看，原先挂载的硬盘就没有了。</p><p>接下来你得挂载已经分区好的硬盘，然后把 home 目录下的全部文件拷贝到硬盘挂载的目录下。然后删除 home 目录，最后把第一步挂载好的新硬盘重新挂载在 home 目录下。</p><p>挂载设置好的硬盘</p><img src="/images/server_2-2.png"><p>同步 home 目录所有文件，删除之前的 home 目录下的所有文件</p><img src="/images/server_2-3.png"><p>确定同步成功之后，删除旧 home 目录</p><img src="/images/server_2-4.png"><p>重新挂载新硬盘并设置启动挂载</p><img src="/images/server_2-5.png"><p>这里如果失败的话就修改/etc/fstab文件，把原先的挂载点改成/home<br>再 sudo df -l，就可以看到成功挂载到/home下了，不过这样对新机器是没什么影响，如果原先机器上有非root用户，这样操作后就GG了，还是要做好数据备份</p>]]></content>
      
      
        <tags>
            
            <tag> 手把手教你配置Ubuntu server服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu server 16.04 安装教程------by邵碧尧</title>
      <link href="/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_1/"/>
      <url>/2017/07/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEUbuntu%20server%E6%9C%8D%E5%8A%A1%E5%99%A8_1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><em>转自：</em></strong><a href="https://blog.csdn.net/Roger17/article/details/74567778" title="碧尧博客地址" target="_blank" rel="noopener">碧尧博客地址</a></p><h1 id="手把手教你配置Ubuntu-server服务器"><a href="#手把手教你配置Ubuntu-server服务器" class="headerlink" title="手把手教你配置Ubuntu server服务器"></a>手把手教你配置Ubuntu server服务器</h1><p>近期实验室来了台新的服务器，第一次从头到尾把配置过程走了一遍，特来此总结一番，希望可以帮助到想入坑的童鞋。我将从以下几个方面来总结配置服务器的过程(系统版本为Ubuntu server 16.04)</p><ul><li><strong>Ubuntu server 16.04 安装教程</strong></li><li><strong>服务器多硬盘挂载</strong></li><li><strong>设置服务器网络</strong></li><li><strong>管理服务器用户</strong></li><li><strong>安装远程图形界面<em>x2go</em></strong></li></ul><hr><a id="more"></a><h2 id="Ubuntu-server-16-04-安装教程"><a href="#Ubuntu-server-16-04-安装教程" class="headerlink" title="Ubuntu server 16.04 安装教程"></a>Ubuntu server 16.04 安装教程</h2><hr><h3 id="Ubuntu-server-16-04-启动U盘制作"><a href="#Ubuntu-server-16-04-启动U盘制作" class="headerlink" title="Ubuntu server 16.04 启动U盘制作"></a>Ubuntu server 16.04 启动U盘制作</h3><p>用装系统，没启用U盘怎么行呢！Ubuntu系统的启动U盘制作非常简单，首先从<a href="https://www.ubuntu.com/download/server" target="_blank" rel="noopener">官网</a>下载对应版本的系统镜像文件，下一步你需要一个空白的U盘，用于写入镜像文件，如果U盘中有资料千万做好备份。写入镜像文件的软件可以使用<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">软碟通</a>。</p><p>用软碟通打开镜像文件</p><img src="/images/server_1-1.png"><p>菜单中“启动”-&gt;“写入硬盘映像”</p><img src="/images/server_1-2.png"><p>写入U盘中，点击“写入”，然后就可以吃着火锅唱着歌等着进度条跑完就好了</p><img src="/images/server_1-3.png"><h3 id="安装Ubuntu-server"><a href="#安装Ubuntu-server" class="headerlink" title="安装Ubuntu server"></a>安装Ubuntu server</h3><p><strong>Markdown　Extra</strong>　表格语法：<br>首先用U盘启动，之前需要查下主板进入boot menu的快捷键（一般是Esc，Del，F2，F12等），选择自己U盘启动（可能会有一个UEFI选项，两者都行）</p><p><strong>2017.7.12 update</strong>: 推荐大家安装时都选择英文版本，有时候选择中文版在最后安装的时候会报一些没办法解决的错误</p><p>用启动盘成功引导之后，出现下面的界面，恭喜你完成了第一步</p><img src="/images/server_1-4.png"><p>选择语言你喜欢什么语言就什么语言咯</p><img src="/images/server_1-5.png"><p>选择是否继续安装所选择的语言版本，选择”yes</p><img src="/images/server_1-6.png"><p>选择”否”，默认键盘模式就好了</p><img src="/images/server_1-7.png"><img src="/images/server_1-8.png"><img src="/images/server_1-9.png"><p>然后等进度条跑完，到这里键盘就已经好了，下面来配置服务器的一些基本信息。主机名自己起，但只能用字母和数字</p><img src="/images/server_1-10.png"><p>激动人心的时候到了，设置服务器的第一个用户，没错，就是你啦</p><img src="/images/server_1-11.png"><p>设置密码</p><img src="/images/server_1-12.png"><p>要不要加密主目录，先“否”吧</p><img src="/images/server_1-13.png"><p>设置时区，还是默认</p><img src="/images/server_1-14.png"><p>接下来就是最关键的，选择系统安装硬盘，作者小白就不用“手动”了</p><img src="/images/server_1-15.png"><p>这里选择空白区（理想情况就是系统装在固态中，然后再挂载一个大的机械硬盘）</p><img src="/images/server_1-16.png"><p>这里我是选了一块空白的固态，大小是“max”</p><img src="/images/server_1-17.png"><p>分区设定结束并将修改写入磁盘，结束后出现下面窗口</p><img src="/images/server_1-18.png"><p>用空格选择：OpenSSH server</p><img src="/images/server_1-19.png"><p>选择“yes”</p><img src="/images/server_1-20.png"><p>“continue”重启，完工</p><img src="/images/server_1-21.png"><p>网络什么的安装过程不配置都没有问题，系统装好了再解决，放心大胆搞，最坏就是重装嘛，硬件一般不会搞坏。今天先写到这里，后面我接着按照前面的大纲更新，其实网上这些东西都有，我就是帮大家归纳总结下，希望对大家有帮助吧</p><hr>]]></content>
      
      
        <tags>
            
            <tag> 手把手教你配置Ubuntu server服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu 系统设置密钥登陆</title>
      <link href="/2017/07/22/Ubuntu%20%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E5%AF%86%E9%92%A5%E7%99%BB%E9%99%86/"/>
      <url>/2017/07/22/Ubuntu%20%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E5%AF%86%E9%92%A5%E7%99%BB%E9%99%86/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-系统设置密钥登陆"><a href="#Ubuntu-系统设置密钥登陆" class="headerlink" title="Ubuntu 系统设置密钥登陆"></a>Ubuntu 系统设置密钥登陆</h1><p>本文主要参考文档<br>    <a href="http://www.downgle.com/zt/zqxouw0qwvstzrouysrloolz.html" target="_blank" rel="noopener">http://www.downgle.com/zt/zqxouw0qwvstzrouysrloolz.html</a><br>    <a href="http://blog.csdn.net/kenhins/article/details/51585565" target="_blank" rel="noopener">http://blog.csdn.net/kenhins/article/details/51585565</a><br>自己简单整理留作备份以备后期查看<br><a id="more"></a><br>个人感觉用密钥登陆比用密码登陆安全很多，所以一旦生成密码之后一定不要将自己的密钥给别人，否者别人将很轻松的登陆你的账户，当然我发现如果你使用XShell远程连接ubuntu服务器的时候你可以再给密钥加上一层密码的。</p><h2 id="密钥的生成"><a href="#密钥的生成" class="headerlink" title="密钥的生成"></a>密钥的生成</h2><p>这一步如果你使用XShell的话其实很简单，在上面的工具中有一个“新建用户密钥生成向导”，进去你自己一定会的，这里就不多说了</p><h1 id="设置密钥登陆"><a href="#设置密钥登陆" class="headerlink" title="设置密钥登陆"></a>设置密钥登陆</h1><p>首先需要修改一些配置文件</p><pre><code>vim /etc/ssh/sshd_config</code></pre><p>进入sshd_config文件后需要更改几个地方</p><pre><code> PubkeyAuthentication yes    #启用公告密钥配对认证方式  AuthorizedKeysFile  %h/.ssh/authorized_keys    #设定PublicKey文件路径 RSAAuthentication yes  #允许RSA密钥 PasswordAuthentication no #禁止密码验证登录,如果启用的话,RSA认证登录就没有意义了 #禁用root账户登录，非必要，但为了安全性，请配置 PermitRootLogin no</code></pre><p>其实我在配置的时候发现其中有些找了很多遍都没有找到，然后我就直接手动照着输入一遍也是可以的。</p><p>然后保存配置，重新启动服务</p><pre><code>service sshd restart</code></pre><h1 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h1><p>由上面的配置文件我们可以看出来密钥放置的位置应该在用户根目录下的.ssh/authorized_keys中，如果系统本身就有authorize_keys，那么你就可以直接将你的公钥复制进来但是一般情况下刚装好的新机器没有这个目录，这就需要我们先生成一个(这里我们可以直接进入你要创建的账户去进行，可以使用指令 su 需要创建的用户名)</p><pre><code>ssh-keygen</code></pre><p>输入该指令后一路回车即可<br>回头用指令</p><pre><code>ll</code></pre><p>你可以发现在当前用户的更目录下就会生成一个 .ssh的文件夹,然后再进入这个文件夹操作</p><pre><code>cd ~/.sshvim authorized_keys</code></pre><p>把自己生成的公钥复制进来就可以了<br>然后保存，并且更改文件模式</p><pre><code>chmod 600 authorized_keys</code></pre><h3 id="注意：有些时候复制的时候可能不全，尤其前面缺少几个字母，这个需要自己检查一下，否则登陆会不成功的"><a href="#注意：有些时候复制的时候可能不全，尤其前面缺少几个字母，这个需要自己检查一下，否则登陆会不成功的" class="headerlink" title="注意：有些时候复制的时候可能不全，尤其前面缺少几个字母，这个需要自己检查一下，否则登陆会不成功的"></a>注意：有些时候复制的时候可能不全，尤其前面缺少几个字母，这个需要自己检查一下，否则登陆会不成功的</h3>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu密钥登录教程</title>
      <link href="/2017/07/22/ubuntu%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B/"/>
      <url>/2017/07/22/ubuntu%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ubuntu密钥登录教程"><a href="#ubuntu密钥登录教程" class="headerlink" title="ubuntu密钥登录教程"></a>ubuntu密钥登录教程</h1><h2 id="上文已经讲诉了ubuntu系统设置密匙登陆，接下来讲解一下如何登陆。"><a href="#上文已经讲诉了ubuntu系统设置密匙登陆，接下来讲解一下如何登陆。" class="headerlink" title="上文已经讲诉了ubuntu系统设置密匙登陆，接下来讲解一下如何登陆。"></a>上文已经讲诉了ubuntu系统设置密匙登陆，接下来讲解一下如何登陆。</h2><h3 id="本文使用XShell进行远程连接"><a href="#本文使用XShell进行远程连接" class="headerlink" title="本文使用XShell进行远程连接"></a>本文使用XShell进行远程连接</h3><h3 id="使用WinSCP来进行ubuntu与ubuntu之间的文件的传输"><a href="#使用WinSCP来进行ubuntu与ubuntu之间的文件的传输" class="headerlink" title="使用WinSCP来进行ubuntu与ubuntu之间的文件的传输"></a>使用WinSCP来进行ubuntu与ubuntu之间的文件的传输</h3><a id="more"></a><h1 id="XShell"><a href="#XShell" class="headerlink" title="XShell"></a>XShell</h1><p>首先现在登录时输入密码那一栏已经变成了灰色，这个时候只能使用密匙登录了。<br><img src="http://img.blog.csdn.net/20170716230052647?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>拿到密钥的第一步可以先添加密钥<br><img src="http://img.blog.csdn.net/20170716230143712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20170716230209146?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>找到自己密钥的路径即可<br><img src="http://img.blog.csdn.net/20170716230239310?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>密钥导入进来以后那个文件就可以不要了，当然如果还有其他地方需要的话还需要导入其他的地方，不过如果误删了不要方，旁边还有导出呢。<br>导入成功以后可以进入属性<br><img src="http://img.blog.csdn.net/20170716230314907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>大家可以更改密码，初始密码都为空的，这个地方相当于你再给你的密钥又手动加了一层密码，当然也可以不加，因为我发现加了以后登录的时候还要你自己输入一遍。<br>属性上面还有一公钥，这个里面就是我们放到服务器中的东西，这个东西不要给别人，当然我给你们的密匙你们更不能给别人，否者别人就可以轻松的登录你的账号了。<br>剩下的登录方法更以前一样。</p><h1 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h1><p>同样此时winscp用密码也登录不上了<br><img src="http://img.blog.csdn.net/20170716230438986?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>确认</p><p>直接在之前建立的那个里面更改就好，点击编辑<br><img src="http://img.blog.csdn.net/20170716230513915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>然后点高级<br><img src="http://img.blog.csdn.net/20170716230529320?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>验证<br><img src="http://img.blog.csdn.net/20170716230551613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>然后添加密钥文件的路径<br><img src="http://img.blog.csdn.net/20170716230616590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>右下角选择所有文件<br><img src="http://img.blog.csdn.net/20170716230644369?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>选择密匙<br>然后有一个格式转换，选择确定<br><img src="http://img.blog.csdn.net/20170716230702329?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>然后保存确定保存就完了，大功告成可以链接了。</p>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>双系统时ubuntu更改开机引导</title>
      <link href="/2017/07/22/%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6ubuntu%E6%9B%B4%E6%94%B9%E5%BC%80%E6%9C%BA%E5%BC%95%E5%AF%BC/"/>
      <url>/2017/07/22/%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6ubuntu%E6%9B%B4%E6%94%B9%E5%BC%80%E6%9C%BA%E5%BC%95%E5%AF%BC/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们在windows上安装ubuntu双系统的时候，ubuntu的引导会默认先进入ubuntu系统，这对于那些想使用ubuntu但是并不常用ubuntu系统的人有一些不方便。<br>在网上我有看到EaseBCD这个软件可以用来管理启动项的。<br>但是因为个人之前和身边的朋友使用过，感觉其实并没有解决用户的问题，不安装EaseBCD的时候只用进入一次选择界面，而安装完EaseBCD的时候我们竟然需要进入两次引导界面，这就很不方便。（此处之争对ubuntu其他的双系统也许EaseBCD会更加方便些）另外之前一个朋友发现这个地方很不方便，于是就卸载了EaseBCD结果他的系统完全进不去了，最后在大神的指导下才修复进入了windows系统。<br><a id="more"></a><br>说了这么多到底如何更改启动项呢？其实使用ubuntu自带的系统文件就可以了。</p><h1 id="根据ubuntu自带的系统文件就可以修改启动顺序"><a href="#根据ubuntu自带的系统文件就可以修改启动顺序" class="headerlink" title="根据ubuntu自带的系统文件就可以修改启动顺序"></a>根据ubuntu自带的系统文件就可以修改启动顺序</h1><p>进入系统文件</p><pre><code>sudo vim /etc/default/grub</code></pre><p>进去之后找到GRUB_DEFAULT，它代表启动顺序。<br>然后后面的数字需要根据自己电脑开机时显示的顺序进行选择<br>当然里面还有很多的文件，还可以修改其他的参数，比如，选择界面等待的时间等（默认是10s,如果觉得开机时间太久了，可以自行更改的）</p>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu环境下降低gcc和g++的版本</title>
      <link href="/2017/07/22/ubuntu-Reduce-the-version-gcc-g++/"/>
      <url>/2017/07/22/ubuntu-Reduce-the-version-gcc-g++/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时候我们在跑别人的程序的时候发现自己编译器的版本过高以至于不能运行，这个时候我们就需要降低编译器的版本。</p><h1 id="首先安装低版本的编译器"><a href="#首先安装低版本的编译器" class="headerlink" title="首先安装低版本的编译器"></a>首先安装低版本的编译器</h1><p>这里由于本人用的ubuntu16.04所以编译器自带的是gcc-5.4和g++-5.4,但是需要低版本的，经过测试现在还可以安装4.7的版本</p><pre><code>sudo apt-get install gcc-4.7 gcc-4.7-multilib g++-4.7 g++-4.7-multilib</code></pre><a id="more"></a><h1 id="配置级别"><a href="#配置级别" class="headerlink" title="配置级别"></a>配置级别</h1><pre><code>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 50sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 40</code></pre><p>接着输入</p><pre><code>sudo update-alternatives --config gcc</code></pre><p>然后可以自己选择版本。</p><p>同理配置好了gcc还要配置g++</p><pre><code>sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.7 50sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 40</code></pre><p>同理g++的选择为：</p><pre><code>sudo update-alternatives --config g++</code></pre><p>如果想删除可选项的话可以键入以下指令：</p><pre><code>sudo update-alternatives --remove gcc /usr/bin/gcc-4.5</code></pre><p>本文是自己跟同门根据网上资料整理而得，希望对大家有用。</p>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu16.04 Server install CUDA</title>
      <link href="/2017/07/22/ubuntu16-04-Server-install-CUDA/"/>
      <url>/2017/07/22/ubuntu16-04-Server-install-CUDA/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ubuntu16-04-Server-安装CUDA"><a href="#ubuntu16-04-Server-安装CUDA" class="headerlink" title="ubuntu16.04 Server 安装CUDA"></a>ubuntu16.04 Server 安装CUDA</h1><p>在安装CUDA的时候经常会遇到CUDA安装失败的情况，一般遇到的不允许第三方软件的安装，或者是自带的驱动nouveau的存在。</p><h2 id="允许第三方软件的安装"><a href="#允许第三方软件的安装" class="headerlink" title="允许第三方软件的安装"></a>允许第三方软件的安装</h2><p>这个需要自己重启电脑进入bios系统中去关闭UEFI的安全启动/安全引导<br><a id="more"></a></p><h2 id="关闭自带的驱动nouveau"><a href="#关闭自带的驱动nouveau" class="headerlink" title="关闭自带的驱动nouveau"></a>关闭自带的驱动nouveau</h2><pre><code>sudo vim /etc/modprobe.d/blacklist.conf</code></pre><p>在该文件中添加以下几行：</p><pre><code>blacklist vga16fb blacklist rivafb blacklist rivatv blacklist nvidiafboptions nouveau modeset=0</code></pre><p>添加完以后保存该文件<br>接着更新该文件，使配置有用</p><pre><code>sudo update-initramfs -u</code></pre><p>最后查看nouveau驱动禁止是否成功，如果没有内容则说明禁用成功。</p><h3 id="如果nouveau驱动禁用后没有效果，可以进行强制移除该驱动（如果上面的方法禁用成功可以不使用该方法）"><a href="#如果nouveau驱动禁用后没有效果，可以进行强制移除该驱动（如果上面的方法禁用成功可以不使用该方法）" class="headerlink" title="如果nouveau驱动禁用后没有效果，可以进行强制移除该驱动（如果上面的方法禁用成功可以不使用该方法）"></a>如果nouveau驱动禁用后没有效果，可以进行强制移除该驱动（如果上面的方法禁用成功可以不使用该方法）</h3><p>将这个驱动备份出来然后移除</p><pre><code>mv /lib/modules/3.0.0-12-generic/kernel/drivers/gpu/drm/nouveau/nouveau.ko /lib/modules/3.0.0-12-generic/kernel/drivers/gpu/drm/nouveau/nouveau.ko.org</code></pre><p>重新加载</p><pre><code> update-initramfs -u</code></pre><p>重启发现字体已经变大了，卸载成功。</p><h2 id="CUDA的安装"><a href="#CUDA的安装" class="headerlink" title="CUDA的安装"></a>CUDA的安装</h2><p>因为本文说的ubuntu Server所以安装完一般使没有图形界面的，所以不需要去禁用图形界面，如果不是server版本的话一般还需要禁用图形界面的（可以用ctrl+alt+F1进入文本界面，F1~F6都可以F7是退出文本界面）。<br>禁用图形界面的语句：</p><pre><code>sudo service lightdm stop</code></pre><p>打开图形界面的语句：</p><pre><code>sudo service lightdm start</code></pre><p>nouveau禁用成功了，bios中的UEFI也已经关了，这个时候就可以安心的装CUDA了。<br>首先需要安装依赖项：</p><pre><code>sudo apt-get install build-essential pkg-config linux-headers-$(uname -r)或者下面的方法也可以（用了上面的语句下面的语句就不需要了）：sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler sudo apt-get install --no-install-recommends libboost-all-devsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-devsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</code></pre><p>下载CUDA的安装包<br><a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a><br>可以去NVIDIA的官网去下载，可以根据需求下载。<br>本文下载的runfile，其他形式的文本运行方法在下载界面有介绍的。<br>下载好后用U盘或者SCP等上传到服务器上，接下来进入cuda安装包的地方执行，当然这里根据你的安装包的型号。</p><pre><code>sudo sh cuda_8.0.61_375.26_linux.run</code></pre><p>执行以后会有一堆文本让你读，很多，不过可以直接按q退出，然后按照要求先accept，然后再按照自己的需求安装，因为上面没有手动安装过nvidia的驱动，所以这里需要选择安装驱动的，否则cuda即使安装上了也没有用的。选择完了就开始安装了，安装完成后会有一个Summary显示安装的情况的。<br><img src="http://img.blog.csdn.net/20170715165538644?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGFycmVuODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>到此基本安装完了，可以使用下面的语句去检测nvidia驱动是否安装成功：</p><pre><code>cat /proc/driver/nvidia/version</code></pre><p>如果可以弹出来驱动的版本信息等，说明安装成功，否者没有安装成功。</p><p>安装完后此时查找cuda是找不到的，因为还没有配置环境变量。<br>接下来配置环境变量：</p><pre><code>echo &#39;export PATH=/usr/local/cuda/bin:$PATH&#39; &gt;&gt; ~/.bashrcecho &#39;export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH&#39; &gt;&gt; ~/.bashrcsource ~/.bashrc</code></pre><p>配置完环境变量后再检查一下cuda是否安装成功</p><pre><code>nvcc -V</code></pre><p>提示上面的必须是大写的V，小写的v是不能够被识别的。</p><h2 id="如果要卸载或者重装"><a href="#如果要卸载或者重装" class="headerlink" title="如果要卸载或者重装"></a>如果要卸载或者重装</h2><p>卸载或者重新安装了。这个时候需要先卸载之前安装的。这个在用run文件安装的时候，最后那个summary已经告诉我们如何卸载了。</p><pre><code>To uninstall the CUDA Toolkit. run the uninstall scrip in /usr/local/cuda-8.0/binTo uninstall the NVIDIA Driver. run nvidia-unistall</code></pre><p>可以先按照上面的提示去卸载CUDA和NVIDIA驱动，当然还有其他的方法</p><pre><code>sudo apt-get --purge remove &lt;package_name&gt;</code></pre><h3 id="本文参考网络上各种资源自己配置完自己实验室电脑后整理所得，做一个备忘所用，当然也希望对大家有用。"><a href="#本文参考网络上各种资源自己配置完自己实验室电脑后整理所得，做一个备忘所用，当然也希望对大家有用。" class="headerlink" title="本文参考网络上各种资源自己配置完自己实验室电脑后整理所得，做一个备忘所用，当然也希望对大家有用。"></a>本文参考网络上各种资源自己配置完自己实验室电脑后整理所得，做一个备忘所用，当然也希望对大家有用。</h3>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Thanks</title>
      <link href="/2017/07/22/thanks/"/>
      <url>/2017/07/22/thanks/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Thanks for JingJing’s help to me!</p>]]></content>
      
      
        <tags>
            
            <tag> start </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/07/21/hello-world/"/>
      <url>/2017/07/21/hello-world/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
        <tags>
            
            <tag> start </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
